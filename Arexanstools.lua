loadstring(game:HttpGet('https://roblox-obfuscator.vercel.app/api/script?c=bG9jYWwgU0NSSVBUX1VSTCA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vQVJFWEFOUy9lbW90ZWZmL3JlZnMvaGVhZHMvbWFpbi9BcmV4YW5zdG9vbHMubHVhIiAtLSA8PCBXQUpJQiBESUlTSSEKCi0tIE1lbmNlZ2FoIEdVSSBkaWJ1YXQgYmVydWxhbmcga2FsaSBqaWthIHNrcmlwIGRpZWtzZWt1c2kgbGViaWggZGFyaSBzZWthbGkgdGFucGEgbWUtcmVmcmVzaCBnYW1lLgppZiBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKTpGaW5kRmlyc3RDaGlsZCgiQXJleGFuc3Rvb2xzR1VJIikgdGhlbgogICAgZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIik6RmluZEZpcnN0Q2hpbGQoIkFyZXhhbnN0b29sc0dVSSIpOkRlc3Ryb3koKQplbmQKaWYgZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIik6RmluZEZpcnN0Q2hpbGQoIkFyZXhhbnNTcGVjdGF0b3JHVUkiKSB0aGVuCiAgICBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKTpGaW5kRmlyc3RDaGlsZCgiQXJleGFuc1NwZWN0YXRvckdVSSIpOkRlc3Ryb3koKQplbmQKaWYgZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIik6RmluZEZpcnN0Q2hpbGQoIkZsaW5nU3RhdHVzR1VJIikgdGhlbgogICAgZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIik6RmluZEZpcnN0Q2hpbGQoIkZsaW5nU3RhdHVzR1VJIik6RGVzdHJveSgpCmVuZAoKdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAtLSBMYXlhbmFuIGRhbiBWYXJpYWJlbCBHbG9iYWwKICAgIGxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQogICAgbG9jYWwgVXNlcklucHV0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpCiAgICBsb2NhbCBSdW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKICAgIGxvY2FsIFdvcmtzcGFjZSA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikKICAgIGxvY2FsIExvY2FsUGxheWVyID0gUGxheWVycy5Mb2NhbFBsYXllcgogICAgbG9jYWwgQ29yZUd1aSA9IGdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpCiAgICBsb2NhbCBIdHRwU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiSHR0cFNlcnZpY2UiKQogICAgbG9jYWwgVHdlZW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJUd2VlblNlcnZpY2UiKQogICAgbG9jYWwgTGlnaHRpbmcgPSBnYW1lOkdldFNlcnZpY2UoIkxpZ2h0aW5nIikKICAgIGxvY2FsIE1hdGVyaWFsU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiTWF0ZXJpYWxTZXJ2aWNlIikKICAgIGxvY2FsIFRlbGVwb3J0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIikKICAgIAogICAgLS0gUGVuZ2F0dXJhbiBEZWZhdWx0CiAgICBsb2NhbCBTZXR0aW5ncyA9IHsKICAgICAgICBGbHlTcGVlZCA9IDEsCiAgICAgICAgV2Fsa1NwZWVkID0gMTYsCiAgICAgICAgTWF4Rmx5U3BlZWQgPSAxMCwKICAgICAgICBNYXhXYWxrU3BlZWQgPSA1MDAsCiAgICAgICAgS2lsbEF1cmFSYWRpdXMgPSAyNSwKICAgICAgICBLaWxsQXVyYURhbWFnZSA9IDEwLAogICAgICAgIE1heEtpbGxBdXJhUmFkaXVzID0gMTAwLAogICAgICAgIE1heEtpbGxBdXJhRGFtYWdlID0gMTAwLAogICAgICAgIEFpbWJvdEZPViA9IDkwLAogICAgICAgIEFpbWJvdFBhcnQgPSAiSGVhZCIsCiAgICAgICAgTWF4QWltYm90Rk9WID0gMjAwLAogICAgICAgIFRlbGVwb3J0RGlzdGFuY2UgPSAxMDAsCiAgICB9CiAgICAKICAgIC0tIFZhcmlhYmVsIFN0YXR1cwogICAgbG9jYWwgSXNGbHlpbmcgPSBmYWxzZQogICAgbG9jYWwgSXNOb2NsaXBFbmFibGVkID0gZmFsc2UKICAgIGxvY2FsIElzR29kTW9kZUVuYWJsZWQgPSBmYWxzZSAKICAgIGxvY2FsIElzS2lsbEF1cmFFbmFibGVkID0gZmFsc2UKICAgIGxvY2FsIElzQWltYm90RW5hYmxlZCA9IGZhbHNlCiAgICBsb2NhbCBJc1dhbGtTcGVlZEVuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgT3JpZ2luYWxXYWxrU3BlZWQgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIgYW5kIExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikgYW5kIExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikuV2Fsa1NwZWVkIG9yIDE2CiAgICBsb2NhbCBGbHlDb25uZWN0aW9ucyA9IHt9CiAgICBsb2NhbCBnb2RNb2RlQ29ubmVjdGlvbiA9IG5pbCAKICAgIGxvY2FsIEtpbGxBdXJhQ29ubmVjdGlvbiA9IG5pbAogICAgbG9jYWwgQWltYm90Q29ubmVjdGlvbiA9IG5pbAogICAgbG9jYWwgQWltYm90VGFyZ2V0ID0gbmlsCiAgICBsb2NhbCBGT1ZQYXJ0ID0gbmlsCiAgICBsb2NhbCBJc0luZmluaXR5SnVtcEVuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgaW5maW5pdHlKdW1wQ29ubmVjdGlvbiA9IG5pbAogICAgbG9jYWwgUGxheWVyQnV0dG9ucyA9IHt9IC0tIENhY2hlIHVudHVrIGVsZW1lbiBVSSBwZW1haW4KICAgIGxvY2FsIEN1cnJlbnRQbGF5ZXJGaWx0ZXIgPSAiIgogICAgbG9jYWwgdG91Y2hGbGluZ0d1aSA9IG5pbAogICAgbG9jYWwgaXNVcGRhdGluZ1BsYXllckxpc3QgPSBmYWxzZSAKICAgIGxvY2FsIGlzTWluaVRvZ2dsZURyYWdnYWJsZSA9IHRydWUgCiAgICBsb2NhbCBJc0FudGlMYWdFbmFibGVkID0gZmFsc2UgCiAgICBsb2NhbCBhbnRpTGFnQ29ubmVjdGlvbiA9IG5pbCAKICAgIGxvY2FsIElzSW52aXNpYmlsaXR5RW5hYmxlZCA9IGZhbHNlCiAgICAKICAgIC0tIFtbIElOVEVHUkFTSSBCT09TVCBGUFMgXV0gLS0KICAgIGxvY2FsIElzQm9vc3RGUFNFbmFibGVkID0gZmFsc2UKICAgIGxvY2FsIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncyA9IHt9CiAgICBsb2NhbCBib29zdEZwc0Rlc2NlbmRhbnRDb25uZWN0aW9uID0gbmlsCiAgICAKICAgIC0tIFtbIFZBUklBQkVMIFZJRVcgUExBWUVSIF1dIC0tCiAgICBsb2NhbCBJc1ZpZXdpbmdQbGF5ZXIgPSBmYWxzZQogICAgbG9jYWwgdmlld2luZ1BsYXllckNvbm5lY3Rpb24gPSBuaWwKICAgIGxvY2FsIGN1cnJlbnRseVZpZXdlZFBsYXllciA9IG5pbAogICAgbG9jYWwgU3BlY3RhdG9yR3VpID0gbmlsCiAgICBsb2NhbCBvcmlnaW5hbFBsYXllckNGcmFtZSA9IG5pbCAtLSBVbnR1ayBtZW55aW1wYW4gQ0ZyYW1lIGFzbGkgcGVtYWluCiAgICBsb2NhbCBvcmlnaW5hbENhbWVyYVN1YmplY3QgPSBuaWwgLS0gVW50dWsgbWVueWltcGFuIHN1YmplayBrYW1lcmEgYXNsaQogICAgbG9jYWwgbG9jYWxQbGF5ZXJJc0hpZGRlbiA9IGZhbHNlIC0tIFN0YXR1cyBhcGFrYWggcGVtYWluIGxva2FsIGRpc2VtYnVueWlrYW4KICAgIAogICAgbG9jYWwgaXNFbW90ZVRvZ2dsZURyYWdnYWJsZSA9IHRydWUKICAgIGxvY2FsIGlzQW5pbWF0aW9uVG9nZ2xlRHJhZ2dhYmxlID0gdHJ1ZQoKICAgIGxvY2FsIGlzRW1vdGVUcmFuc3BhcmVudCA9IHRydWUKICAgIGxvY2FsIGlzQW5pbWF0aW9uVHJhbnNwYXJlbnQgPSB0cnVlCgogICAgLS0gVmFyaWFiZWwgVGVsZXBvcnQKICAgIGxvY2FsIHNhdmVkVGVsZXBvcnRMb2NhdGlvbnMgPSB7fQogICAgbG9jYWwgVEVMRVBPUlRfU0FWRV9GSUxFID0gIkFyZXhhbnNUb29sc19UZWxlcG9ydHNfIiAuLiB0b3N0cmluZyhnYW1lLlBsYWNlSWQpIC4uICIuanNvbiIKICAgIAogICAgLS0gVmFyaWFiZWwgdW50dWsgbWVueWltcGFuIHBvc2lzaSBHVUkKICAgIGxvY2FsIEdVSV9QT1NJVElPTlNfU0FWRV9GSUxFID0gIkFyZXhhbnNUb29sc19HdWlQb3NpdGlvbnNfIiAuLiB0b3N0cmluZyhnYW1lLlBsYWNlSWQpIC4uICIuanNvbiIKICAgIGxvY2FsIGxvYWRlZEd1aVBvc2l0aW9ucyA9IG5pbAogICAgCiAgICAtLSBWYXJpYWJlbCB1bnR1ayBtZW55aW1wYW4gc3RhdHVzIGZpdHVyCiAgICBsb2NhbCBGRUFUVVJFX1NUQVRFU19TQVZFX0ZJTEUgPSAiQXJleGFuc1Rvb2xzX0ZlYXR1cmVTdGF0ZXNfIiAuLiB0b3N0cmluZyhnYW1lLlBsYWNlSWQpIC4uICIuanNvbiIKICAgIAogICAgLS0gVmFyaWFiZWwgdW50dWsgbWVueWltcGFuIGRhdGEgb3JpZ2luYWwga2FyYWt0ZXIgc2FhdCBpbnZpc2libGUKICAgIGxvY2FsIG9yaWdpbmFsQ2hhcmFjdGVyQXBwZWFyYW5jZSA9IHt9CgogICAgLS0gVmFyaWFiZWwgQW50aUZsaW5nCiAgICBsb2NhbCBhbnRpZmxpbmdfdmVsb2NpdHlfdGhyZXNob2xkID0gODUKICAgIGxvY2FsIGFudGlmbGluZ19hbmd1bGFyX3RocmVzaG9sZCA9IDI1CiAgICBsb2NhbCBhbnRpZmxpbmdfbGFzdF9zYWZlX2NmcmFtZSA9IG5pbAogICAgbG9jYWwgYW50aWZsaW5nX2VuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgYW50aWZsaW5nX2Nvbm5lY3Rpb24gPSBuaWwKICAgIAogICAgLS0gW1sgVkFSSUFCRUwgVU5UVUsgRklUVVIgRkxJTkcgXV0gLS0KICAgIGxvY2FsIGN1cnJlbnRGbGluZ1RhcmdldCA9IG5pbAogICAgbG9jYWwgZmxpbmdMb29wQ29ubmVjdGlvbiA9IG5pbAogICAgbG9jYWwgZmxpbmdTdGFydFBvc2l0aW9uID0gbmlsIAogICAgbG9jYWwgZmxpbmdTdGF0dXNHdWkgPSBuaWwgCiAgICAKICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAtLSA9PSBWQVJJQUJFTCBVTlRVSyBGSVRVUiBFTU9URSBEQU4gQU5JTUFTSSAoRElQSVNBSEtBTikgICAgICAgICAgPT0KICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICBsb2NhbCBpc0Vtb3RlRW5hYmxlZCA9IGZhbHNlCiAgICBsb2NhbCBFbW90ZVNjcmVlbkd1aSA9IG5pbAogICAgbG9jYWwgaXNBbmltYXRpb25FbmFibGVkID0gZmFsc2UgCiAgICBsb2NhbCBBbmltYXRpb25TY3JlZW5HdWkgPSBuaWwgCiAgICAKICAgIC0tIFZhcmlhYmVsIEdsb2JhbCB1bnR1ayBtZW55aW1wYW4gYW5pbWFzaQogICAgbG9jYWwgbGFzdEFuaW1hdGlvbnMgPSB7fQogICAgbG9jYWwgQU5JTUFUSU9OX1NBVkVfRklMRSA9ICJBcmV4YW5zVG9vbHNfQW5pbWF0aW9ucy5qc29uIgoKICAgIC0tIE1lbWJ1YXQgR1VJIHV0YW1hCiAgICBsb2NhbCBTY3JlZW5HdWkgPSBJbnN0YW5jZS5uZXcoIlNjcmVlbkd1aSIpCiAgICBTY3JlZW5HdWkuTmFtZSA9ICJBcmV4YW5zdG9vbHNHVUkiCiAgICBTY3JlZW5HdWkuUGFyZW50ID0gQ29yZUd1aQogICAgU2NyZWVuR3VpLlpJbmRleEJlaGF2aW9yID0gRW51bS5aSW5kZXhCZWhhdmlvci5TaWJsaW5nCiAgICBTY3JlZW5HdWkuUmVzZXRPblNwYXduID0gZmFsc2UKICAgIAogICAgLS0gS29udGFpbmVyIHVudHVrIHNlbXVhIHRvbWJvbCBtaW5pCiAgICBsb2NhbCBNaW5pVG9nZ2xlQ29udGFpbmVyID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKICAgIE1pbmlUb2dnbGVDb250YWluZXIuTmFtZSA9ICJNaW5pVG9nZ2xlQ29udGFpbmVyIgogICAgTWluaVRvZ2dsZUNvbnRhaW5lci5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDEsIDAuNSkKICAgIE1pbmlUb2dnbGVDb250YWluZXIuUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTI1LCAwLjUsIC03LjUpIAogICAgTWluaVRvZ2dsZUNvbnRhaW5lci5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgTWluaVRvZ2dsZUNvbnRhaW5lci5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICBNaW5pVG9nZ2xlQ29udGFpbmVyLkF1dG9tYXRpY1NpemUgPSBFbnVtLkF1dG9tYXRpY1NpemUuWAogICAgTWluaVRvZ2dsZUNvbnRhaW5lci5TaXplID0gVURpbTIubmV3KDAsMCwwLDI1KSAKICAgIE1pbmlUb2dnbGVDb250YWluZXIuVGV4dCA9ICIiCiAgICBNaW5pVG9nZ2xlQ29udGFpbmVyLkF1dG9CdXR0b25Db2xvciA9IGZhbHNlCiAgICBNaW5pVG9nZ2xlQ29udGFpbmVyLlBhcmVudCA9IFNjcmVlbkd1aQogICAgCiAgICBsb2NhbCBNaW5pVG9nZ2xlTGF5b3V0ID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiKQogICAgTWluaVRvZ2dsZUxheW91dC5GaWxsRGlyZWN0aW9uID0gRW51bS5GaWxsRGlyZWN0aW9uLkhvcml6b250YWwKICAgIE1pbmlUb2dnbGVMYXlvdXQuVmVydGljYWxBbGlnbm1lbnQgPSBFbnVtLlZlcnRpY2FsQWxpZ25tZW50LkNlbnRlcgogICAgTWluaVRvZ2dsZUxheW91dC5Ib3Jpem9udGFsQWxpZ25tZW50ID0gRW51bS5Ib3Jpem9udGFsQWxpZ25tZW50LlJpZ2h0CiAgICBNaW5pVG9nZ2xlTGF5b3V0LlNvcnRPcmRlciA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyCiAgICBNaW5pVG9nZ2xlTGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQogICAgTWluaVRvZ2dsZUxheW91dC5QYXJlbnQgPSBNaW5pVG9nZ2xlQ29udGFpbmVyCiAgICAKICAgIC0tIFRvbWJvbCB0b2dnbGUgdXRhbWEKICAgIGxvY2FsIE1pbmlUb2dnbGVCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQogICAgTWluaVRvZ2dsZUJ1dHRvbi5OYW1lID0gIk1pbmlUb2dnbGVCdXR0b24iCiAgICBNaW5pVG9nZ2xlQnV0dG9uLkxheW91dE9yZGVyID0gMQogICAgTWluaVRvZ2dsZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDIwLCAwLCAyMCkgCiAgICBNaW5pVG9nZ2xlQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMCwgMjAsIDIwKQogICAgTWluaVRvZ2dsZUJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgTWluaVRvZ2dsZUJ1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICBNaW5pVG9nZ2xlQnV0dG9uLlRleHQgPSAi4peAIgogICAgTWluaVRvZ2dsZUJ1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMjAwLCAyNTUpCiAgICBNaW5pVG9nZ2xlQnV0dG9uLlRleHRTaXplID0gMTMgCiAgICBNaW5pVG9nZ2xlQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgIE1pbmlUb2dnbGVCdXR0b24uUGFyZW50ID0gTWluaVRvZ2dsZUNvbnRhaW5lcgogICAgCiAgICBsb2NhbCBNaW5pVUlDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgTWluaVRvZ2dsZUJ1dHRvbikKICAgIE1pbmlVSUNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA4KQogICAgCiAgICBsb2NhbCBNaW5pVUlTdHJva2UgPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgTWluaVRvZ2dsZUJ1dHRvbikKICAgIE1pbmlVSVN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDAsIDE1MCwgMjU1KQogICAgTWluaVVJU3Ryb2tlLlRoaWNrbmVzcyA9IDIKICAgIE1pbmlVSVN0cm9rZS5UcmFuc3BhcmVuY3kgPSAwLjUKICAgIE1pbmlVSVN0cm9rZS5QYXJlbnQgPSBNaW5pVG9nZ2xlQnV0dG9uCiAgICAKICAgIC0tIFRvbWJvbCB0b2dnbGUgRW1vdGUgKPCfpKEpCiAgICBsb2NhbCBFbW90ZVRvZ2dsZUJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCiAgICBFbW90ZVRvZ2dsZUJ1dHRvbi5OYW1lID0gIkVtb3RlVG9nZ2xlQnV0dG9uIgogICAgRW1vdGVUb2dnbGVCdXR0b24uTGF5b3V0T3JkZXIgPSAyCiAgICBFbW90ZVRvZ2dsZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDI1LCAwLCAyNSkKICAgIEVtb3RlVG9nZ2xlQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0OCwgNjMsIDkwKQogICAgRW1vdGVUb2dnbGVCdXR0b24uQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoOTAsIDE1MCwgMjU1KQogICAgRW1vdGVUb2dnbGVCdXR0b24uQm9yZGVyU2l6ZVBpeGVsID0gMQogICAgRW1vdGVUb2dnbGVCdXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICBFbW90ZVRvZ2dsZUJ1dHRvbi5UZXh0ID0gIvCfpKEiCiAgICBFbW90ZVRvZ2dsZUJ1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKICAgIEVtb3RlVG9nZ2xlQnV0dG9uLlRleHRTaXplID0gMjQKICAgIEVtb3RlVG9nZ2xlQnV0dG9uLlZpc2libGUgPSBmYWxzZSAKICAgIEVtb3RlVG9nZ2xlQnV0dG9uLlBhcmVudCA9IE1pbmlUb2dnbGVDb250YWluZXIKICAgIGxvY2FsIEVtb3RlVG9nZ2xlQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEVtb3RlVG9nZ2xlQnV0dG9uKQogICAgRW1vdGVUb2dnbGVDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKICAgIAogICAgLS0gVG9tYm9sIHRvZ2dsZSBBbmltYXNpICjwn5iAKQogICAgbG9jYWwgQW5pbWF0aW9uU2hvd0J1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCiAgICBBbmltYXRpb25TaG93QnV0dG9uLk5hbWUgPSAiQW5pbWF0aW9uU2hvd0J1dHRvbiIKICAgIEFuaW1hdGlvblNob3dCdXR0b24uTGF5b3V0T3JkZXIgPSAzCiAgICBBbmltYXRpb25TaG93QnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMjUsIDAsIDI1KQogICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMTIwLCAyNTUpCiAgICBBbmltYXRpb25TaG93QnV0dG9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjMKICAgIEFuaW1hdGlvblNob3dCdXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAogICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5UZXh0ID0gIvCfmIAiCiAgICBBbmltYXRpb25TaG93QnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5UZXh0U2NhbGVkID0gdHJ1ZQogICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5WaXNpYmxlID0gZmFsc2UKICAgIEFuaW1hdGlvblNob3dCdXR0b24uUGFyZW50ID0gTWluaVRvZ2dsZUNvbnRhaW5lcgogICAgbG9jYWwgQW5pbWF0aW9uVG9nZ2xlQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEFuaW1hdGlvblNob3dCdXR0b24pCiAgICBBbmltYXRpb25Ub2dnbGVDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMC41LCAwKQoKICAgIAogICAgLS0gRnJhbWUgR1VJIHV0YW1hCiAgICBsb2NhbCBNYWluRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKICAgIE1haW5GcmFtZS5OYW1lID0gIk1haW5GcmFtZSIKICAgIE1haW5GcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDIzMCwgMCwgMzIwKQogICAgTWFpbkZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTExNSwgMC41LCAtMTYwKQogICAgTWFpbkZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMCwgMjAsIDIwKQogICAgTWFpbkZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjUKICAgIE1haW5GcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICBNYWluRnJhbWUuUGFyZW50ID0gU2NyZWVuR3VpCiAgICBNYWluRnJhbWUuVmlzaWJsZSA9IGZhbHNlCiAgICAKICAgIGxvY2FsIE1haW5VSUNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQogICAgTWFpblVJQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDgpCiAgICBNYWluVUlDb3JuZXIuUGFyZW50ID0gTWFpbkZyYW1lCiAgICAKICAgIGxvY2FsIFVJU3Ryb2tlID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIpCiAgICBVSVN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDAsIDE1MCwgMjU1KQogICAgVUlTdHJva2UuVGhpY2tuZXNzID0gMgogICAgVUlTdHJva2UuVHJhbnNwYXJlbmN5ID0gMC41CiAgICBVSVN0cm9rZS5QYXJlbnQgPSBNYWluRnJhbWUKICAgIAogICAgbG9jYWwgVGl0bGVCYXIgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQogICAgVGl0bGVCYXIuTmFtZSA9ICJUaXRsZUJhciIKICAgIFRpdGxlQmFyLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMzApCiAgICBUaXRsZUJhci5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKQogICAgVGl0bGVCYXIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1LCAyNSwgMjUpCiAgICBUaXRsZUJhci5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICBUaXRsZUJhci5UZXh0ID0gIiIKICAgIFRpdGxlQmFyLkF1dG9CdXR0b25Db2xvciA9IGZhbHNlCiAgICBUaXRsZUJhci5QYXJlbnQgPSBNYWluRnJhbWUKICAgIAogICAgbG9jYWwgVGl0bGVMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKICAgIFRpdGxlTGFiZWwuTmFtZSA9ICJUaXRsZUxhYmVsIgogICAgVGl0bGVMYWJlbC5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCiAgICBUaXRsZUxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCiAgICBUaXRsZUxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICBUaXRsZUxhYmVsLlRleHQgPSAiQXJleGFucyBUb29scyIKICAgIFRpdGxlTGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDIwMCwgMjU1KQogICAgVGl0bGVMYWJlbC5UZXh0U2l6ZSA9IDE0CiAgICBUaXRsZUxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgIFRpdGxlTGFiZWwuUGFyZW50ID0gVGl0bGVCYXIKICAgIAogICAgbG9jYWwgVGFic0ZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCiAgICBUYWJzRnJhbWUuTmFtZSA9ICJUYWJzRnJhbWUiCiAgICBUYWJzRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLCA4MCwgMSwgLTMwKQogICAgVGFic0ZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDMwKQogICAgVGFic0ZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNSwgMjUsIDI1KQogICAgVGFic0ZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDAKICAgIFRhYnNGcmFtZS5QYXJlbnQgPSBNYWluRnJhbWUKICAgIAogICAgbG9jYWwgVGFiTGlzdExheW91dCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IikKICAgIFRhYkxpc3RMYXlvdXQuTmFtZSA9ICJUYWJMaXN0TGF5b3V0IgogICAgVGFiTGlzdExheW91dC5QYWRkaW5nID0gVURpbS5uZXcoMCwgNSkKICAgIFRhYkxpc3RMYXlvdXQuSG9yaXpvbnRhbEFsaWdubWVudCA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXIKICAgIFRhYkxpc3RMYXlvdXQuVmVydGljYWxBbGlnbm1lbnQgPSBFbnVtLlZlcnRpY2FsQWxpZ25tZW50LlRvcAogICAgVGFiTGlzdExheW91dC5GaWxsRGlyZWN0aW9uID0gRW51bS5GaWxsRGlyZWN0aW9uLlZlcnRpY2FsCiAgICBUYWJMaXN0TGF5b3V0LlBhcmVudCA9IFRhYnNGcmFtZQogICAgCiAgICBsb2NhbCBDb250ZW50RnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKICAgIENvbnRlbnRGcmFtZS5OYW1lID0gIkNvbnRlbnRGcmFtZSIKICAgIENvbnRlbnRGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIC04MCwgMSwgLTMwKQogICAgQ29udGVudEZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDgwLCAwLCAzMCkKICAgIENvbnRlbnRGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAsIDIwLCAyMCkKICAgIENvbnRlbnRGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgQ29udGVudEZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDAKICAgIENvbnRlbnRGcmFtZS5QYXJlbnQgPSBNYWluRnJhbWUKICAgIAogICAgLS0gRnJhbWUga29udGVuIHRhYgogICAgbG9jYWwgUGxheWVyVGFiQ29udGVudCA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQogICAgUGxheWVyVGFiQ29udGVudC5OYW1lID0gIlBsYXllclRhYiIKICAgIFBsYXllclRhYkNvbnRlbnQuU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTAsIDEsIC0xMCkKICAgIFBsYXllclRhYkNvbnRlbnQuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMCwgNSkKICAgIFBsYXllclRhYkNvbnRlbnQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIFBsYXllclRhYkNvbnRlbnQuVmlzaWJsZSA9IGZhbHNlCiAgICBQbGF5ZXJUYWJDb250ZW50LlBhcmVudCA9IENvbnRlbnRGcmFtZQogICAgCiAgICBsb2NhbCBQbGF5ZXJMaXN0Q29udGFpbmVyID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIpCiAgICBQbGF5ZXJMaXN0Q29udGFpbmVyLk5hbWUgPSAiUGxheWVyTGlzdENvbnRhaW5lciIKICAgIFBsYXllckxpc3RDb250YWluZXIuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtNTUpCiAgICBQbGF5ZXJMaXN0Q29udGFpbmVyLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDU1KQogICAgUGxheWVyTGlzdENvbnRhaW5lci5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgUGxheWVyTGlzdENvbnRhaW5lci5DYW52YXNTaXplID0gVURpbTIubmV3KDAsIDAsIDAsIDApCiAgICBQbGF5ZXJMaXN0Q29udGFpbmVyLlNjcm9sbEJhclRoaWNrbmVzcyA9IDEwCiAgICBQbGF5ZXJMaXN0Q29udGFpbmVyLlZlcnRpY2FsU2Nyb2xsQmFySW5zZXQgPSBFbnVtLlNjcm9sbEJhckluc2V0LkFsd2F5cwogICAgUGxheWVyTGlzdENvbnRhaW5lci5TY3JvbGxpbmdEaXJlY3Rpb24gPSBFbnVtLlNjcm9sbGluZ0RpcmVjdGlvbi5ZCiAgICBQbGF5ZXJMaXN0Q29udGFpbmVyLlBhcmVudCA9IFBsYXllclRhYkNvbnRlbnQKICAgIAogICAgbG9jYWwgR2VuZXJhbFRhYkNvbnRlbnQgPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIikKICAgIEdlbmVyYWxUYWJDb250ZW50Lk5hbWUgPSAiR2VuZXJhbFRhYiIKICAgIEdlbmVyYWxUYWJDb250ZW50LlNpemUgPSBVRGltMi5uZXcoMSwgLTEwLCAxLCAtMTApCiAgICBHZW5lcmFsVGFiQ29udGVudC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCA1KQogICAgR2VuZXJhbFRhYkNvbnRlbnQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIEdlbmVyYWxUYWJDb250ZW50LlZpc2libGUgPSBmYWxzZQogICAgR2VuZXJhbFRhYkNvbnRlbnQuQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKSAKICAgIEdlbmVyYWxUYWJDb250ZW50LlNjcm9sbEJhclRoaWNrbmVzcyA9IDEwCiAgICBHZW5lcmFsVGFiQ29udGVudC5WZXJ0aWNhbFNjcm9sbEJhckluc2V0ID0gRW51bS5TY3JvbGxCYXJJbnNldC5BbHdheXMKICAgIEdlbmVyYWxUYWJDb250ZW50LlNjcm9sbGluZ0RpcmVjdGlvbiA9IEVudW0uU2Nyb2xsaW5nRGlyZWN0aW9uLlkKICAgIEdlbmVyYWxUYWJDb250ZW50LlBhcmVudCA9IENvbnRlbnRGcmFtZQogICAgCiAgICBsb2NhbCBDb21iYXRUYWJDb250ZW50ID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIpCiAgICBDb21iYXRUYWJDb250ZW50Lk5hbWUgPSAiQ29tYmF0VGFiIgogICAgQ29tYmF0VGFiQ29udGVudC5TaXplID0gVURpbTIubmV3KDEsIC0xMCwgMSwgLTEwKQogICAgQ29tYmF0VGFiQ29udGVudC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCA1KQogICAgQ29tYmF0VGFiQ29udGVudC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgQ29tYmF0VGFiQ29udGVudC5WaXNpYmxlID0gZmFsc2UKICAgIENvbWJhdFRhYkNvbnRlbnQuQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKQogICAgQ29tYmF0VGFiQ29udGVudC5TY3JvbGxCYXJUaGlja25lc3MgPSAxMAogICAgQ29tYmF0VGFiQ29udGVudC5WZXJ0aWNhbFNjcm9sbEJhckluc2V0ID0gRW51bS5TY3JvbGxCYXJJbnNldC5BbHdheXMKICAgIENvbWJhdFRhYkNvbnRlbnQuU2Nyb2xsaW5nRGlyZWN0aW9uID0gRW51bS5TY3JvbGxpbmdEaXJlY3Rpb24uWQogICAgQ29tYmF0VGFiQ29udGVudC5QYXJlbnQgPSBDb250ZW50RnJhbWUKICAgIAogICAgbG9jYWwgVGVsZXBvcnRUYWJDb250ZW50ID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIpCiAgICBUZWxlcG9ydFRhYkNvbnRlbnQuTmFtZSA9ICJUZWxlcG9ydFRhYiIKICAgIFRlbGVwb3J0VGFiQ29udGVudC5TaXplID0gVURpbTIubmV3KDEsIC0xMCwgMSwgLTEwKQogICAgVGVsZXBvcnRUYWJDb250ZW50LlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDUsIDAsIDUpCiAgICBUZWxlcG9ydFRhYkNvbnRlbnQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIFRlbGVwb3J0VGFiQ29udGVudC5WaXNpYmxlID0gZmFsc2UKICAgIFRlbGVwb3J0VGFiQ29udGVudC5DYW52YXNTaXplID0gVURpbTIubmV3KDAsIDAsIDAsIDApCiAgICBUZWxlcG9ydFRhYkNvbnRlbnQuU2Nyb2xsQmFyVGhpY2tuZXNzID0gMTAKICAgIFRlbGVwb3J0VGFiQ29udGVudC5WZXJ0aWNhbFNjcm9sbEJhckluc2V0ID0gRW51bS5TY3JvbGxCYXJJbnNldC5BbHdheXMKICAgIFRlbGVwb3J0VGFiQ29udGVudC5TY3JvbGxpbmdEaXJlY3Rpb24gPSBFbnVtLlNjcm9sbGluZ0RpcmVjdGlvbi5ZCiAgICBUZWxlcG9ydFRhYkNvbnRlbnQuUGFyZW50ID0gQ29udGVudEZyYW1lCiAgICAKICAgIGxvY2FsIFZpcFRhYkNvbnRlbnQgPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIikKICAgIFZpcFRhYkNvbnRlbnQuTmFtZSA9ICJWaXBUYWIiCiAgICBWaXBUYWJDb250ZW50LlNpemUgPSBVRGltMi5uZXcoMSwgLTEwLCAxLCAtMTApCiAgICBWaXBUYWJDb250ZW50LlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDUsIDAsIDUpCiAgICBWaXBUYWJDb250ZW50LkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICBWaXBUYWJDb250ZW50LlZpc2libGUgPSBmYWxzZQogICAgVmlwVGFiQ29udGVudC5DYW52YXNTaXplID0gVURpbTIubmV3KDAsIDAsIDAsIDApCiAgICBWaXBUYWJDb250ZW50LlNjcm9sbEJhclRoaWNrbmVzcyA9IDEwCiAgICBWaXBUYWJDb250ZW50LlZlcnRpY2FsU2Nyb2xsQmFySW5zZXQgPSBFbnVtLlNjcm9sbEJhckluc2V0LkFsd2F5cwogICAgVmlwVGFiQ29udGVudC5TY3JvbGxpbmdEaXJlY3Rpb24gPSBFbnVtLlNjcm9sbGluZ0RpcmVjdGlvbi5ZCiAgICBWaXBUYWJDb250ZW50LlBhcmVudCA9IENvbnRlbnRGcmFtZQoKICAgIGxvY2FsIFNldHRpbmdzVGFiQ29udGVudCA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiKQogICAgU2V0dGluZ3NUYWJDb250ZW50Lk5hbWUgPSAiU2V0dGluZ3NUYWIiCiAgICBTZXR0aW5nc1RhYkNvbnRlbnQuU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTAsIDEsIC0xMCkKICAgIFNldHRpbmdzVGFiQ29udGVudC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCA1KQogICAgU2V0dGluZ3NUYWJDb250ZW50LkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICBTZXR0aW5nc1RhYkNvbnRlbnQuVmlzaWJsZSA9IGZhbHNlCiAgICBTZXR0aW5nc1RhYkNvbnRlbnQuQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKQogICAgU2V0dGluZ3NUYWJDb250ZW50LlNjcm9sbEJhclRoaWNrbmVzcyA9IDEwCiAgICBTZXR0aW5nc1RhYkNvbnRlbnQuVmVydGljYWxTY3JvbGxCYXJJbnNldCA9IEVudW0uU2Nyb2xsQmFySW5zZXQuQWx3YXlzCiAgICBTZXR0aW5nc1RhYkNvbnRlbnQuU2Nyb2xsaW5nRGlyZWN0aW9uID0gRW51bS5TY3JvbGxpbmdEaXJlY3Rpb24uWQogICAgU2V0dGluZ3NUYWJDb250ZW50LlBhcmVudCA9IENvbnRlbnRGcmFtZQogICAgCiAgICAtLSBNZW5hbWJhaGthbiBVSUxpc3RMYXlvdXQga2Uga29udGVuIHRhYgogICAgbG9jYWwgUGxheWVyTGlzdExheW91dCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IikKICAgIFBsYXllckxpc3RMYXlvdXQuTmFtZSA9ICJQbGF5ZXJMaXN0TGF5b3V0IgogICAgUGxheWVyTGlzdExheW91dC5QYWRkaW5nID0gVURpbS5uZXcoMCwgNSkKICAgIFBsYXllckxpc3RMYXlvdXQuU29ydE9yZGVyID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXIKICAgIFBsYXllckxpc3RMYXlvdXQuUGFyZW50ID0gUGxheWVyTGlzdENvbnRhaW5lcgogICAgCiAgICBsb2NhbCBHZW5lcmFsTGlzdExheW91dCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IikKICAgIEdlbmVyYWxMaXN0TGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQogICAgR2VuZXJhbExpc3RMYXlvdXQuUGFyZW50ID0gR2VuZXJhbFRhYkNvbnRlbnQKICAgIAogICAgbG9jYWwgQ29tYmF0TGlzdExheW91dCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IikKICAgIENvbWJhdExpc3RMYXlvdXQuUGFkZGluZyA9IFVEaW0ubmV3KDAsIDUpCiAgICBDb21iYXRMaXN0TGF5b3V0LlBhcmVudCA9IENvbWJhdFRhYkNvbnRlbnQKICAgIAogICAgbG9jYWwgVGVsZXBvcnRMaXN0TGF5b3V0ID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiKQogICAgVGVsZXBvcnRMaXN0TGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCAyKQogICAgVGVsZXBvcnRMaXN0TGF5b3V0LlNvcnRPcmRlciA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyCiAgICBUZWxlcG9ydExpc3RMYXlvdXQuUGFyZW50ID0gVGVsZXBvcnRUYWJDb250ZW50CiAgICAKICAgIGxvY2FsIFZpcExpc3RMYXlvdXQgPSBJbnN0YW5jZS5uZXcoIlVJTGlzdExheW91dCIpCiAgICBWaXBMaXN0TGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQogICAgVmlwTGlzdExheW91dC5QYXJlbnQgPSBWaXBUYWJDb250ZW50CgogICAgbG9jYWwgU2V0dGluZ3NMaXN0TGF5b3V0ID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiKQogICAgU2V0dGluZ3NMaXN0TGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQogICAgU2V0dGluZ3NMaXN0TGF5b3V0LlBhcmVudCA9IFNldHRpbmdzVGFiQ29udGVudAogICAgCiAgICAtLSBBdHVyIENhbnZhc1NpemUgdW50dWsgVGFiIHNlY2FyYSBkaW5hbWlzCiAgICBsb2NhbCBmdW5jdGlvbiBzZXR1cENhbnZhc1NpemUobGlzdExheW91dCwgc2Nyb2xsaW5nRnJhbWUpCiAgICAgICAgbGlzdExheW91dDpHZXRQcm9wZXJ0eUNoYW5nZWRTaWduYWwoIkFic29sdXRlQ29udGVudFNpemUiKTpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgc2Nyb2xsaW5nRnJhbWUuQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygwLCAwLCAwLCBsaXN0TGF5b3V0LkFic29sdXRlQ29udGVudFNpemUuWSkKICAgICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgc2V0dXBDYW52YXNTaXplKFBsYXllckxpc3RMYXlvdXQsIFBsYXllckxpc3RDb250YWluZXIpCiAgICBzZXR1cENhbnZhc1NpemUoR2VuZXJhbExpc3RMYXlvdXQsIEdlbmVyYWxUYWJDb250ZW50KQogICAgc2V0dXBDYW52YXNTaXplKENvbWJhdExpc3RMYXlvdXQsIENvbWJhdFRhYkNvbnRlbnQpCiAgICBzZXR1cENhbnZhc1NpemUoVGVsZXBvcnRMaXN0TGF5b3V0LCBUZWxlcG9ydFRhYkNvbnRlbnQpCiAgICBzZXR1cENhbnZhc1NpemUoVmlwTGlzdExheW91dCwgVmlwVGFiQ29udGVudCkKICAgIHNldHVwQ2FudmFzU2l6ZShTZXR0aW5nc0xpc3RMYXlvdXQsIFNldHRpbmdzVGFiQ29udGVudCkKICAgIAogICAgLS0gRGVrbGFyYXNpIGZ1bmdzaSBkaSBhd2FsCiAgICBsb2NhbCBmdW5jdGlvbiBjcmVhdGVCdXR0b24ocGFyZW50LCBuYW1lLCBjYWxsYmFjaykKICAgICAgICBsb2NhbCBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQogICAgICAgIGJ1dHRvbi5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDMwKQogICAgICAgIGJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMTIwLCAyNTUpCiAgICAgICAgYnV0dG9uLkJvcmRlclNpemVQaXhlbCA9IDAKICAgICAgICBidXR0b24uVGV4dCA9IG5hbWUKICAgICAgICBidXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCiAgICAgICAgYnV0dG9uLlRleHRTaXplID0gMTQKICAgICAgICBidXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAogICAgICAgIGJ1dHRvbi5QYXJlbnQgPSBwYXJlbnQKICAgICAgICBsb2NhbCBidXR0b25VSUNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBidXR0b24pCiAgICAgICAgYnV0dG9uVUlDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgNSkKICAgICAgICBidXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChjYWxsYmFjaykKICAgICAgICByZXR1cm4gYnV0dG9uCiAgICBlbmQKICAgIAogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC0tID09IEJBR0lBTiBURUxFUE9SVCBEQU4gRlVOR1NJIFVUSUxJVEFTICAgICAgICAgICAgICAgICAgICAgICAgICA9PQogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIGxvY2FsIHNhdmVGZWF0dXJlU3RhdGVzIC0tIERla2xhcmFzaSBhd2FsIGFnYXIgYmlzYSBkaWFrc2VzCiAgICBsb2NhbCBzYXZlR3VpUG9zaXRpb25zIC0tIERla2xhcmFzaSBhd2FsCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIG5hdHVyYWxDb21wYXJlKGEsIGIpCiAgICAgICAgbG9jYWwgZnVuY3Rpb24gc3BsaXQocykKICAgICAgICAgICAgbG9jYWwgcGFydHMgPSB7fTsgZm9yIHRleHQsIG51bWJlciBpbiBzOmdtYXRjaCgiKFteJWRdKikoJWQqKSIpIGRvIGlmIHRleHQgfj0gIiIgdGhlbiB0YWJsZS5pbnNlcnQocGFydHMsIHRleHQ6bG93ZXIoKSkgZW5kOyBpZiBudW1iZXIgfj0gIiIgdGhlbiB0YWJsZS5pbnNlcnQocGFydHMsIHRvbnVtYmVyKG51bWJlcikpIGVuZCBlbmQ7IHJldHVybiBwYXJ0cwogICAgICAgIGVuZAogICAgICAgIGxvY2FsIHBhcnRzQSA9IHNwbGl0KGEuTmFtZSBvciAiIik7IGxvY2FsIHBhcnRzQiA9IHNwbGl0KGIuTmFtZSBvciAiIik7IGZvciBpID0gMSwgbWF0aC5taW4oI3BhcnRzQSwgI3BhcnRzQikgZG8gbG9jYWwgcGFydEEgPSBwYXJ0c0FbaV07IGxvY2FsIHBhcnRCID0gcGFydHNCW2ldOyBpZiB0eXBlKHBhcnRBKSB+PSB0eXBlKHBhcnRCKSB0aGVuIHJldHVybiB0eXBlKHBhcnRBKSA9PSAibnVtYmVyIiBlbmQ7IGlmIHBhcnRBIDwgcGFydEIgdGhlbiByZXR1cm4gdHJ1ZSBlbHNlaWYgcGFydEEgPiBwYXJ0QiB0aGVuIHJldHVybiBmYWxzZSBlbmQgZW5kOyByZXR1cm4gI3BhcnRzQSA8ICNwYXJ0c0IKICAgIGVuZAogICAgCiAgICBsb2NhbCB1cGRhdGVUZWxlcG9ydExpc3QgCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIHNob3dOb3RpZmljYXRpb24obWVzc2FnZSwgY29sb3IpCiAgICAgICAgbG9jYWwgbm90aWZGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBTY3JlZW5HdWkpOyBub3RpZkZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7IG5vdGlmRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTAwLCAwLCAtNjApOyBub3RpZkZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBjb2xvciBvciBDb2xvcjMuZnJvbVJHQigzMCwgMzAsIDMwKTsgbm90aWZGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwOyBsb2NhbCBjb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgbm90aWZGcmFtZSk7IGNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA4KQogICAgICAgIGxvY2FsIG5vdGlmTGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIG5vdGlmRnJhbWUpOyBub3RpZkxhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCk7IG5vdGlmTGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDE7IG5vdGlmTGFiZWwuVGV4dCA9IG1lc3NhZ2U7IG5vdGlmTGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOyBub3RpZkxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgICAgICBsb2NhbCB0d2VlbkluZm8gPSBUd2VlbkluZm8ubmV3KDAuNSwgRW51bS5FYXNpbmdTdHlsZS5RdWludCwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KTsgbG9jYWwgZ29hbFBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTEwMCwgMCwgMTApOyBUd2VlblNlcnZpY2U6Q3JlYXRlKG5vdGlmRnJhbWUsIHR3ZWVuSW5mbywge1Bvc2l0aW9uID0gZ29hbFBvc2l0aW9ufSk6UGxheSgpCiAgICAgICAgdGFzay5kZWxheSgzLCBmdW5jdGlvbigpIFR3ZWVuU2VydmljZTpDcmVhdGUobm90aWZGcmFtZSwgdHdlZW5JbmZvLCB7UG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTAwLCAwLCAtNjApfSk6UGxheSgpOyB0YXNrLndhaXQoMC41KTsgbm90aWZGcmFtZTpEZXN0cm95KCkgZW5kKQogICAgZW5kCiAgICAKICAgIHNhdmVHdWlQb3NpdGlvbnMgPSBmdW5jdGlvbigpCiAgICAgICAgaWYgbm90IHdyaXRlZmlsZSB0aGVuCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgCiAgICAgICAgbG9jYWwgcG9zaXRpb25zVG9TYXZlID0ge30KICAgIAogICAgICAgIGxvY2FsIGZ1bmN0aW9uIGdldFBvc2l0aW9uRGF0YShndWlPYmplY3QpCiAgICAgICAgICAgIGlmIGd1aU9iamVjdCBhbmQgZ3VpT2JqZWN0LlBhcmVudCB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIFhTY2FsZSA9IGd1aU9iamVjdC5Qb3NpdGlvbi5YLlNjYWxlLAogICAgICAgICAgICAgICAgICAgIFhPZmZzZXQgPSBndWlPYmplY3QuUG9zaXRpb24uWC5PZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgWVNjYWxlID0gZ3VpT2JqZWN0LlBvc2l0aW9uLlkuU2NhbGUsCiAgICAgICAgICAgICAgICAgICAgWU9mZnNldCA9IGd1aU9iamVjdC5Qb3NpdGlvbi5ZLk9mZnNldCwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHJldHVybiBuaWwKICAgICAgICBlbmQKICAgIAogICAgICAgIHBvc2l0aW9uc1RvU2F2ZS5NYWluRnJhbWUgPSBnZXRQb3NpdGlvbkRhdGEoTWFpbkZyYW1lKQogICAgICAgIHBvc2l0aW9uc1RvU2F2ZS5NaW5pVG9nZ2xlQ29udGFpbmVyID0gZ2V0UG9zaXRpb25EYXRhKE1pbmlUb2dnbGVDb250YWluZXIpCiAgICAgICAgaWYgRW1vdGVTY3JlZW5HdWkgdGhlbgogICAgICAgICAgICBwb3NpdGlvbnNUb1NhdmUuRW1vdGVGcmFtZSA9IGdldFBvc2l0aW9uRGF0YShFbW90ZVNjcmVlbkd1aTpGaW5kRmlyc3RDaGlsZCgiTWFpbkZyYW1lIikpCiAgICAgICAgZW5kCiAgICAgICAgaWYgQW5pbWF0aW9uU2NyZWVuR3VpIHRoZW4KICAgICAgICAgICAgcG9zaXRpb25zVG9TYXZlLkFuaW1hdGlvbmZyYW1lID0gZ2V0UG9zaXRpb25EYXRhKEFuaW1hdGlvblNjcmVlbkd1aTpGaW5kRmlyc3RDaGlsZCgiR2F6ZUJybyIpKQogICAgICAgIGVuZAogICAgICAgIGlmIHRvdWNoRmxpbmdHdWkgdGhlbgogICAgICAgICAgICAgcG9zaXRpb25zVG9TYXZlLkZsaW5nRnJhbWUgPSBnZXRQb3NpdGlvbkRhdGEodG91Y2hGbGluZ0d1aTpGaW5kRmlyc3RDaGlsZCgiRnJhbWUiKSkKICAgICAgICBlbmQKICAgIAogICAgICAgIGxvY2FsIHN1Y2Nlc3MsIHJlc3VsdCA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwganNvbkRhdGEgPSBIdHRwU2VydmljZTpKU09ORW5jb2RlKHBvc2l0aW9uc1RvU2F2ZSkKICAgICAgICAgICAgd3JpdGVmaWxlKEdVSV9QT1NJVElPTlNfU0FWRV9GSUxFLCBqc29uRGF0YSkKICAgICAgICBlbmQpCiAgICAKICAgICAgICBpZiBub3Qgc3VjY2VzcyB0aGVuCiAgICAgICAgICAgIHdhcm4oIkdhZ2FsIG1lbnlpbXBhbiBwb3Npc2kgR1VJOiIsIHJlc3VsdCkKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBsb2FkR3VpUG9zaXRpb25zKCkKICAgICAgICBpZiBub3QgcmVhZGZpbGUgb3Igbm90IGlzZmlsZSBvciBub3QgaXNmaWxlKEdVSV9QT1NJVElPTlNfU0FWRV9GSUxFKSB0aGVuCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgCiAgICAgICAgbG9jYWwgc3VjY2VzcywgcmVzdWx0ID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBmaWxlQ29udGVudCA9IHJlYWRmaWxlKEdVSV9QT1NJVElPTlNfU0FWRV9GSUxFKQogICAgICAgICAgICBsb2FkZWRHdWlQb3NpdGlvbnMgPSBIdHRwU2VydmljZTpKU09ORGVjb2RlKGZpbGVDb250ZW50KQogICAgCiAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIGFwcGx5UG9zaXRpb24oZ3VpT2JqZWN0LCBwb3NEYXRhKQogICAgICAgICAgICAgICAgaWYgZ3VpT2JqZWN0IGFuZCBndWlPYmplY3QuUGFyZW50IGFuZCBwb3NEYXRhIHRoZW4KICAgICAgICAgICAgICAgICAgICBndWlPYmplY3QuUG9zaXRpb24gPSBVRGltMi5uZXcocG9zRGF0YS5YU2NhbGUsIHBvc0RhdGEuWE9mZnNldCwgcG9zRGF0YS5ZU2NhbGUsIHBvc0RhdGEuWU9mZnNldCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgIAogICAgICAgICAgICBhcHBseVBvc2l0aW9uKE1haW5GcmFtZSwgbG9hZGVkR3VpUG9zaXRpb25zLk1haW5GcmFtZSkKICAgICAgICAgICAgYXBwbHlQb3NpdGlvbihNaW5pVG9nZ2xlQ29udGFpbmVyLCBsb2FkZWRHdWlQb3NpdGlvbnMuTWluaVRvZ2dsZUNvbnRhaW5lcikKICAgICAgICBlbmQpCiAgICAgICAgCiAgICAgICAgaWYgbm90IHN1Y2Nlc3MgdGhlbgogICAgICAgICAgICB3YXJuKCJHYWdhbCBtZW11YXQgcG9zaXNpIEdVSToiLCByZXN1bHQpCiAgICAgICAgICAgIGxvYWRlZEd1aVBvc2l0aW9ucyA9IG5pbAogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gc2F2ZVRlbGVwb3J0RGF0YSgpCiAgICAgICAgaWYgbm90IHdyaXRlZmlsZSB0aGVuIHNob3dOb3RpZmljYXRpb24oIkV4ZWN1dG9yIHRpZGFrIG1lbmR1a3VuZyBwZW55aW1wYW5hbiBmaWxlLiIsIENvbG9yMy5mcm9tUkdCKDIwMCwgNTAsIDUwKSk7IHJldHVybiBlbmQKICAgICAgICBsb2NhbCBkYXRhVG9TYXZlID0ge307IGZvciBfLCBsb2MgaW4gaXBhaXJzKHNhdmVkVGVsZXBvcnRMb2NhdGlvbnMpIGRvIHRhYmxlLmluc2VydChkYXRhVG9TYXZlLCB7TmFtZSA9IGxvYy5OYW1lLCBDRnJhbWVEYXRhID0ge2xvYy5DRnJhbWU6R2V0Q29tcG9uZW50cygpfX0pIGVuZAogICAgICAgIGxvY2FsIHN1Y2Nlc3MsIHJlc3VsdCA9IHBjYWxsKGZ1bmN0aW9uKCkgbG9jYWwganNvbkRhdGEgPSBIdHRwU2VydmljZTpKU09ORW5jb2RlKGRhdGFUb1NhdmUpOyB3cml0ZWZpbGUoVEVMRVBPUlRfU0FWRV9GSUxFLCBqc29uRGF0YSkgZW5kKQogICAgICAgIGlmIG5vdCBzdWNjZXNzIHRoZW4gd2FybigiR2FnYWwgbWVueWltcGFuIGRhdGEgdGVsZXBvcnQ6IiwgcmVzdWx0KSBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBsb2FkVGVsZXBvcnREYXRhKCkKICAgICAgICBpZiBub3QgcmVhZGZpbGUgb3Igbm90IGlzZmlsZSBvciBub3QgaXNmaWxlKFRFTEVQT1JUX1NBVkVfRklMRSkgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgbG9jYWwgc3VjY2VzcywgcmVzdWx0ID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBmaWxlQ29udGVudCA9IHJlYWRmaWxlKFRFTEVQT1JUX1NBVkVfRklMRSk7IGxvY2FsIGRlY29kZWREYXRhID0gSHR0cFNlcnZpY2U6SlNPTkRlY29kZShmaWxlQ29udGVudCk7IHNhdmVkVGVsZXBvcnRMb2NhdGlvbnMgPSB7fQogICAgICAgICAgICBmb3IgXywgZGF0YSBpbiBpcGFpcnMoZGVjb2RlZERhdGEpIGRvIHRhYmxlLmluc2VydChzYXZlZFRlbGVwb3J0TG9jYXRpb25zLCB7TmFtZSA9IGRhdGEuTmFtZSwgQ0ZyYW1lID0gQ0ZyYW1lLm5ldyh1bnBhY2soZGF0YS5DRnJhbWVEYXRhKSl9KSBlbmQKICAgICAgICAgICAgdGFibGUuc29ydChzYXZlZFRlbGVwb3J0TG9jYXRpb25zLCBuYXR1cmFsQ29tcGFyZSkKICAgICAgICAgICAgaWYgdXBkYXRlVGVsZXBvcnRMaXN0IHRoZW4gdXBkYXRlVGVsZXBvcnRMaXN0KCkgZW5kCiAgICAgICAgZW5kKQogICAgICAgIGlmIG5vdCBzdWNjZXNzIHRoZW4gd2FybigiR2FnYWwgbWVtdWF0IGRhdGEgdGVsZXBvcnQ6IiwgcmVzdWx0KSBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBsb2FkQW5pbWF0aW9ucygpCiAgICAgICAgaWYgaXNmaWxlIGFuZCBpc2ZpbGUoQU5JTUFUSU9OX1NBVkVfRklMRSkgYW5kIHJlYWRmaWxlIHRoZW4KICAgICAgICAgICAgbG9jYWwgc3VjY2VzcywgZGF0YSA9IHBjYWxsKGZ1bmN0aW9uKCkgcmV0dXJuIEh0dHBTZXJ2aWNlOkpTT05EZWNvZGUocmVhZGZpbGUoQU5JTUFUSU9OX1NBVkVfRklMRSkpIGVuZCkKICAgICAgICAgICAgaWYgc3VjY2VzcyBhbmQgdHlwZShkYXRhKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgICAgIGxhc3RBbmltYXRpb25zID0gZGF0YQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIHNhdmVGZWF0dXJlU3RhdGVzID0gZnVuY3Rpb24oKQogICAgICAgIGlmIG5vdCB3cml0ZWZpbGUgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgc3RhdGVzVG9TYXZlID0gewogICAgICAgICAgICBXYWxrU3BlZWQgPSBJc1dhbGtTcGVlZEVuYWJsZWQsCiAgICAgICAgICAgIEZseSA9IElzRmx5aW5nLAogICAgICAgICAgICBOb2NsaXAgPSBJc05vY2xpcEVuYWJsZWQsCiAgICAgICAgICAgIEluZmluaXR5SnVtcCA9IElzSW5maW5pdHlKdW1wRW5hYmxlZCwKICAgICAgICAgICAgR29kTW9kZSA9IElzR29kTW9kZUVuYWJsZWQsCiAgICAgICAgICAgIEFudGlGbGluZyA9IGFudGlmbGluZ19lbmFibGVkLAogICAgICAgICAgICBBbnRpTGFnID0gSXNBbnRpTGFnRW5hYmxlZCwKICAgICAgICAgICAgSW52aXNpYmxlID0gSXNJbnZpc2liaWxpdHlFbmFibGVkLAogICAgICAgICAgICBLaWxsQXVyYSA9IElzS2lsbEF1cmFFbmFibGVkLAogICAgICAgICAgICBBaW1ib3QgPSBJc0FpbWJvdEVuYWJsZWQsCiAgICAgICAgICAgIEJvb3N0RlBTID0gSXNCb29zdEZQU0VuYWJsZWQsCiAgICAgICAgICAgIFdhbGtTcGVlZFZhbHVlID0gU2V0dGluZ3MuV2Fsa1NwZWVkLAogICAgICAgICAgICBGbHlTcGVlZFZhbHVlID0gU2V0dGluZ3MuRmx5U3BlZWQsCiAgICAgICAgICAgIEtpbGxBdXJhUmFkaXVzVmFsdWUgPSBTZXR0aW5ncy5LaWxsQXVyYVJhZGl1cywKICAgICAgICAgICAgS2lsbEF1cmFEYW1hZ2VWYWx1ZSA9IFNldHRpbmdzLktpbGxBdXJhRGFtYWdlLAogICAgICAgICAgICBBaW1ib3RGT1ZWYWx1ZSA9IFNldHRpbmdzLkFpbWJvdEZPVgogICAgICAgIH0KICAgICAgICAKICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgIHdyaXRlZmlsZShGRUFUVVJFX1NUQVRFU19TQVZFX0ZJTEUsIEh0dHBTZXJ2aWNlOkpTT05FbmNvZGUoc3RhdGVzVG9TYXZlKSkKICAgICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gbG9hZEZlYXR1cmVTdGF0ZXMoKQogICAgICAgIGlmIG5vdCByZWFkZmlsZSBvciBub3QgaXNmaWxlIG9yIG5vdCBpc2ZpbGUoRkVBVFVSRV9TVEFURVNfU0FWRV9GSUxFKSB0aGVuIHJldHVybiBlbmQKICAgICAgICAKICAgICAgICBsb2NhbCBzdWNjZXNzLCByZXN1bHQgPSBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIGZpbGVDb250ZW50ID0gcmVhZGZpbGUoRkVBVFVSRV9TVEFURVNfU0FWRV9GSUxFKQogICAgICAgICAgICBsb2NhbCBkZWNvZGVkRGF0YSA9IEh0dHBTZXJ2aWNlOkpTT05EZWNvZGUoZmlsZUNvbnRlbnQpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiB0eXBlKGRlY29kZWREYXRhKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgICAgIElzV2Fsa1NwZWVkRW5hYmxlZCA9IGRlY29kZWREYXRhLldhbGtTcGVlZCBvciBmYWxzZQogICAgICAgICAgICAgICAgSXNGbHlpbmcgPSBkZWNvZGVkRGF0YS5GbHkgb3IgZmFsc2UKICAgICAgICAgICAgICAgIElzTm9jbGlwRW5hYmxlZCA9IGRlY29kZWREYXRhLk5vY2xpcCBvciBmYWxzZQogICAgICAgICAgICAgICAgSXNJbmZpbml0eUp1bXBFbmFibGVkID0gZGVjb2RlZERhdGEuSW5maW5pdHlKdW1wIG9yIGZhbHNlCiAgICAgICAgICAgICAgICBJc0dvZE1vZGVFbmFibGVkID0gZGVjb2RlZERhdGEuR29kTW9kZSBvciBmYWxzZQogICAgICAgICAgICAgICAgYW50aWZsaW5nX2VuYWJsZWQgPSBkZWNvZGVkRGF0YS5BbnRpRmxpbmcgb3IgZmFsc2UKICAgICAgICAgICAgICAgIElzQW50aUxhZ0VuYWJsZWQgPSBkZWNvZGVkRGF0YS5BbnRpTGFnIG9yIGZhbHNlCiAgICAgICAgICAgICAgICBJc0ludmlzaWJpbGl0eUVuYWJsZWQgPSBkZWNvZGVkRGF0YS5JbnZpc2libGUgb3IgZmFsc2UKICAgICAgICAgICAgICAgIElzS2lsbEF1cmFFbmFibGVkID0gZGVjb2RlZERhdGEuS2lsbEF1cmEgb3IgZmFsc2UKICAgICAgICAgICAgICAgIElzQWltYm90RW5hYmxlZCA9IGRlY29kZWREYXRhLkFpbWJvdCBvciBmYWxzZQogICAgICAgICAgICAgICAgSXNCb29zdEZQU0VuYWJsZWQgPSBkZWNvZGVkRGF0YS5Cb29zdEZQUyBvciBmYWxzZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBTZXR0aW5ncy5XYWxrU3BlZWQgPSBkZWNvZGVkRGF0YS5XYWxrU3BlZWRWYWx1ZSBvciAxNgogICAgICAgICAgICAgICAgU2V0dGluZ3MuRmx5U3BlZWQgPSBkZWNvZGVkRGF0YS5GbHlTcGVlZFZhbHVlIG9yIDEKICAgICAgICAgICAgICAgIFNldHRpbmdzLktpbGxBdXJhUmFkaXVzID0gZGVjb2RlZERhdGEuS2lsbEF1cmFSYWRpdXNWYWx1ZSBvciAyNQogICAgICAgICAgICAgICAgU2V0dGluZ3MuS2lsbEF1cmFEYW1hZ2UgPSBkZWNvZGVkRGF0YS5LaWxsQXVyYURhbWFnZVZhbHVlIG9yIDEwCiAgICAgICAgICAgICAgICBTZXR0aW5ncy5BaW1ib3RGT1YgPSBkZWNvZGVkRGF0YS5BaW1ib3RGT1ZWYWx1ZSBvciA5MAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICAgICAgaWYgbm90IHN1Y2Nlc3MgdGhlbgogICAgICAgICAgICB3YXJuKCJHYWdhbCBtZW11YXQgc3RhdHVzIGZpdHVyOiIsIHJlc3VsdCkKICAgICAgICBlbmQKICAgIGVuZAoKCiAgICBsb2NhbCBmdW5jdGlvbiBzaG93UmVuYW1lUHJvbXB0KGxvY2F0aW9uSW5kZXgsIGNhbGxiYWNrKQogICAgICAgIGxvY2FsIG9sZE5hbWUgPSBzYXZlZFRlbGVwb3J0TG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLk5hbWUKICAgICAgICBsb2NhbCBwcm9tcHRGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKTsgcHJvbXB0RnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDEwMCk7IHByb21wdEZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTEwMCwgMC41LCAtNTApOyBwcm9tcHRGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMzAsIDMwLCAzMCk7IHByb21wdEZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDA7IHByb21wdEZyYW1lLlpJbmRleCA9IDEwOyBwcm9tcHRGcmFtZS5QYXJlbnQgPSBNYWluRnJhbWUKICAgICAgICBsb2NhbCBjb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgcHJvbXB0RnJhbWUpOyBjb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCk7IGxvY2FsIHN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBwcm9tcHRGcmFtZSk7IHN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDAsIDE1MCwgMjU1KTsgc3Ryb2tlLlRoaWNrbmVzcyA9IDEKICAgICAgICBsb2NhbCB0aXRsZSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgcHJvbXB0RnJhbWUpOyB0aXRsZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDIwKTsgdGl0bGUuVGV4dCA9ICJHYW50aSBOYW1hIExva2FzaSI7IHRpdGxlLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsgdGl0bGUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDE7IHRpdGxlLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgICAgICBsb2NhbCB0ZXh0Qm94ID0gSW5zdGFuY2UubmV3KCJUZXh0Qm94IiwgcHJvbXB0RnJhbWUpOyB0ZXh0Qm94LlNpemUgPSBVRGltMi5uZXcoMSwgLTIwLCAwLCAzMCk7IHRleHRCb3guUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtOTAsIDAsIDMwKTsgdGV4dEJveC5UZXh0ID0gb2xkTmFtZTsgdGV4dEJveC5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNTAsIDUwLCA1MCk7IHRleHRCb3guVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOyB0ZXh0Qm94LkNsZWFyVGV4dE9uRm9jdXMgPSBmYWxzZTsgbG9jYWwgdGJDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgdGV4dEJveCk7IHRiQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDUpCiAgICAgICAgbG9jYWwgb2tCdXR0b24gPSBjcmVhdGVCdXR0b24ocHJvbXB0RnJhbWUsICJPSyIsIGZ1bmN0aW9uKCkgY2FsbGJhY2sodGV4dEJveC5UZXh0KTsgcHJvbXB0RnJhbWU6RGVzdHJveSgpIGVuZCk7IG9rQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMC41LCAtMTAsIDAsIDI1KTsgb2tCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMSwgLTMwKQogICAgICAgIGxvY2FsIGNhbmNlbEJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihwcm9tcHRGcmFtZSwgIkJhdGFsIiwgZnVuY3Rpb24oKSBwcm9tcHRGcmFtZTpEZXN0cm95KCkgZW5kKTsgY2FuY2VsQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMC41LCAtMTAsIDAsIDI1KTsgY2FuY2VsQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgNSwgMSwgLTMwKTsgY2FuY2VsQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxMDAsIDEwMCwgMTAwKQogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIHNob3dJbXBvcnRQcm9tcHQoY2FsbGJhY2spCiAgICAgICAgbG9jYWwgcHJvbXB0RnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIik7IHByb21wdEZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgMjIwLCAwLCAxNTApOyBwcm9tcHRGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIC0xMTAsIDAuNSwgLTc1KTsgcHJvbXB0RnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDMwLCAzMCwgMzApOyBwcm9tcHRGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwOyBwcm9tcHRGcmFtZS5aSW5kZXggPSAxMDsgcHJvbXB0RnJhbWUuUGFyZW50ID0gTWFpbkZyYW1lCiAgICAgICAgbG9jYWwgY29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIHByb21wdEZyYW1lKTsgY29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDgpOyBsb2NhbCBzdHJva2UgPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgcHJvbXB0RnJhbWUpOyBzdHJva2UuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigwLCAxNTAsIDI1NSk7IHN0cm9rZS5UaGlja25lc3MgPSAxCiAgICAgICAgbG9jYWwgdGl0bGUgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIHByb21wdEZyYW1lKTsgdGl0bGUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyMCk7IHRpdGxlLlRleHQgPSAiSW1wb3IgTG9rYXNpIjsgdGl0bGUuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOyB0aXRsZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMTsgdGl0bGUuRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAogICAgICAgIGxvY2FsIHRleHRCb3ggPSBJbnN0YW5jZS5uZXcoIlRleHRCb3giLCBwcm9tcHRGcmFtZSk7IHRleHRCb3guU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjAsIDEsIC02MCk7IHRleHRCb3guUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTAwLCAwLCAyNSk7IHRleHRCb3guUGxhY2Vob2xkZXJUZXh0ID0gIlRlbXBlbCBkYXRhIGRpIHNpbmkuLi4iOyB0ZXh0Qm94Lk11bHRpTGluZSA9IHRydWU7IHRleHRCb3guVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQ7IHRleHRCb3guVGV4dFlBbGlnbm1lbnQgPSBFbnVtLlRleHRZQWxpZ25tZW50LlRvcDsgdGV4dEJveC5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNTAsIDUwLCA1MCk7IHRleHRCb3guVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOyBsb2NhbCB0YkNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCB0ZXh0Qm94KTsgdGJDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgNSkKICAgICAgICBsb2NhbCBva0J1dHRvbiA9IGNyZWF0ZUJ1dHRvbihwcm9tcHRGcmFtZSwgIkltcG9yIiwgZnVuY3Rpb24oKSBjYWxsYmFjayh0ZXh0Qm94LlRleHQpOyBwcm9tcHRGcmFtZTpEZXN0cm95KCkgZW5kKTsgb2tCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLjUsIC0xMCwgMCwgMjUpOyBva0J1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAxLCAtMzApCiAgICAgICAgbG9jYWwgY2FuY2VsQnV0dG9uID0gY3JlYXRlQnV0dG9uKHByb21wdEZyYW1lLCAiQmF0YWwiLCBmdW5jdGlvbigpIHByb21wdEZyYW1lOkRlc3Ryb3koKSBlbmQpOyBjYW5jZWxCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLjUsIC0xMCwgMCwgMjUpOyBjYW5jZWxCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCA1LCAxLCAtMzApOyBjYW5jZWxCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDEwMCwgMTAwLCAxMDApCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gYWRkVGVsZXBvcnRMb2NhdGlvbihuYW1lLCBjZnJhbWUpCiAgICAgICAgZm9yIF8sIGxvYyBpbiBwYWlycyhzYXZlZFRlbGVwb3J0TG9jYXRpb25zKSBkbyBpZiBsb2MuTmFtZSA9PSBuYW1lIHRoZW4gcmV0dXJuIGVuZCBlbmQKICAgICAgICB0YWJsZS5pbnNlcnQoc2F2ZWRUZWxlcG9ydExvY2F0aW9ucywge05hbWUgPSBuYW1lLCBDRnJhbWUgPSBjZnJhbWV9KTsgdGFibGUuc29ydChzYXZlZFRlbGVwb3J0TG9jYXRpb25zLCBuYXR1cmFsQ29tcGFyZSk7IHNhdmVUZWxlcG9ydERhdGEoKTsgaWYgdXBkYXRlVGVsZXBvcnRMaXN0IHRoZW4gdXBkYXRlVGVsZXBvcnRMaXN0KCkgZW5kCiAgICBlbmQKICAgIAogICAgdXBkYXRlVGVsZXBvcnRMaXN0ID0gZnVuY3Rpb24oKQogICAgICAgIGZvciBfLCBjaGlsZCBpbiBwYWlycyhUZWxlcG9ydFRhYkNvbnRlbnQ6R2V0Q2hpbGRyZW4oKSkgZG8gaWYgY2hpbGQuTmFtZSA9PSAiVGVsZXBvcnRMb2NhdGlvbkZyYW1lIiB0aGVuIGNoaWxkOkRlc3Ryb3koKSBlbmQgZW5kCiAgICAgICAgZm9yIGksIGxvY0RhdGEgaW4gaXBhaXJzKHNhdmVkVGVsZXBvcnRMb2NhdGlvbnMpIGRvCiAgICAgICAgICAgIGxvY2FsIGxvY0ZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpOyBsb2NGcmFtZS5OYW1lID0gIlRlbGVwb3J0TG9jYXRpb25GcmFtZSI7IGxvY0ZyYW1lLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMjIpOyBsb2NGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMTsgbG9jRnJhbWUuUGFyZW50ID0gVGVsZXBvcnRUYWJDb250ZW50OyBsb2NGcmFtZS5MYXlvdXRPcmRlciA9IGkgKyA0OyBsb2NGcmFtZS5aSW5kZXggPSAyCiAgICAgICAgICAgIGxvY2FsIHRwQnV0dG9uID0gY3JlYXRlQnV0dG9uKGxvY0ZyYW1lLCBsb2NEYXRhLk5hbWUsIGZ1bmN0aW9uKCkgaWYgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuIExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IGxvY0RhdGEuQ0ZyYW1lICogQ0ZyYW1lLm5ldygwLCAzLCAwKSBlbmQgZW5kKTsgdHBCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAtNTAsIDEsIDApOyB0cEJ1dHRvbi5UZXh0U2l6ZSA9IDEwOyB0cEJ1dHRvbi5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsgbG9jYWwgcGFkID0gSW5zdGFuY2UubmV3KCJVSVBhZGRpbmciLCB0cEJ1dHRvbik7IHBhZC5QYWRkaW5nTGVmdCA9IFVEaW0ubmV3KDAsNSkKICAgICAgICAgICAgbG9jYWwgcmVuYW1lQnV0dG9uID0gY3JlYXRlQnV0dG9uKGxvY0ZyYW1lLCAiUiIsIGZ1bmN0aW9uKCkgc2hvd1JlbmFtZVByb21wdChpLCBmdW5jdGlvbihuZXdOYW1lKSBpZiBuZXdOYW1lIGFuZCBuZXdOYW1lIH49ICIiIGFuZCBuZXdOYW1lIH49IHNhdmVkVGVsZXBvcnRMb2NhdGlvbnNbaV0uTmFtZSB0aGVuIHNhdmVkVGVsZXBvcnRMb2NhdGlvbnNbaV0uTmFtZSA9IG5ld05hbWU7IHRhYmxlLnNvcnQoc2F2ZWRUZWxlcG9ydExvY2F0aW9ucywgbmF0dXJhbENvbXBhcmUpOyBzYXZlVGVsZXBvcnREYXRhKCk7IHVwZGF0ZVRlbGVwb3J0TGlzdCgpIGVuZCBlbmQpIGVuZCk7IHJlbmFtZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDIyLCAxLCAwKTsgcmVuYW1lQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC00NywgMCwgMCk7IHJlbmFtZUJ1dHRvbi5UZXh0U2l6ZSA9IDEwCiAgICAgICAgICAgIGxvY2FsIGRlbGV0ZUJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihsb2NGcmFtZSwgIlgiLCBmdW5jdGlvbigpIHRhYmxlLnJlbW92ZShzYXZlZFRlbGVwb3J0TG9jYXRpb25zLCBpKTsgc2F2ZVRlbGVwb3J0RGF0YSgpOyB1cGRhdGVUZWxlcG9ydExpc3QoKSBlbmQpOyBkZWxldGVCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAyMiwgMSwgMCk7IGRlbGV0ZUJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMjIsIDAsIDApOyBkZWxldGVCdXR0b24uVGV4dFNpemUgPSAxMDsgZGVsZXRlQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDUwLCA1MCkKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCB1cGRhdGVQbGF5ZXJMaXN0CiAgICBsb2NhbCBmdW5jdGlvbiBzd2l0Y2hUYWIodGFiTmFtZSkKICAgICAgICBQbGF5ZXJUYWJDb250ZW50LlZpc2libGUgPSAodGFiTmFtZSA9PSAiUGxheWVyIik7IEdlbmVyYWxUYWJDb250ZW50LlZpc2libGUgPSAodGFiTmFtZSA9PSAiVW11bSIpOyBDb21iYXRUYWJDb250ZW50LlZpc2libGUgPSAodGFiTmFtZSA9PSAiVGVtcHVyIik7IFRlbGVwb3J0VGFiQ29udGVudC5WaXNpYmxlID0gKHRhYk5hbWUgPT0gIlRlbGVwb3J0Iik7IFZpcFRhYkNvbnRlbnQuVmlzaWJsZSA9ICh0YWJOYW1lID09ICJWSVAiKTsgU2V0dGluZ3NUYWJDb250ZW50LlZpc2libGUgPSAodGFiTmFtZSA9PSAiUGVuZ2F0dXJhbiIpCiAgICAgICAgaWYgdGFiTmFtZSA9PSAiUGxheWVyIiBhbmQgdXBkYXRlUGxheWVyTGlzdCB0aGVuIHVwZGF0ZVBsYXllckxpc3QoKSBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBjcmVhdGVUYWJCdXR0b24obmFtZSwgcGFyZW50KQogICAgICAgIGxvY2FsIGJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpOyBidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSk7IGJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMzAsIDMwLCAzMCk7IGJ1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwOyBidXR0b24uVGV4dCA9IG5hbWU7IGJ1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7IGJ1dHRvbi5UZXh0U2l6ZSA9IDEyOyBidXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zU2VtaWJvbGQ7IGJ1dHRvbi5QYXJlbnQgPSBwYXJlbnQ7IGxvY2FsIGJ0bkNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBidXR0b24pOyBidG5Db3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgNSk7IGJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkgc3dpdGNoVGFiKG5hbWUpIGVuZCk7IHJldHVybiBidXR0b24KICAgIGVuZAogICAgCiAgICBsb2NhbCBQbGF5ZXJUYWJCdXR0b24gPSBjcmVhdGVUYWJCdXR0b24oIlBsYXllciIsIFRhYnNGcmFtZSkKICAgIGxvY2FsIEdlbmVyYWxUYWJCdXR0b24gPSBjcmVhdGVUYWJCdXR0b24oIlVtdW0iLCBUYWJzRnJhbWUpCiAgICBsb2NhbCBDb21iYXRUYWJCdXR0b24gPSBjcmVhdGVUYWJCdXR0b24oIlRlbXB1ciIsIFRhYnNGcmFtZSkKICAgIGxvY2FsIFRlbGVwb3J0VGFiQnV0dG9uID0gY3JlYXRlVGFiQnV0dG9uKCJUZWxlcG9ydCIsIFRhYnNGcmFtZSkKICAgIGxvY2FsIFZpcFRhYkJ1dHRvbiA9IGNyZWF0ZVRhYkJ1dHRvbigiVklQIiwgVGFic0ZyYW1lKQogICAgbG9jYWwgU2V0dGluZ3NUYWJCdXR0b24gPSBjcmVhdGVUYWJCdXR0b24oIlBlbmdhdHVyYW4iLCBUYWJzRnJhbWUpCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIENyZWF0ZUZPVkNpcmNsZSgpCiAgICAgICAgaWYgRk9WUGFydCB0aGVuIEZPVlBhcnQ6RGVzdHJveSgpIGVuZAogICAgICAgIEZPVlBhcnQgPSBJbnN0YW5jZS5uZXcoIlBhcnQiLCBXb3Jrc3BhY2UpOyBGT1ZQYXJ0Lk5hbWUgPSAiQWltYm90Rk9WIjsgRk9WUGFydC5BbmNob3JlZCA9IHRydWU7IEZPVlBhcnQuQ2FuQ29sbGlkZSA9IGZhbHNlOyBGT1ZQYXJ0LlRyYW5zcGFyZW5jeSA9IDE7IEZPVlBhcnQuU2l6ZSA9IFZlY3RvcjMubmV3KDAuMSwgMC4xLCAwLjEpCiAgICAgICAgbG9jYWwgYmlsbGJvYXJkID0gSW5zdGFuY2UubmV3KCJCaWxsYm9hcmRHdWkiLCBGT1ZQYXJ0KTsgYmlsbGJvYXJkLk5hbWUgPSAiRk9WR3VpIjsgYmlsbGJvYXJkLkFkb3JuZWUgPSBGT1ZQYXJ0OyBiaWxsYm9hcmQuU2l6ZSA9IFVEaW0yLm5ldyhTZXR0aW5ncy5BaW1ib3RGT1YgKiAyIC8gNTAsIDAsIFNldHRpbmdzLkFpbWJvdEZPViAqIDIgLyA1MCwgMCk7IGJpbGxib2FyZC5BbHdheXNPblRvcCA9IHRydWUKICAgICAgICBsb2NhbCBmcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBiaWxsYm9hcmQpOyBmcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApOyBmcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMTsgZnJhbWUuQm9yZGVyU2l6ZVBpeGVsID0gMAogICAgICAgIGxvY2FsIHVpU3Ryb2tlID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIGZyYW1lKTsgdWlTdHJva2UuVGhpY2tuZXNzID0gMjsgdWlTdHJva2UuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigwLCAyMDAsIDI1NSk7IHVpU3Ryb2tlLlRyYW5zcGFyZW5jeSA9IDAuMgogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFVwZGF0ZUZPVkNpcmNsZSgpCiAgICAgICAgaWYgRk9WUGFydCBhbmQgRk9WUGFydDpGaW5kRmlyc3RDaGlsZCgiRk9WR3VpIikgdGhlbiBGT1ZQYXJ0LkZPVkd1aS5TaXplID0gVURpbTIubmV3KFNldHRpbmdzLkFpbWJvdEZPViAqIDIgLyA1MCwgMCwgU2V0dGluZ3MuQWltYm90Rk9WICogMiAvIDUwLCAwKSBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIE1ha2VEcmFnZ2FibGUoZ3VpT2JqZWN0LCBkcmFnSGFuZGxlLCBpc0RyYWdnYWJsZUNoZWNrLCBjbGlja0NhbGxiYWNrKQogICAgICAgIGRyYWdIYW5kbGUuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBnYW1lUHJvY2Vzc2VkRXZlbnQpCiAgICAgICAgICAgIGlmIGdhbWVQcm9jZXNzZWRFdmVudCB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgaWYgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VCdXR0b24xIG9yIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLlRvdWNoIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIGlzRHJhZ2dpbmcgPSBmYWxzZQogICAgICAgICAgICAgICAgbG9jYWwgZHJhZ1N0YXJ0TW91c2VQb3MgPSBpbnB1dC5Qb3NpdGlvbgogICAgICAgICAgICAgICAgbG9jYWwgc3RhcnRPYmplY3RQb3MgPSBndWlPYmplY3QuUG9zaXRpb24KICAgICAgICAgICAgICAgIGxvY2FsIGlucHV0Q2hhbmdlZENvbm5lY3Rpb24KICAgICAgICAgICAgICAgIGxvY2FsIGlucHV0RW5kZWRDb25uZWN0aW9uCiAgICAgICAgICAgICAgICBsb2NhbCBEUkFHX1RIUkVTSE9MRCA9IDUKCiAgICAgICAgICAgICAgICBpbnB1dENoYW5nZWRDb25uZWN0aW9uID0gVXNlcklucHV0U2VydmljZS5JbnB1dENoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihjaGFuZ2VkSW5wdXQpCiAgICAgICAgICAgICAgICAgICAgaWYgY2hhbmdlZElucHV0LlVzZXJJbnB1dFR5cGUgPT0gaW5wdXQuVXNlcklucHV0VHlwZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGRlbHRhID0gY2hhbmdlZElucHV0LlBvc2l0aW9uIC0gZHJhZ1N0YXJ0TW91c2VQb3MKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IGlzRHJhZ2dpbmcgYW5kIGRlbHRhLk1hZ25pdHVkZSA+IERSQUdfVEhSRVNIT0xEIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlzRHJhZ2dhYmxlQ2hlY2sgYW5kIGlzRHJhZ2dhYmxlQ2hlY2soKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEcmFnZ2luZyA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaXNEcmFnZ2luZyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWlPYmplY3QuUG9zaXRpb24gPSBVRGltMi5uZXcoc3RhcnRPYmplY3RQb3MuWC5TY2FsZSwgc3RhcnRPYmplY3RQb3MuWC5PZmZzZXQgKyBkZWx0YS5YLCBzdGFydE9iamVjdFBvcy5ZLlNjYWxlLCBzdGFydE9iamVjdFBvcy5ZLk9mZnNldCArIGRlbHRhLlkpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kKQoKICAgICAgICAgICAgICAgIGlucHV0RW5kZWRDb25uZWN0aW9uID0gVXNlcklucHV0U2VydmljZS5JbnB1dEVuZGVkOkNvbm5lY3QoZnVuY3Rpb24oZW5kZWRJbnB1dCkKICAgICAgICAgICAgICAgICAgICAgaWYgZW5kZWRJbnB1dC5Vc2VySW5wdXRUeXBlID09IGlucHV0LlVzZXJJbnB1dFR5cGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBpbnB1dENoYW5nZWRDb25uZWN0aW9uIHRoZW4gaW5wdXRDaGFuZ2VkQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlucHV0RW5kZWRDb25uZWN0aW9uIHRoZW4gaW5wdXRFbmRlZENvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaXNEcmFnZ2luZyBhbmQgY2xpY2tDYWxsYmFjayB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlja0NhbGxiYWNrKCkKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC0tID09IEJBR0lBTiBGVU5HU0kgRU1PVEUgQVNMSSAoRElLRU1CQUxJS0FOKSAgICAgICAgICAgICAgICAgICAgICA9PQogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIGxvY2FsIGFwcGx5RW1vdGVUcmFuc3BhcmVuY3kKCiAgICBsb2NhbCBmdW5jdGlvbiBkZXN0cm95RW1vdGVHVUkoKQogICAgICAgIGlmIEVtb3RlU2NyZWVuR3VpIGFuZCBFbW90ZVNjcmVlbkd1aS5QYXJlbnQgdGhlbgogICAgICAgICAgICBFbW90ZVNjcmVlbkd1aTpEZXN0cm95KCkKICAgICAgICBlbmQKICAgICAgICBFbW90ZVNjcmVlbkd1aSA9IG5pbAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gaW5pdGlhbGl6ZUVtb3RlR1VJKCkKICAgICAgICBkZXN0cm95RW1vdGVHVUkoKQoKICAgICAgICBsb2NhbCBFbW90ZUxpc3QgPSB7fQogICAgICAgIGxvY2FsIGN1cnJlbnRUcmFjayA9IG5pbAogICAgICAgIGxvY2FsIGN1cnJlbnRBbmltSWQgPSBuaWwKCiAgICAgICAgbG9jYWwgVGVtcEVtb3RlR3VpID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQogICAgICAgIFRlbXBFbW90ZUd1aS5OYW1lID0gIkVtb3RlR3VpUmV2aXNlZCIKICAgICAgICBUZW1wRW1vdGVHdWkuUGFyZW50ID0gQ29yZUd1aQogICAgICAgIFRlbXBFbW90ZUd1aS5aSW5kZXhCZWhhdmlvciA9IEVudW0uWkluZGV4QmVoYXZpb3IuU2libGluZwogICAgICAgIEVtb3RlU2NyZWVuR3VpID0gVGVtcEVtb3RlR3VpCgogICAgICAgIGxvY2FsIEVtb3RlTWFpbkZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCiAgICAgICAgRW1vdGVNYWluRnJhbWUuTmFtZSA9ICJNYWluRnJhbWUiCiAgICAgICAgRW1vdGVNYWluRnJhbWUuQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSkKICAgICAgICBFbW90ZU1haW5GcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDE4MCwgMCwgMjAwKQogICAgICAgIEVtb3RlTWFpbkZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKQogICAgICAgIGlmIGxvYWRlZEd1aVBvc2l0aW9ucyBhbmQgbG9hZGVkR3VpUG9zaXRpb25zLkVtb3RlRnJhbWUgdGhlbgogICAgICAgICAgICBsb2NhbCBwb3NEYXRhID0gbG9hZGVkR3VpUG9zaXRpb25zLkVtb3RlRnJhbWUKICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKSBFbW90ZU1haW5GcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldyhwb3NEYXRhLlhTY2FsZSwgcG9zRGF0YS5YT2Zmc2V0LCBwb3NEYXRhLllTY2FsZSwgcG9zRGF0YS5ZT2Zmc2V0KSBlbmQpCiAgICAgICAgZW5kCiAgICAgICAgRW1vdGVNYWluRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI4LCA0MywgNzApCiAgICAgICAgRW1vdGVNYWluRnJhbWUuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoOTAsIDE1MCwgMjU1KQogICAgICAgIEVtb3RlTWFpbkZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDEKICAgICAgICBFbW90ZU1haW5GcmFtZS5DbGlwc0Rlc2NlbmRhbnRzID0gdHJ1ZQogICAgICAgIEVtb3RlTWFpbkZyYW1lLlBhcmVudCA9IFRlbXBFbW90ZUd1aQogICAgICAgIEVtb3RlTWFpbkZyYW1lLlZpc2libGUgPSBmYWxzZSAKCiAgICAgICAgbG9jYWwgVUlDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRW1vdGVNYWluRnJhbWUpCiAgICAgICAgVUlDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKCiAgICAgICAgbG9jYWwgSGVhZGVyID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikgCiAgICAgICAgSGVhZGVyLk5hbWUgPSAiSGVhZGVyIgogICAgICAgIEhlYWRlci5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDMwKQogICAgICAgIEhlYWRlci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNDgsIDYzLCA5MCkKICAgICAgICBIZWFkZXIuQm9yZGVyU2l6ZVBpeGVsID0gMAogICAgICAgIEhlYWRlci5UZXh0ID0gIiIgCiAgICAgICAgSGVhZGVyLkF1dG9CdXR0b25Db2xvciA9IGZhbHNlIAogICAgICAgIEhlYWRlci5QYXJlbnQgPSBFbW90ZU1haW5GcmFtZQoKICAgICAgICBsb2NhbCBUaXRsZSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKICAgICAgICBUaXRsZS5OYW1lID0gIlRpdGxlIgogICAgICAgIFRpdGxlLlNpemUgPSBVRGltMi5uZXcoMSwgLTQwLCAxLCAwKQogICAgICAgIFRpdGxlLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDEwLCAwLCAwKQogICAgICAgIFRpdGxlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgVGl0bGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICAgICAgVGl0bGUuVGV4dCA9ICJBcmV4YW5zIEVtb3RlcyBbVklQXSIKICAgICAgICBUaXRsZS5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKICAgICAgICBUaXRsZS5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdAogICAgICAgIFRpdGxlLlBhcmVudCA9IEhlYWRlcgoKICAgICAgICBsb2NhbCBDbG9zZUJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCiAgICAgICAgQ2xvc2VCdXR0b24uTmFtZSA9ICJDbG9zZUJ1dHRvbiIKICAgICAgICBDbG9zZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDIwLCAwLCAyMCkKICAgICAgICBDbG9zZUJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMTUsIDAuNSwgMCkKICAgICAgICBDbG9zZUJ1dHRvbi5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQogICAgICAgIENsb3NlQnV0dG9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgQ2xvc2VCdXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICAgICAgQ2xvc2VCdXR0b24uVGV4dCA9ICJYIgogICAgICAgIENsb3NlQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgIENsb3NlQnV0dG9uLlRleHRTaXplID0gMTgKICAgICAgICBDbG9zZUJ1dHRvbi5QYXJlbnQgPSBIZWFkZXIKICAgICAgICBDbG9zZUJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkgCiAgICAgICAgICAgIEVtb3RlTWFpbkZyYW1lLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICBFbW90ZVRvZ2dsZUJ1dHRvbi5WaXNpYmxlID0gdHJ1ZSAKICAgICAgICBlbmQpCiAgICAgICAgCiAgICAgICAgTWFrZURyYWdnYWJsZShFbW90ZU1haW5GcmFtZSwgSGVhZGVyLCBmdW5jdGlvbigpIHJldHVybiB0cnVlIGVuZCwgbmlsKQoKICAgICAgICBsb2NhbCBTZWFyY2hCb3ggPSBJbnN0YW5jZS5uZXcoIlRleHRCb3giKQogICAgICAgIFNlYXJjaEJveC5OYW1lID0gIlNlYXJjaEJveCIKICAgICAgICBTZWFyY2hCb3guU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjAsIDAsIDI1KQogICAgICAgIFNlYXJjaEJveC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAxMCwgMCwgMzUpCiAgICAgICAgU2VhcmNoQm94LkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0OCwgNjMsIDkwKQogICAgICAgIFNlYXJjaEJveC5QbGFjZWhvbGRlclRleHQgPSAiQ2FyaSBlbW90ZS4uLiIKICAgICAgICBTZWFyY2hCb3guUGxhY2Vob2xkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxODAsIDE5MCwgMjEwKQogICAgICAgIFNlYXJjaEJveC5Gb250ID0gRW51bS5Gb250LkdvdGhhbQogICAgICAgIFNlYXJjaEJveC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKICAgICAgICBTZWFyY2hCb3guQ2xlYXJUZXh0T25Gb2N1cyA9IGZhbHNlCiAgICAgICAgU2VhcmNoQm94LlBhcmVudCA9IEVtb3RlTWFpbkZyYW1lCiAgICAgICAgbG9jYWwgU2VhcmNoQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIFNlYXJjaEJveCk7IFNlYXJjaENvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA2KQogICAgICAgIGxvY2FsIFNlYXJjaFBhZGRpbmcgPSBJbnN0YW5jZS5uZXcoIlVJUGFkZGluZyIsIFNlYXJjaEJveCk7IFNlYXJjaFBhZGRpbmcuUGFkZGluZ0xlZnQgPSBVRGltLm5ldygwLCAxMCk7IFNlYXJjaFBhZGRpbmcuUGFkZGluZ1JpZ2h0ID0gVURpbS5uZXcoMCwgMTApCgogICAgICAgIGxvY2FsIEVtb3RlQXJlYSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiKQogICAgICAgIEVtb3RlQXJlYS5OYW1lID0gIkVtb3RlQXJlYSIKICAgICAgICBFbW90ZUFyZWEuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtNzApCiAgICAgICAgRW1vdGVBcmVhLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDY1KQogICAgICAgIEVtb3RlQXJlYS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgIEVtb3RlQXJlYS5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICAgICAgRW1vdGVBcmVhLlNjcm9sbEJhckltYWdlQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoOTAsIDE1MCwgMjU1KQogICAgICAgIEVtb3RlQXJlYS5TY3JvbGxCYXJUaGlja25lc3MgPSA1CiAgICAgICAgRW1vdGVBcmVhLlBhcmVudCA9IEVtb3RlTWFpbkZyYW1lCiAgICAgICAgbG9jYWwgVUlQYWRkaW5nID0gSW5zdGFuY2UubmV3KCJVSVBhZGRpbmciLCBFbW90ZUFyZWEpOyBVSVBhZGRpbmcuUGFkZGluZ0xlZnQgPSBVRGltLm5ldygwLCAxMCk7IFVJUGFkZGluZy5QYWRkaW5nUmlnaHQgPSBVRGltLm5ldygwLCAxMCk7IFVJUGFkZGluZy5QYWRkaW5nVG9wID0gVURpbS5uZXcoMCwgNSk7IFVJUGFkZGluZy5QYWRkaW5nQm90dG9tID0gVURpbS5uZXcoMCwgMTApCgogICAgICAgIGxvY2FsIFVJR3JpZExheW91dCA9IEluc3RhbmNlLm5ldygiVUlHcmlkTGF5b3V0IikKICAgICAgICBVSUdyaWRMYXlvdXQuQ2VsbFBhZGRpbmcgPSBVRGltMi5uZXcoMCwgNSwgMCwgNSkKICAgICAgICBVSUdyaWRMYXlvdXQuQ2VsbFNpemUgPSBVRGltMi5uZXcoMCwgMzYsIDAsIDUwKQogICAgICAgIFVJR3JpZExheW91dC5Tb3J0T3JkZXIgPSBFbnVtLlNvcnRPcmRlci5OYW1lCiAgICAgICAgVUlHcmlkTGF5b3V0Lkhvcml6b250YWxBbGlnbm1lbnQgPSBFbnVtLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyCiAgICAgICAgVUlHcmlkTGF5b3V0LlBhcmVudCA9IEVtb3RlQXJlYQoKICAgICAgICBsb2NhbCBmdW5jdGlvbiB1cGRhdGVDYW52YXNTaXplKCkKICAgICAgICAgICAgdGFzay53YWl0KCkKICAgICAgICAgICAgbG9jYWwgY29udGVudEhlaWdodCA9IFVJR3JpZExheW91dC5BYnNvbHV0ZUNvbnRlbnRTaXplLlkKICAgICAgICAgICAgRW1vdGVBcmVhLkNhbnZhc1NpemUgPSBVRGltMi5uZXcoMCwgMCwgMCwgY29udGVudEhlaWdodCkKICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgZnVuY3Rpb24gdG9nZ2xlQW5pbWF0aW9uKGFuaW1JZCkKICAgICAgICAgICAgbG9jYWwgY2hhciA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICBpZiBub3QgY2hhciBvciBub3QgY2hhcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgbG9jYWwgaHVtYW5vaWQgPSBjaGFyLkh1bWFub2lkCiAgICAgICAgICAgIGlmIGN1cnJlbnRUcmFjayBhbmQgY3VycmVudEFuaW1JZCA9PSBhbmltSWQgdGhlbgogICAgICAgICAgICAgICAgY3VycmVudFRyYWNrOlN0b3AoMC4yKTsgY3VycmVudFRyYWNrID0gbmlsOyBjdXJyZW50QW5pbUlkID0gbmlsOyByZXR1cm4KICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIGN1cnJlbnRUcmFjayB0aGVuIGN1cnJlbnRUcmFjazpTdG9wKDAuMikgZW5kCiAgICAgICAgICAgIGxvY2FsIGFuaW0gPSBJbnN0YW5jZS5uZXcoIkFuaW1hdGlvbiIpOyBhbmltLkFuaW1hdGlvbklkID0gYW5pbUlkCiAgICAgICAgICAgIGxvY2FsIGFuaW1hdG9yID0gaHVtYW5vaWQ6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJBbmltYXRvciIpIG9yIGh1bWFub2lkCiAgICAgICAgICAgIGlmIGFuaW1hdG9yIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHRyYWNrID0gYW5pbWF0b3I6TG9hZEFuaW1hdGlvbihhbmltKQogICAgICAgICAgICAgICAgdHJhY2s6UGxheSgwLjEpOyBjdXJyZW50VHJhY2sgPSB0cmFjazsgY3VycmVudEFuaW1JZCA9IGFuaW1JZAogICAgICAgICAgICAgICAgdHJhY2suU3RvcHBlZDpPbmNlKGZ1bmN0aW9uKCkgaWYgY3VycmVudFRyYWNrID09IHRyYWNrIHRoZW4gY3VycmVudFRyYWNrID0gbmlsOyBjdXJyZW50QW5pbUlkID0gbmlsIGVuZCBlbmQpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBhbmltOkRlc3Ryb3koKQogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBmdW5jdGlvbiBjcmVhdGVFbW90ZUJ1dHRvbihlbW90ZURhdGEpCiAgICAgICAgICAgIGxvY2FsIGJ1dHRvbiA9IEluc3RhbmNlLm5ldygiSW1hZ2VCdXR0b24iKTsgYnV0dG9uLk5hbWUgPSBlbW90ZURhdGEubmFtZTsgYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0OCwgNjMsIDkwKTsgYnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMzYsIDAsIDUwKTsgYnV0dG9uLlBhcmVudCA9IEVtb3RlQXJlYQogICAgICAgICAgICBsb2NhbCBjb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgYnV0dG9uKTsgY29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDYpCiAgICAgICAgICAgIGxvY2FsIGltYWdlID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgYnV0dG9uKTsgaW1hZ2UuU2l6ZSA9IFVEaW0yLm5ldygxLCAtNCwgMCwgMzIpOyBpbWFnZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIDAsIDAsIDMpOyBpbWFnZS5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMCk7IGltYWdlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxOyBpbWFnZS5JbWFnZSA9ICJyYnh0aHVtYjovL3R5cGU9QXNzZXQmaWQ9IiAuLiB0b3N0cmluZyhlbW90ZURhdGEuaWQpIC4uICImdz00MjAmaD00MjAiCiAgICAgICAgICAgIGxvY2FsIG5hbWVMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgYnV0dG9uKTsgbmFtZUxhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwgLTQsIDAsIDEyKTsgbmFtZUxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDIsIDAsIDM2KTsgbmFtZUxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxOyBuYW1lTGFiZWwuRm9udCA9IEVudW0uRm9udC5Hb3RoYW07IG5hbWVMYWJlbC5UZXh0ID0gZW1vdGVEYXRhLm5hbWU7IG5hbWVMYWJlbC5UZXh0U2NhbGVkID0gdHJ1ZTsgbmFtZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgICAgICBidXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpIHRvZ2dsZUFuaW1hdGlvbihlbW90ZURhdGEuYW5pbWF0aW9uaWQpIGVuZCkKICAgICAgICAgICAgcmV0dXJuIGJ1dHRvbgogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBmdW5jdGlvbiBwb3B1bGF0ZUVtb3RlcyhmaWx0ZXIpCiAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlciBhbmQgZmlsdGVyOmxvd2VyKCkgb3IgIiIKICAgICAgICAgICAgRW1vdGVBcmVhLkNhbnZhc1Bvc2l0aW9uID0gVmVjdG9yMi56ZXJvCiAgICAgICAgICAgIGZvciBfLCBidXR0b24gaW4gcGFpcnMoRW1vdGVBcmVhOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBidXR0b246SXNBKCJJbWFnZUJ1dHRvbiIpIHRoZW4gYnV0dG9uLlZpc2libGUgPSAoZmlsdGVyID09ICIiIG9yIGJ1dHRvbi5OYW1lOmxvd2VyKCk6ZmluZChmaWx0ZXIsIDEsIHRydWUpKSBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUoKQogICAgICAgIGVuZAoKICAgICAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgc3VjY2VzcywgcmVzdWx0ID0gcGNhbGwoZnVuY3Rpb24oKSByZXR1cm4gSHR0cFNlcnZpY2U6SlNPTkRlY29kZShnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9BUkVYQU5TL2Vtb3RlZmYvbWFpbi9lbW90ZS5qc29uIikpIGVuZCkKICAgICAgICAgICAgaWYgc3VjY2VzcyBhbmQgdHlwZShyZXN1bHQpID09ICJ0YWJsZSIgdGhlbgogICAgICAgICAgICAgICAgRW1vdGVMaXN0ID0gcmVzdWx0OyBsb2NhbCBleGlzdGluZ0Vtb3RlcyA9IHt9CiAgICAgICAgICAgICAgICBmb3IgXywgZW1vdGUgaW4gcGFpcnMoRW1vdGVMaXN0KSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGVtb3RlLm5hbWUgYW5kIGVtb3RlLmFuaW1hdGlvbmlkIGFuZCBlbW90ZS5pZCBhbmQgbm90IGV4aXN0aW5nRW1vdGVzW2Vtb3RlLm5hbWU6bG93ZXIoKV0gdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbW90ZUJ1dHRvbihlbW90ZSk7IGV4aXN0aW5nRW1vdGVzW2Vtb3RlLm5hbWU6bG93ZXIoKV0gPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgd2FybigiR2FnYWwgbWVuZ2FtYmlsIGRhZnRhciBlbW90ZToiLCByZXN1bHQpOyBjcmVhdGVFbW90ZUJ1dHRvbih7aWQgPSAxNDM1MzQyMzM0OCwgYW5pbWF0aW9uaWQgPSAicmJ4YXNzZXRpZDovLzE0MzUyMzQzMDY1IiwgbmFtZSA9ICJCb3VuY3kifSkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUoKQogICAgICAgICAgICBpZiBhcHBseUVtb3RlVHJhbnNwYXJlbmN5IHRoZW4gYXBwbHlFbW90ZVRyYW5zcGFyZW5jeShpc0Vtb3RlVHJhbnNwYXJlbnQpIGVuZAogICAgICAgIGVuZCkKCiAgICAgICAgU2VhcmNoQm94OkdldFByb3BlcnR5Q2hhbmdlZFNpZ25hbCgiVGV4dCIpOkNvbm5lY3QoZnVuY3Rpb24oKSBwb3B1bGF0ZUVtb3RlcyhTZWFyY2hCb3guVGV4dCkgZW5kKQogICAgICAgIAogICAgICAgIGlmIGFwcGx5RW1vdGVUcmFuc3BhcmVuY3kgdGhlbgogICAgICAgICAgICBhcHBseUVtb3RlVHJhbnNwYXJlbmN5KGlzRW1vdGVUcmFuc3BhcmVudCkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGFwcGx5RW1vdGVUcmFuc3BhcmVuY3kgPSBmdW5jdGlvbihpc1RyYW5zcGFyZW50KQogICAgICAgIGlmIG5vdCBFbW90ZVNjcmVlbkd1aSB0aGVuIHJldHVybiBlbmQKICAgICAgICBsb2NhbCBtYWluRnJhbWUgPSBFbW90ZVNjcmVlbkd1aTpGaW5kRmlyc3RDaGlsZCgiTWFpbkZyYW1lIiwgdHJ1ZSkKICAgICAgICBpZiBub3QgbWFpbkZyYW1lIHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICBsb2NhbCBoZWFkZXIgPSBtYWluRnJhbWU6RmluZEZpcnN0Q2hpbGQoIkhlYWRlciIpCiAgICAgICAgbG9jYWwgc2VhcmNoQm94ID0gbWFpbkZyYW1lOkZpbmRGaXJzdENoaWxkKCJTZWFyY2hCb3giKQogICAgICAgIAogICAgICAgIGxvY2FsIHRyYW5zVmFsdWUgPSAwLjg1CiAgICAgICAgbG9jYWwgb3BhcXVlVmFsdWUgPSAwCiAgICAgICAgCiAgICAgICAgbWFpbkZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSBpc1RyYW5zcGFyZW50IGFuZCB0cmFuc1ZhbHVlIG9yIG9wYXF1ZVZhbHVlCiAgICAgICAgRW1vdGVUb2dnbGVCdXR0b24uQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IGlzVHJhbnNwYXJlbnQgYW5kIHRyYW5zVmFsdWUgb3IgMAogICAgICAgIGlmIGhlYWRlciB0aGVuIGhlYWRlci5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gaXNUcmFuc3BhcmVudCBhbmQgdHJhbnNWYWx1ZSBvciBvcGFxdWVWYWx1ZSBlbmQKICAgICAgICBpZiBzZWFyY2hCb3ggdGhlbiBzZWFyY2hCb3guQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IGlzVHJhbnNwYXJlbnQgYW5kIHRyYW5zVmFsdWUgb3Igb3BhcXVlVmFsdWUgZW5kCgogICAgICAgIGxvY2FsIGVtb3RlQXJlYSA9IG1haW5GcmFtZTpGaW5kRmlyc3RDaGlsZCgiRW1vdGVBcmVhIikKICAgICAgICBpZiBlbW90ZUFyZWEgdGhlbgogICAgICAgICAgICBmb3IgXywgYnV0dG9uIGluIGlwYWlycyhlbW90ZUFyZWE6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgIGlmIGJ1dHRvbjpJc0EoIkltYWdlQnV0dG9uIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gaXNUcmFuc3BhcmVudCBhbmQgdHJhbnNWYWx1ZSBvciBvcGFxdWVWYWx1ZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICAKICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAtLSA9PSBCQUdJQU4gRlVOR1NJIEFOSU1BU0kgKElOVEVHUkFTSSBEQVJJIGFuaW1hdGlvbi5sdWEpICAgICAgICAgPT0KICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICBsb2NhbCBhcHBseUFuaW1hdGlvblRyYW5zcGFyZW5jeQoKICAgIGxvY2FsIGZ1bmN0aW9uIGRlc3Ryb3lBbmltYXRpb25HVUkoKQogICAgICAgIGlmIEFuaW1hdGlvblNjcmVlbkd1aSBhbmQgQW5pbWF0aW9uU2NyZWVuR3VpLlBhcmVudCB0aGVuCiAgICAgICAgICAgIEFuaW1hdGlvblNjcmVlbkd1aTpEZXN0cm95KCkKICAgICAgICBlbmQKICAgICAgICBBbmltYXRpb25TY3JlZW5HdWkgPSBuaWwKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGluaXRpYWxpemVBbmltYXRpb25HVUkoKQogICAgICAgIGRlc3Ryb3lBbmltYXRpb25HVUkoKQoKICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIEdhemVHb0d1aSA9IENvcmVHdWkgb3IgUGxheWVycy5Mb2NhbFBsYXllcjpXYWl0Rm9yQ2hpbGQoIlBsYXllckd1aSIpCgogICAgICAgICAgICBsb2NhbCBndWlOYW1lID0gIkdhemVWZXJpZmljYXRvciIKICAgICAgICAgICAgaWYgR2F6ZUdvR3VpOkZpbmRGaXJzdENoaWxkKGd1aU5hbWUpIHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICAgICAgQW5pbWF0aW9uU2NyZWVuR3VpID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQogICAgICAgICAgICBBbmltYXRpb25TY3JlZW5HdWkuTmFtZSA9IGd1aU5hbWUKICAgICAgICAgICAgQW5pbWF0aW9uU2NyZWVuR3VpLlBhcmVudCA9IEdhemVHb0d1aQoKICAgICAgICAgICAgbG9jYWwgY2FtZXJhID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gZ2V0U2NhbGVkU2l6ZShyZWxhdGl2ZVdpZHRoLCByZWxhdGl2ZUhlaWdodCkKICAgICAgICAgICAgICAgIGxvY2FsIHZpZXdwb3J0U2l6ZSA9IGNhbWVyYS5WaWV3cG9ydFNpemUKICAgICAgICAgICAgICAgIHJldHVybiBVRGltMi5uZXcoMCwgdmlld3BvcnRTaXplLlggKiByZWxhdGl2ZVdpZHRoLCAwLCB2aWV3cG9ydFNpemUuWSAqIHJlbGF0aXZlSGVpZ2h0KQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCiAgICAgICAgICAgIGZyYW1lLk5hbWUgPSAiR2F6ZUJybyIKICAgICAgICAgICAgZnJhbWUuU2l6ZSA9IGdldFNjYWxlZFNpemUoMC4xOCwgMC4yOCkgCiAgICAgICAgICAgIGZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLWZyYW1lLlNpemUuWC5PZmZzZXQgLyAyLCAwLjUsIC1mcmFtZS5TaXplLlkuT2Zmc2V0IC8gMikKICAgICAgICAgICAgaWYgbG9hZGVkR3VpUG9zaXRpb25zIGFuZCBsb2FkZWRHdWlQb3NpdGlvbnMuQW5pbWF0aW9uZnJhbWUgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgcG9zRGF0YSA9IGxvYWRlZEd1aVBvc2l0aW9ucy5BbmltYXRpb25mcmFtZQogICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKSBmcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldyhwb3NEYXRhLlhTY2FsZSwgcG9zRGF0YS5YT2Zmc2V0LCBwb3NEYXRhLllTY2FsZSwgcG9zRGF0YS5ZT2Zmc2V0KSBlbmQpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBmcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjUsIDI4LCA0MCkKICAgICAgICAgICAgZnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuMgogICAgICAgICAgICBmcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAyCiAgICAgICAgICAgIGZyYW1lLkJvcmRlckNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDEyMCwgMjU1KQogICAgICAgICAgICBmcmFtZS5WaXNpYmxlID0gZmFsc2UgCiAgICAgICAgICAgIGZyYW1lLlBhcmVudCA9IEFuaW1hdGlvblNjcmVlbkd1aQoKICAgICAgICAgICAgbG9jYWwgYW5pbUhlYWRlciA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIGZyYW1lKQogICAgICAgICAgICBhbmltSGVhZGVyLk5hbWUgPSAiQW5pbUhlYWRlciIKICAgICAgICAgICAgYW5pbUhlYWRlci5UZXh0ID0gIiIKICAgICAgICAgICAgYW5pbUhlYWRlci5TaXplID0gVURpbTIubmV3KDEsMCwwLjEsMCkKICAgICAgICAgICAgYW5pbUhlYWRlci5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLDAsMCwwKQogICAgICAgICAgICBhbmltSGVhZGVyLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNSwgMjgsIDQwKQogICAgICAgICAgICBhbmltSGVhZGVyLkJvcmRlclNpemVQaXhlbCA9IDAKICAgICAgICAgICAgYW5pbUhlYWRlci5BdXRvQnV0dG9uQ29sb3IgPSBmYWxzZQogICAgICAgICAgICBNYWtlRHJhZ2dhYmxlKGZyYW1lLCBhbmltSGVhZGVyLCBmdW5jdGlvbigpIHJldHVybiB0cnVlIGVuZCwgbmlsKQoKCiAgICAgICAgICAgIGxvY2FsIGxhYmVsU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKQogICAgICAgICAgICBsb2NhbCBnYXplTGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIGFuaW1IZWFkZXIpCiAgICAgICAgICAgIGdhemVMYWJlbC5OYW1lID0gIkdhemVMYWJlbCIKICAgICAgICAgICAgZ2F6ZUxhYmVsLlRleHQgPSAiQXJleGFucyBBbmltIFtWSVBdIgogICAgICAgICAgICBnYXplTGFiZWwuRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAogICAgICAgICAgICBnYXplTGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKICAgICAgICAgICAgZ2F6ZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgICAgICBnYXplTGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICAgICAgZ2F6ZUxhYmVsLlNpemUgPSBsYWJlbFNpemUKICAgICAgICAgICAgZ2F6ZUxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCgogICAgICAgICAgICBsb2NhbCBoaWRlQnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgYW5pbUhlYWRlcikKICAgICAgICAgICAgaGlkZUJ1dHRvbi5OYW1lID0gIkhpZGVCdXR0b24iCiAgICAgICAgICAgIGhpZGVCdXR0b24uVGV4dCA9ICLwn5iRIgogICAgICAgICAgICBoaWRlQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgICAgICAgICAgaGlkZUJ1dHRvbi5UZXh0U2NhbGVkID0gdHJ1ZQogICAgICAgICAgICBoaWRlQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgICAgICBoaWRlQnV0dG9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgICAgIGhpZGVCdXR0b24uQm9yZGVyU2l6ZVBpeGVsID0gMAogICAgICAgICAgICBoaWRlQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMC4xLCAwLCAxLCAwKQogICAgICAgICAgICBoaWRlQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuOSwgMCwgMCwgMCkKICAgICAgICAgICAgaGlkZUJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGZyYW1lLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICBlbmQpCgogICAgICAgICAgICBsb2NhbCBzZWFyY2hCYXIgPSBJbnN0YW5jZS5uZXcoIlRleHRCb3giLCBmcmFtZSkKICAgICAgICAgICAgc2VhcmNoQmFyLk5hbWUgPSAiU2VhcmNoQmFyIgogICAgICAgICAgICBzZWFyY2hCYXIuUGxhY2Vob2xkZXJUZXh0ID0gIlNlYXJjaC4uLiIKICAgICAgICAgICAgc2VhcmNoQmFyLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2FucwogICAgICAgICAgICBzZWFyY2hCYXIuVGV4dFNjYWxlZCA9IHRydWUKICAgICAgICAgICAgc2VhcmNoQmFyLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjAwKQogICAgICAgICAgICBzZWFyY2hCYXIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDQwLCA0NSwgNjApCiAgICAgICAgICAgIHNlYXJjaEJhci5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICAgICAgICAgIHNlYXJjaEJhci5TaXplID0gVURpbTIubmV3KDAuOSwgMCwgMC4xLCAwKQogICAgICAgICAgICBzZWFyY2hCYXIuUG9zaXRpb24gPSBVRGltMi5uZXcoMC4wNSwgMCwgMC4xMiwgMCkKICAgICAgICAgICAgc2VhcmNoQmFyLkNsZWFyVGV4dE9uRm9jdXMgPSB0cnVlCgogICAgICAgICAgICBsb2NhbCBzY3JvbGxGcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBmcmFtZSkKICAgICAgICAgICAgc2Nyb2xsRnJhbWUuTmFtZSA9ICJTY3JvbGxGcmFtZSIKICAgICAgICAgICAgc2Nyb2xsRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLjksIDAsIDAuNzUsIDApCiAgICAgICAgICAgIHNjcm9sbEZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuMDUsIDAsIDAuMjMsIDApCiAgICAgICAgICAgIHNjcm9sbEZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzNSwgNDAsIDU1KQogICAgICAgICAgICBzY3JvbGxGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICAgICAgICAgIHNjcm9sbEZyYW1lLlNjcm9sbEJhclRoaWNrbmVzcyA9IDYKICAgICAgICAgICAgc2Nyb2xsRnJhbWUuU2Nyb2xsaW5nRGlyZWN0aW9uID0gRW51bS5TY3JvbGxpbmdEaXJlY3Rpb24uWQogICAgICAgICAgICBzY3JvbGxGcmFtZS5DYW52YXNTaXplID0gVURpbTIubmV3KDAsIDAsIDAsIDApCiAgICAgICAgICAgIHNjcm9sbEZyYW1lLlNjcm9sbEJhckltYWdlQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMTIwLCAyNTUpCgogICAgICAgICAgICBsb2NhbCByZXNpemVIYW5kbGUgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBmcmFtZSkKICAgICAgICAgICAgcmVzaXplSGFuZGxlLk5hbWUgPSAiUmVzaXplSGFuZGxlIgogICAgICAgICAgICByZXNpemVIYW5kbGUuVGV4dCA9ICIiCiAgICAgICAgICAgIHJlc2l6ZUhhbmRsZS5TaXplID0gVURpbTIubmV3KDAsIDE1LCAwLCAxNSkKICAgICAgICAgICAgcmVzaXplSGFuZGxlLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC0xNSwgMSwgLTE1KQogICAgICAgICAgICByZXNpemVIYW5kbGUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDEyMCwgMjU1KQogICAgICAgICAgICByZXNpemVIYW5kbGUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNQogICAgICAgICAgICByZXNpemVIYW5kbGUuQm9yZGVyU2l6ZVBpeGVsID0gMAogICAgICAgICAgICByZXNpemVIYW5kbGUuWkluZGV4ID0gMgogICAgICAgICAgICAKICAgICAgICAgICAgdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBidXR0b25zID0ge30KICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIGNyZWF0ZVRoZUJ1dHRvbih0ZXh0LCBjYWxsYmFjaykKICAgICAgICAgICAgICAgICAgICBsb2NhbCBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBzY3JvbGxGcmFtZSkKICAgICAgICAgICAgICAgICAgICBidXR0b24uVGV4dCA9IHRleHQKICAgICAgICAgICAgICAgICAgICBidXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLlRleHRTY2FsZWQgPSBmYWxzZSAKICAgICAgICAgICAgICAgICAgICBidXR0b24uVGV4dFNpemUgPSAxMCAKICAgICAgICAgICAgICAgICAgICBidXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAxMjAsIDI1NSkKICAgICAgICAgICAgICAgICAgICBidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSkgCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIDAsIDAsICNidXR0b25zICogMzApIAogICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoY2FsbGJhY2spCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgdHdlZW5JbmZvID0gVHdlZW5JbmZvLm5ldygwLjEsIEVudW0uRWFzaW5nU3R5bGUuUXVhZCwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHRhcmdldFRyYW5zcGFyZW5jeSA9IGlzQW5pbWF0aW9uVHJhbnNwYXJlbnQgYW5kIDAuODUgb3IgMC4zCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZ29hbCA9IHtQb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAjYnV0dG9ucyAqIDMwKSwgQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IHRhcmdldFRyYW5zcGFyZW5jeX0gCiAgICAgICAgICAgICAgICAgICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZShidXR0b24sIHR3ZWVuSW5mbywgZ29hbCk6UGxheSgpCiAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGJ1dHRvbnMsIGJ1dHRvbikKICAgICAgICAgICAgICAgICAgICBzY3JvbGxGcmFtZS5DYW52YXNTaXplID0gVURpbTIubmV3KDAsIDAsIDAsICNidXR0b25zICogMzApCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICBzZWFyY2hCYXI6R2V0UHJvcGVydHlDaGFuZ2VkU2lnbmFsKCJUZXh0Iik6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgc2VhcmNoVGV4dCA9IHNlYXJjaEJhci5UZXh0Omxvd2VyKCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBvcmRlciA9IDAKICAgICAgICAgICAgICAgICAgICBmb3IgXywgYnV0dG9uIGluIGlwYWlycyhidXR0b25zKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBzZWFyY2hUZXh0ID09ICIiIG9yIGJ1dHRvbi5UZXh0Omxvd2VyKCk6ZmluZChzZWFyY2hUZXh0KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCBvcmRlciAqIDMwKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyID0gb3JkZXIgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsRnJhbWUuQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygwLCAwLCAwLCBvcmRlciAqIDMwKQogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBpc1Jlc2l6aW5nID0gZmFsc2UKICAgICAgICAgICAgICAgIGxvY2FsIGluaXRpYWxNb3VzZVBvc2l0aW9uLCBpbml0aWFsRnJhbWVTaXplCiAgICAgICAgICAgICAgICByZXNpemVIYW5kbGUuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KSBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgb3IgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuVG91Y2ggdGhlbiBpc1Jlc2l6aW5nID0gdHJ1ZTsgaW5pdGlhbE1vdXNlUG9zaXRpb24gPSBVc2VySW5wdXRTZXJ2aWNlOkdldE1vdXNlTG9jYXRpb24oKTsgaW5pdGlhbEZyYW1lU2l6ZSA9IGZyYW1lLkFic29sdXRlU2l6ZTsgZW5kIGVuZCkKICAgICAgICAgICAgICAgIFVzZXJJbnB1dFNlcnZpY2UuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpIGlmIGlzUmVzaXppbmcgYW5kIChpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZU1vdmVtZW50IG9yIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLlRvdWNoKSB0aGVuIGxvY2FsIGRlbHRhID0gVXNlcklucHV0U2VydmljZTpHZXRNb3VzZUxvY2F0aW9uKCkgLSBpbml0aWFsTW91c2VQb3NpdGlvbjsgbG9jYWwgbmV3U2l6ZVggPSBtYXRoLm1heCgxMDAsIGluaXRpYWxGcmFtZVNpemUuWCArIGRlbHRhLlgpOyBsb2NhbCBuZXdTaXplWSA9IG1hdGgubWF4KDEwMCwgaW5pdGlhbEZyYW1lU2l6ZS5ZICsgZGVsdGEuWSk7IGZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgbmV3U2l6ZVgsIDAsIG5ld1NpemVZKTsgZnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoZnJhbWUuUG9zaXRpb24uWC5TY2FsZSwgZnJhbWUuUG9zaXRpb24uWC5PZmZzZXQsIGZyYW1lLlBvc2l0aW9uLlkuU2NhbGUsIGZyYW1lLlBvc2l0aW9uLlkuT2Zmc2V0KSBlbmQgZW5kKQogICAgICAgICAgICAgICAgVXNlcklucHV0U2VydmljZS5JbnB1dEVuZGVkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpIGlmIGlzUmVzaXppbmcgYW5kIChpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgb3IgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuVG91Y2gpIHRoZW4gaXNSZXNpemluZyA9IGZhbHNlOyBlbmQgZW5kKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBzcGVha2VyID0gUGxheWVycy5Mb2NhbFBsYXllcgoKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFN0b3BBbmltKCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBjaGFyID0gc3BlYWtlci5DaGFyYWN0ZXI7IGlmIG5vdCBjaGFyIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAgICAgICAgIGxvY2FsIEh1bSA9IGNoYXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIG9yIGNoYXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJBbmltYXRpb25Db250cm9sbGVyIik7IGlmIG5vdCBIdW0gdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sIHYgaW4gbmV4dCwgSHVtOkdldFBsYXlpbmdBbmltYXRpb25UcmFja3MoKSBkbyB2OlN0b3AoKSBlbmQKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIHJlZnJlc2goKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGNoYXIgPSBzcGVha2VyLkNoYXJhY3RlcjsgaWYgbm90IGNoYXIgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgaHVtYW5vaWQgPSBjaGFyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKTsgaWYgaHVtYW5vaWQgdGhlbiBodW1hbm9pZDpDaGFuZ2VTdGF0ZShFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkdldHRpbmdVcCkgZW5kCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiByZWZyZXNoc3dpbSgpCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgY2hhciA9IHNwZWFrZXIuQ2hhcmFjdGVyOyBpZiBub3QgY2hhciB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgICAgICAgICBsb2NhbCBodW1hbm9pZCA9IGNoYXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpOyBpZiBodW1hbm9pZCB0aGVuIGh1bWFub2lkOkNoYW5nZVN0YXRlKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuR2V0dGluZ1VwKTsgdGFzay53YWl0KDAuMSk7IGh1bWFub2lkOkNoYW5nZVN0YXRlKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuU3dpbW1pbmcpIGVuZAogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gcmVmcmVzaGNsaW1iKCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBjaGFyID0gc3BlYWtlci5DaGFyYWN0ZXI7IGlmIG5vdCBjaGFyIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAgICAgICAgIGxvY2FsIGh1bWFub2lkID0gY2hhcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkIik7IGlmIGh1bWFub2lkIHRoZW4gaHVtYW5vaWQ6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5HZXR0aW5nVXApOyB0YXNrLndhaXQoMC4xKTsgaHVtYW5vaWQ6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5DbGltYmluZykgZW5kCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICBsb2NhbCBBbmltYXRpb25zID0gewogICAgICAgICAgICAgICAgICAgIElkbGU9e1siMjAxNiBBbmltYXRpb24gKG1tMikiXT17IjM4Nzk0NzE1OCIsIjM4Nzk0NzQ2NCJ9LFsiT2ggUmVhbGx5PyJdPXsiOTgwMDQ3NDg5ODI1MzIiLCI5ODAwNDc0ODk4MjUzMiJ9LEFzdHJvbmF1dD17Ijg5MTYyMTM2NiIsIjg5MTYzMzIzNyJ9LFsiQWRpZGFzIENvbW11bml0eSJdPXsiMTIyMjU3NDU4NDk4NDY0IiwiMTAyMzU3MTUxMDA1Nzc0In0sQm9sZD17IjE2NzM4MzMzODY4IiwiMTY3MzgzMzQ3MTAifSxTYW5zPXsiMTIzNjI3Njc3NjYzNDE4IiwiMTIzNjI3Njc3NjYzNDE4In0sU2FuczI9eyIxMTMyMDMwNzczNDc3NTAiLCIxMTMyMDMwNzczNDc3NTAifSxNYWdpY2lhbj17IjEzOTQzMzIxMzg1MjUwMyIsIjEzOTQzMzIxMzg1MjUwMyJ9LFsiSm9obiBEb2UiXT17IjcyNTI2MTI3NDk4ODAwIiwiNzI1MjYxMjc0OTg4MDAifSxOb2xpPXsiMTM5MzYwODU2ODA5NDgzIiwiMTM5MzYwODU2ODA5NDgzIn0sQ29vbGtpZD17Ijk1MjAzMTI1MjkyMDIzIiwiOTUyMDMxMjUyOTIwMjMifSxbIlN1cnZpdm9yIEluanVyZWQiXT17IjczOTA1MzY1NjUyMjk1IiwiNzM5MDUzNjU2NTIyOTUifSxbIjF4MXgxeDEiXT17Ijc2NzgwNTIyODIxMzA2IiwiNzY3ODA1MjI4MjEzMDYifSxCb3JvY2s9eyIzMjkzNjQxOTM4IiwiMzI5MzY0MjU1NCJ9LEthbmVraT17IjEzMzI3Nzg3NjM3OTIzMyIsIjEzMzI3Nzg3NjM3OTIzMyJ9LEJ1YmJseT17IjkxMDAwNDgzNiIsIjkxMDAwOTk1OCJ9LENhcnRvb255PXsiNzQyNjM3NTQ0IiwiNzQyNjM4NDQ1In0sQ29uZmlkZW50PXsiMTA2OTk3Nzk1MCIsIjEwNjk5ODc4NTgifSxbIkNhdHdhbGsgR2xhbSJdPXsiMTMzODA2MjE0OTkyMjkxIiwiOTQ5NzAwODgzNDE1NjMifSxDb3dib3k9eyIxMDE0MzkwNDE4IiwiMTAxNDM5ODYxNiJ9LFsiRHJvb2xpbmcgWm9tYmllIl09eyIzNDg5MTcxMTUyIiwiMzQ4OTE3MTE1MiJ9LEVsZGVyPXsiMTA5MjExMDE2NjQiLCIxMDkyMTEwMjU3NCJ9LEdob3N0PXsiNjE2MDA2Nzc4IiwiNjE2MDA4MDg3In0sS25pZ2h0PXsiNjU3NTk1NzU3IiwiNjU3NTY4MTM1In0sTGV2aXRhdGlvbj17IjYxNjAwNjc3OCIsIjYxNjAwODA4NyJ9LE1hZ2U9eyI3MDc3NDIxNDIiLCI3MDc4NTU5MDcifSxNclRvaWxldD17IjQ0MTc5Nzc5NTQiLCI0NDE3OTc4NjI0In0sTmluamE9eyI2NTYxMTc0MDAiLCI2NTYxMTgzNDEifSxORkw9eyI5MjA4MDg4OTg2MTQxMCIsIjc0NDUxMjMzMjI5MjU5In0sT2xkU2Nob29sPXsiMTA5MjEyMzA3NDQiLCIxMDkyMTIzMjA5MyJ9LFBhdHJvbD17IjExNDk2MTI4ODIiLCIxMTUwODQyMjIxIn0sUGlyYXRlPXsiNzUwNzgxODc0IiwiNzUwNzgyNzcwIn0sWyJEZWZhdWx0IFJldGFyZ2V0Il09eyI5NTg4NDYwNjY2NDgyMCIsIjk1ODg0NjA2NjY0ODIwIn0sWyJWZXJ5IExvbmciXT17IjE4MzA3NzgxNzQzIiwiMTgzMDc3ODE3NDMifSxTd2F5PXsiNTYwODMyMDMwIiwiNTYwODMzNTY0In0sUG9wc3Rhcj17IjEyMTI5MDA5ODUiLCIxMTUwODQyMjIxIn0sUHJpbmNlc3M9eyI5NDEwMDM2NDciLCI5NDEwMTMwOTgifSxSNj17IjEyNTIxMTU4NjM3IiwiMTI1MjExNjI1MjYifSxbIlIxNSBSZWFuaW1hdGVkIl09eyI0MjExMjE3NjQ2IiwiNDIxMTIxODQwOSJ9LFJlYWxpc3RpYz17IjE3MTcyOTE4ODU1IiwiMTcxNzMwMTQyNDEifSxSb2JvdD17IjYxNjA4ODIxMSIsIjYxNjA4OTU1OSJ9LFNuZWFreT17IjExMzI0NzM4NDIiLCIxMTMyNDc3NjcxIn0sWyJTcG9ydHMgKEFkaWRhcykiXT17IjE4NTM3Mzc2NDkyIiwiMTg1MzczNzEyNzIifSxTb2xkaWVyPXsiMzk3MjE1MTM2MiIsIjM5NzIxNTEzNjIifSxTdHlsaXNoPXsiNjE2MTM2NzkwIiwiNjE2MTM4NDQ3In0sWyJTdHlsaXplZCBGZW1hbGUiXT17IjQ3MDgxOTE1NjYiLCI0NzA4MTkyMTUwIn0sU3VwZXJoZXJvPXsiMTA5MjEyODg5MDkiLCIxMDkyMTI5MDE2NyJ9LFRveT17Ijc4Mjg0MTQ5OCIsIjc4Mjg0NTczNiJ9LFVkemFsPXsiMzMwMzE2MjI3NCIsIjMzMDMxNjI1NDkifSxWYW1waXJlPXsiMTA4MzQ0NTg1NSIsIjEwODM0NTAxNjYifSxXZXJld29sZj17IjEwODMxOTU1MTciLCIxMDgzMjE0NzE3In0sWyJXaWNrZWQgKFBvcHVsYXIpIl09eyIxMTg4MzIyMjI5ODIwNDkiLCI3NjA0OTQ5NDAzNzY0MSJ9LFsiTm8gQm91bmRhcmllcyAoV2FsbWFydCkiXT17IjE4NzQ3MDY3NDA1IiwiMTg3NDcwNjM5MTgifSxab21iaWU9eyI2MTYxNTg5MjkiLCI2MTYxNjA2MzYifX0sCiAgICAgICAgICAgICAgICAgICAgV2Fsaz17R29qbz0iOTU2NDMxNjMzNjUzODQiLEdldG89Ijg1ODExNDcxMzM2MDI4IixBc3Ryb25hdXQ9Ijg5MTY2NzEzOCIsWyJBZGlkYXMgQ29tbXVuaXR5Il09IjEyMjE1MDg1NTQ1NzAwNiIsQm9sZD0iMTY3MzgzNDA2NDYiLEJ1YmJseT0iOTEwMDM0ODcwIixTbW9vdGg9Ijc2NjMwMDUxMjcyNzkxIixDYXJ0b29ueT0iNzQyNjQwMDI2IixDb25maWRlbnQ9IjEwNzAwMTcyNjMiLENvd2JveT0iMTAxNDQyMTU0MSIsWyJDYXR3YWxrIEdsYW0iXT0iMTA5MTY4NzI0NDgyNzQ4IixbIkRyb29saW5nIFpvbWJpZSJdPSIzNDg5MTc0MjIzIixFbGRlcj0iMTA5MjExMTEzNzUiLEdob3N0PSI2MTYwMTMyMTYiLEtuaWdodD0iMTA5MjExMjcwOTUiLExldml0YXRpb249IjYxNjAxMzIxNiIsTWFnZT0iNzA3ODk3MzA5IixOaW5qYT0iNjU2MTIxNzY2IixORkw9IjExMDM1ODk1ODI5OTQxNSIsT2xkU2Nob29sPSIxMDkyMTI0NDg5MSIsUGF0cm9sPSIxMTUxMjMxNDkzIixQaXJhdGU9Ijc1MDc4NTY5MyIsWyJEZWZhdWx0IFJldGFyZ2V0Il09IjExNTgyNTY3NzYyNDc4OCIsUG9wc3Rhcj0iMTIxMjk4MDMzOCIsUHJpbmNlc3M9Ijk0MTAyODkwMiIsUjY9IjEyNTE4MTUyNjk2IixbIlIxNSBSZWFuaW1hdGVkIl09IjQyMTEyMjMyMzYiLFsiMjAxNiBBbmltYXRpb24gKG1tMikiXT0iMzg3OTQ3OTc1IixSb2JvdD0iNjE2MDk1MzMwIixTbmVha3k9IjExMzI1MTAxMzMiLFsiU3BvcnRzIChBZGlkYXMpIl09IjE4NTM3MzkyMTEzIixTdHlsaXNoPSI2MTYxNDYxNzciLFsiU3R5bGl6ZWQgRmVtYWxlIl09IjQ3MDgxOTM4NDAiLFN1cGVyaGVybz0iMTA5MjEyOTg2MTYiLFRveT0iNzgyODQzMzQ1IixVZHphbD0iMzMwMzE2Mjk2NyIsVmFtcGlyZT0iMTA4MzQ3MzkzMCIsV2VyZXdvbGY9IjEwODMxNzgzMzkiLFsiV2lja2VkIChQb3B1bGFyKSJdPSI5MjA3Mjg0OTkyNDY0MCIsWyJObyBCb3VuZGFyaWVzIChXYWxtYXJ0KSJdPSIxODc0NzA3NDIwMyIsWm9tYmllPSI2MTYxNjgwMzIifSwKICAgICAgICAgICAgICAgICAgICBSdW49e1siMjAxNiBBbmltYXRpb24gKG1tMikiXT0iMzg3OTQ3OTc1IixTb2NjZXI9IjExNjg4MTk1NjY3MDkxMCIsWyJBZGlkYXMgQ29tbXVuaXR5Il09IjgyNTk4MjM0ODQxMDM1IixBc3Ryb25hdXQ9IjEwOTIxMDM5MzA4IixOYXJ1dG89IjEwNDA3NDEyMDE2OTg3NCIsQm9sZD0iMTY3MzgzMzcyMjUiLEJ1YmJseT0iMTA5MjEwNTcyNDQiLENhcnRvb255PSIxMDkyMTA3NjEzNiIsRG9nPSIxMzAwNzI5NjMzNTk3MjEiLENvbmZpZGVudD0iMTA3MDAwMTUxNiIsTGFnZ2luZz0iNzEwOTU2ODg0Njk1NjciLENvd2JveT0iMTAxNDQwMTY4MyIsWyJDYXR3YWxrIEdsYW0iXT0iODEwMjQ0NzYxNTM3NTQiLFsiRHJvb2xpbmcgWm9tYmllIl09IjM0ODkxNzM0MTQiLEVsZGVyPSIxMDkyMTEwNDM3NCIsR2hvc3Q9IjYxNjAxMzIxNiIsWyJIZWF2eSBSdW4gKFVkemFsIC8gQm9yb2NrKSJdPSIzMjM2ODM2NjcwIixLbmlnaHQ9IjEwOTIxMTIxMTk3IixMZXZpdGF0aW9uPSI2MTYwMTAzODIiLE1hZ2U9IjEwOTIxMTQ4MjA5IixNclRvaWxldD0iNDQxNzk3OTY0NSIsTmluamE9IjY1NjExODg1MiIsTkZMPSIxMTczMzM1MzMwNDgwNzgiLE9sZFNjaG9vbD0iMTA5MjEyNDAyMTgiLFBhdHJvbD0iMTE1MDk2Nzk0OSIsUGlyYXRlPSI3NTA3ODM3MzgiLFsiRGVmYXVsdCBSZXRhcmdldCJdPSIxMDIyOTQyNjQyMzc0OTEiLFBvcHN0YXI9IjEyMTI5ODAzNDgiLFByaW5jZXNzPSI5NDEwMTUyODEiLFI2PSIxMjUxODE1MjY5NiIsWyJSMTUgUmVhbmltYXRlZCJdPSI0MjExMjIwMzgxIixSb2JvdD0iMTA5MjEyNTA0NjAiLFNuZWFreT0iMTEzMjQ5NDI3NCIsWyJTcG9ydHMgKEFkaWRhcykiXT0iMTg1MzczODQ5NDAiLFN0eWxpc2g9IjEwOTIxMjc2MTE2IixbIlN0eWxpemVkIEZlbWFsZSJdPSI0NzA4MTkyNzA1IixTdXBlcmhlcm89IjEwOTIxMjkxODMxIixUb3k9IjEwOTIxMzA2Mjg1IixWYW1waXJlPSIxMDkyMTMyMDI5OSIsV2VyZXdvbGY9IjEwOTIxMzM2OTk3IixbIldpY2tlZCAoUG9wdWxhcikiXT0iNzIzMDE1OTk0NDE2ODAiLFsiTm8gQm91bmRhcmllcyAoV2FsbWFydCkiXT0iMTg3NDcwNzA0ODQiLFpvbWJpZT0iNjE2MTYzNjgyIn0sCiAgICAgICAgICAgICAgICAgICAgSnVtcD17QXN0cm9uYXV0PSI4OTE2Mjc1MjIiLFsiQWRpZGFzIENvbW11bml0eSJdPSI2NTYxMTc4NzgiLEJvbGQ9IjE2NzM4MzM2NjUwIixCdWJibHk9IjkxMDAxNjg1NyIsQ2FydG9vbnk9Ijc0MjYzNzk0MiIsWyJDYXR3YWxrIEdsYW0iXT0iMTE2OTM2MzI2NTE2OTg1IixDb25maWRlbnQ9IjEwNjk5ODQ1MjQiLENvd2JveT0iMTAxNDM5NDcyNiIsRWxkZXI9IjEwOTIxMTA3MzY3IixHaG9zdD0iNjE2MDA4OTM2IixLbmlnaHQ9IjkxMDAxNjg1NyIsTGV2aXRhdGlvbj0iNjE2MDA4OTM2IixNYWdlPSIxMDkyMTE0OTc0MyIsTmluamE9IjY1NjExNzg3OCIsTkZMPSIxMTk4NDYxMTIxNTEzNTIiLE9sZFNjaG9vbD0iMTA5MjEyNDIwMTMiLFBhdHJvbD0iMTE0ODgxMTgzNyIsUGlyYXRlPSI3NTA3ODIyMzAiLFsiRGVmYXVsdCBSZXRhcmdldCJdPSIxMTcxNTAzNzc5NTA5ODciLFBvcHN0YXI9IjEyMTI5NTQ2NDIiLFByaW5jZXNzPSI5NDEwMDg4MzIiLFJvYm90PSI2MTYwOTA1MzUiLFsiUjE1IFJlYW5pbWF0ZWQiXT0iNDIxMTIxOTM5MCIsUjY9IjEyNTIwODgwNDg1IixTbmVha3k9IjExMzI0ODk4NTMiLFsiU3BvcnRzIChBZGlkYXMpIl09IjE4NTM3MzgwNzkxIixTdHlsaXNoPSI2MTYxMzk0NTEiLFsiU3R5bGl6ZWQgRmVtYWxlIl09IjQ3MDgxODgwMjUiLFN1cGVyaGVybz0iMTA5MjEyOTQ1NTkiLFRveT0iMTA5MjEzMDgxNTgiLFZhbXBpcmU9IjEwODM0NTUzNTIiLFdlcmV3b2xmPSIxMDgzMjE4NzkyIixbIldpY2tlZCAoUG9wdWxhcikiXT0iMTA0MzI1MjQ1Mjg1MTk4IixbIk5vIEJvdW5kYXJpZXMgKFdhbG1hcnQpIl09IjE4NzQ3MDY5MTQ4Iixab21iaWU9IjYxNjE2MTk5NyJ9LAogICAgICAgICAgICAgICAgICAgIEZhbGw9e0FzdHJvbmF1dD0iODkxNjE3OTYxIixbIkFkaWRhcyBDb21tdW5pdHkiXT0iOTg2MDAyMTU5Mjg5MDQiLEJvbGQ9IjE2NzM4MzMzMTcxIixCdWJibHk9IjkxMDAwMTkxMCIsQ2FydG9vbnk9Ijc0MjYzNzE1MSIsWyJDYXR3YWxrIEdsYW0iXT0iOTIyOTQ1MzczNDA4MDciLENvbmZpZGVudD0iMTA2OTk3MzY3NyIsQ293Ym95PSIxMDE0Mzg0NTcxIixFbGRlcj0iMTA5MjExMDU3NjUiLEtuaWdodD0iMTA5MjExMjI1NzkiLExldml0YXRpb249IjYxNjAwNTg2MyIsTWFnZT0iNzA3ODI5NzE2IixOaW5qYT0iNjU2MTE1NjA2IixORkw9IjEyOTc3MzI0MTMyMTAzMiIsT2xkU2Nob29sPSIxMDkyMTI0MTI0NCIsUGF0cm9sPSIxMTQ4ODYzMzgyIixQaXJhdGU9Ijc1MDc4MDI0MiIsWyJEZWZhdWx0IFJldGFyZ2V0Il09IjExMDIwNTYyMjUxODAyOSIsUG9wc3Rhcj0iMTIxMjkwMDk5NSIsUHJpbmNlc3M9Ijk0MTAwMDAwNyIsUm9ib3Q9IjYxNjA4NzA4OSIsWyJSMTUgUmVhbmltYXRlZCJdPSI0MjExMjE2MTUyIixSNj0iMTI1MjA5NzI1NzEiLFNuZWFreT0iMTEzMjQ2OTAwNCIsWyJTcG9ydHMgKEFkaWRhcykiXT0iMTg1MzczNjcyMzgiLFN0eWxpc2g9IjYxNjEzNDgxNSIsWyJTdHlsaXplZCBGZW1hbGUiXT0iNDcwODE4NjE2MiIsU3VwZXJoZXJvPSIxMDkyMTI5MzM3MyIsVG95PSI3ODI4NDY0MjMiLFZhbXBpcmU9IjEwODM0NDM1ODciLFdlcmV3b2xmPSIxMDgzMTg5MDE5IixbIldpY2tlZCAoUG9wdWxhcikiXT0iMTIxMTUyNDQyNzYyNDgxIixbIk5vIEJvdW5kYXJpZXMgKFdhbG1hcnQpIl09IjE4NzQ3MDYyNTM1Iixab21iaWU9IjYxNjE1NzQ3NiJ9LAogICAgICAgICAgICAgICAgICAgIFN3aW1JZGxlPXtBc3Ryb25hdXQ9Ijg5MTY2MzU5MiIsWyJBZGlkYXMgQ29tbXVuaXR5Il09IjEwOTM0NjUyMDMyNDE2MCIsQm9sZD0iMTY3MzgzMzk4MTciLEJ1YmJseT0iOTEwMDMwOTIxIixDYXJ0b29ueT0iMTA5MjEwNzkzODAiLFsiQ2F0d2FsayBHbGFtIl09Ijk4ODU0MTExMzYxMzYwIixDb25maWRlbnQ9IjEwNzAwMTIxMzMiLENvd0JveT0iMTAxNDQxMTgxNiIsRWxkZXI9IjEwOTIxMTEwMTQ2IixNYWdlPSI3MDc4OTQ2OTkiLE5pbmphPSI2NTYxMTgzNDEiLE5GTD0iNzkwOTAxMDk5MzkwOTMiLFBhdHJvbD0iMTE1MTIyMTg5OSIsS25pZ2h0PSIxMDkyMTEyNTkzNSIsT2xkU2Nob29sPSIxMDkyMTI0NDAxOCIsTGV2aXRhdGlvbj0iMTA5MjExMzk0NzgiLFBvcHN0YXI9IjEyMTI5OTg1NzgiLFByaW5jZXNzPSI5NDEwMjUzOTgiLFBpcmF0ZT0iNzUwNzg1MTc2IixSNj0iMTI1MTgxNTI2OTYiLFJvYm90PSIxMDkyMTI1Mzc2NyIsU25lYWt5PSIxMTMyNTA2NDA3IixbIlNwb3J0cyAoQWRpZGFzKSJdPSIxODUzNzM4NzE4MCIsU3R5bGlzaD0iMTA5MjEyODE5NjQiLFN0eWxpemVkPSI0NzA4MTkwNjA3IixTdXBlckhlcm89IjEwOTIxMjk3MzkxIixUb3k9IjEwOTIxMzEwMzQxIixWYW1waXJlPSIxMDkyMTMyNTQ0MyIsV2VyZXdvbGY9IjEwOTIxMzQxMzE5IixbIldpY2tlZCAoUG9wdWxhcikiXT0iMTEzMTk5NDE1MTE4MTk5IixbIk5vIEJvdW5kYXJpZXMgKFdhbG1hcnQpIl09IjE4NzQ3MDcxNjgyIn0sCiAgICAgICAgICAgICAgICAgICAgU3dpbT17QXN0cm9uYXV0PSI4OTE2NjM1OTIiLFsiQWRpZGFzIENvbW11bml0eSJdPSIxMzMzMDg0ODMyNjYyMDgiLEJ1YmJseT0iOTEwMDI4MTU4IixCb2xkPSIxNjczODMzOTE1OCIsQ2FydG9vbnk9IjEwOTIxMDc5MzgwIixbIkNhdHdhbGsgR2xhbSJdPSIxMzQ1OTE3NDMxODE2MjgiLENvd0JveT0iMTAxNDQwNjUyMyIsQ29uZmlkZW50PSIxMDcwMDA5OTE0IixFbGRlcj0iMTA5MjExMDg5NzEiLEtuaWdodD0iMTA5MjExMjUxNjAiLE1hZ2U9IjcwNzg3NjQ0MyIsTkZMPSIxMzI2OTczOTQxODk5MjEiLE9sZFNjaG9vbD0iMTA5MjEyNDMwNDgiLFBvcFN0YXI9IjEyMTI5OTg1NzgiLFByaW5jZXNzPSI5NDEwMTg4OTMiLFBpcmF0ZT0iNzUwNzg0NTc5IixQYXRyb2w9IjExNTEyMDQ5OTgiLFI2PSIxMjUxODE1MjY5NiIsUm9ib3Q9IjEwOTIxMjUzMTQyIixMZXZpdGF0aW9uPSIxMDkyMTEzODIwOSIsU3R5bGlzaD0iMTA5MjEyODEwMDAiLFN1cGVySGVybz0iMTA5MjEyOTU0OTUiLFNuZWFreT0iMTEzMjUwMDUyMCIsWyJTcG9ydHMgKEFkaWRhcykiXT0iMTg1MzczODk1MzEiLFRveT0iMTA5MjEzMDkzMTkiLFZhbXBpcmU9IjEwOTIxMzI0NDA4IixXZXJld29sZj0iMTA5MjEzNDA0MTkiLFsiV2lja2VkIChQb3B1bGFyKSJdPSI5OTM4NDI0NTQyNTE1NyIsWyJObyBCb3VuZGFyaWVzIChXYWxtYXJ0KSJdPSIxODc0NzA3MzE4MSIsWm9tYmllPSI2MTYxNjUxMDkifSwKICAgICAgICAgICAgICAgICAgICBDbGltYj17QXN0cm9uYXV0PSIxMDkyMTAzMjEyNCIsWyJBZGlkYXMgQ29tbXVuaXR5Il09Ijg4NzYzMTM2NjkzMDIzIixCb2xkPSIxNjczODMzMjE2OSIsQ2FydG9vbnk9Ijc0MjYzNjg4OSIsWyJDYXR3YWxrIEdsYW0iXT0iMTE5Mzc3MjIwOTY3NTU0IixDb25maWRlbnQ9IjEwNjk5NDYyNTciLENvd0JveT0iMTAxNDM4MDYwNiIsRWxkZXI9Ijg0NTM5MjAzOCIsR2hvc3Q9IjYxNjAwMzcxMyIsS25pZ2h0PSIxMDkyMTEyNTE2MCIsTGV2aXRhdGlvbj0iMTA5MjExMzIwOTIiLE1hZ2U9IjcwNzgyNjA1NiIsTmluamE9IjY1NjExNDM1OSIsTkZMPSIxMzQ2MzAwMTM3NDIwMTkiLE9sZFNjaG9vbD0iMTA5MjEyMjk4NjYiLFBhdHJvbD0iMTE0ODgxMTgzNyIsUG9wc3Rhcj0iMTIxMzA0NDk1MyIsUHJpbmNlc3M9Ijk0MDk5NjA2MiIsUjY9IjEyNTIwOTgyMTUwIixbIlJlYW5pbWF0ZWQgUjE1Il09IjQyMTEyMTQ5OTIiLFJvYm90PSI2MTYwODYwMzkiLFNuZWFreT0iMTEzMjQ2MTM3MiIsWyJTcG9ydHMgKEFkaWRhcykiXT0iMTg1MzczNjMzOTEiLFN0eWxpc2g9IjEwOTIxMjcxMzkxIixbIlN0eWxpemVkIEZlbWFsZSJdPSI0NzA4MTg0MjUzIixTdXBlckhlcm89IjEwOTIxMjg2OTExIixUb3k9IjEwOTIxMzAwODM5IixWYW1waXJlPSIxMDgzNDM5MjM4IixXZXJlV29sZj0iMTA5MjEzMjkzMjIiLFsiV2lja2VkIChQb3B1bGFyKSJdPSIxMzEzMjY4MzA1MDk3ODQiLFsiTm8gQm91bmRhcmllcyAoV2FsbWFydCkiXT0iMTg3NDcwNjA5MDMiLFpvbWJpZT0iNjE2MTU2MTE5In19CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIGxvYWRBbmltYXRpb24oYW5pbWF0aW9uSWQpIGxvY2FsIGNoYXIgPSBzcGVha2VyLkNoYXJhY3RlciBvciBzcGVha2VyLkNoYXJhY3RlckFkZGVkOldhaXQoKTsgbG9jYWwgYW5pbSA9IEluc3RhbmNlLm5ldygiQW5pbWF0aW9uIik7IGFuaW0uQW5pbWF0aW9uSWQgPSAicmJ4YXNzZXRpZDovLyIuLnRvc3RyaW5nKGFuaW1hdGlvbklkKTsgcmV0dXJuIGNoYXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpOkxvYWRBbmltYXRpb24oYW5pbSkgZW5kCiAgICAgICAgICAgICAgICBmb3IgXywgc2V0cyBpbiBwYWlycyhBbmltYXRpb25zKSBkbyBmb3IgXywgaWRzIGluIHBhaXJzKHNldHMpIGRvIGlmIHR5cGUoaWRzKT09InRhYmxlIiB0aGVuIGZvciBfLCBpZCBpbiBpcGFpcnMoaWRzKSBkbyB0YXNrLnNwYXduKGxvYWRBbmltYXRpb24sIGlkKSBlbmQgZWxzZSB0YXNrLnNwYXduKGxvYWRBbmltYXRpb24sIGlkcykgZW5kIGVuZCBlbmQKCiAgICAgICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBCdXkoZ2FtZVBhc3NJRCkKICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpIGdhbWU6R2V0U2VydmljZSgiTWFya2V0cGxhY2VTZXJ2aWNlIik6UHJvbXB0R2FtZVBhc3NQdXJjaGFzZShzcGVha2VyLCBnYW1lUGFzc0lEKSBlbmQpCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBSZXNldElkbGUoKSBwY2FsbChmdW5jdGlvbigpIFN0b3BBbmltKCk7IGxvY2FsIGFuaW0gPSBzcGVha2VyLkNoYXJhY3Rlci5BbmltYXRlOyBhbmltLmlkbGUuQW5pbWF0aW9uMS5BbmltYXRpb25JZCwgYW5pbS5pZGxlLkFuaW1hdGlvbjIuQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0wIiwgImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9MCIgZW5kKSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFJlc2V0V2FsaygpIHBjYWxsKGZ1bmN0aW9uKCkgU3RvcEFuaW0oKTsgc3BlYWtlci5DaGFyYWN0ZXIuQW5pbWF0ZS53YWxrLldhbGtBbmltLkFuaW1hdGlvbklkID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9MCIgZW5kKSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFJlc2V0UnVuKCkgcGNhbGwoZnVuY3Rpb24oKSBTdG9wQW5pbSgpOyB0YXNrLndhaXQoMC4xKTsgc3BlYWtlci5DaGFyYWN0ZXIuQW5pbWF0ZS5ydW4uUnVuQW5pbS5BbmltYXRpb25JZCA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTAiIGVuZCkgZW5kCiAgICAgICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBSZXNldEp1bXAoKSBwY2FsbChmdW5jdGlvbigpIFN0b3BBbmltKCk7IHRhc2sud2FpdCgwLjEpOyBzcGVha2VyLkNoYXJhY3Rlci5BbmltYXRlLmp1bXAuSnVtcEFuaW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0wIiBlbmQpIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gUmVzZXRGYWxsKCkgcGNhbGwoZnVuY3Rpb24oKSBTdG9wQW5pbSgpOyBzcGVha2VyLkNoYXJhY3Rlci5BbmltYXRlLmZhbGwuRmFsbEFuaW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0wIiBlbmQpIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gUmVzZXRTd2ltKCkgcGNhbGwoZnVuY3Rpb24oKSBTdG9wQW5pbSgpOyBsb2NhbCBhbmltID0gc3BlYWtlci5DaGFyYWN0ZXIuQW5pbWF0ZTsgaWYgYW5pbS5zd2ltIHRoZW4gYW5pbS5zd2ltLlN3aW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0wIiBlbmQgZW5kKSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFJlc2V0U3dpbUlkbGUoKSBwY2FsbChmdW5jdGlvbigpIFN0b3BBbmltKCk7IGxvY2FsIGFuaW0gPSBzcGVha2VyLkNoYXJhY3Rlci5BbmltYXRlOyBpZiBhbmltLnN3aW1pZGxlIHRoZW4gYW5pbS5zd2ltaWRsZS5Td2ltSWRsZS5BbmltYXRpb25JZCA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTAiIGVuZCBlbmQpIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gUmVzZXRDbGltYigpIHBjYWxsKGZ1bmN0aW9uKCkgU3RvcEFuaW0oKTsgc3BlYWtlci5DaGFyYWN0ZXIuQW5pbWF0ZS5jbGltYi5DbGltYkFuaW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0wIiBlbmQpIGVuZAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBzZXRBbmltYXRpb24oYW5pbWF0aW9uVHlwZSwgYW5pbWF0aW9uSWQpCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gc2F2ZUxhc3RBbmltYXRpb25zKCkgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdyaXRlZmlsZSB0aGVuIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBkYXRhID0gSHR0cFNlcnZpY2U6SlNPTkVuY29kZShsYXN0QW5pbWF0aW9ucykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZWZpbGUoQU5JTUFUSU9OX1NBVkVfRklMRSwgZGF0YSkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQpIAogICAgICAgICAgICAgICAgICAgICAgICBlbmQgCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgY2hhciA9IHNwZWFrZXIuQ2hhcmFjdGVyOyBpZiBub3QgY2hhciB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgICAgICAgICBsb2NhbCBBbmltID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiQW5pbWF0ZSIpOyBpZiBub3QgQW5pbSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgICAgICAgICBsb2NhbCBodW1hbm9pZCA9IGNoYXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpOyBodW1hbm9pZC5QbGF0Zm9ybVN0YW5kID0gdHJ1ZTsgdGFzay53YWl0KDAuMSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiBhbmltYXRpb25UeXBlID09ICJJZGxlIiB0aGVuIGxhc3RBbmltYXRpb25zLklkbGUgPSBhbmltYXRpb25JZDsgUmVzZXRJZGxlKCk7IEFuaW0uaWRsZS5BbmltYXRpb24xLkFuaW1hdGlvbklkLCBBbmltLmlkbGUuQW5pbWF0aW9uMi5BbmltYXRpb25JZCA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPSIuLmFuaW1hdGlvbklkWzFdLCAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0iLi5hbmltYXRpb25JZFsyXTsgcmVmcmVzaCgpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIGFuaW1hdGlvblR5cGUgPT0gIldhbGsiIHRoZW4gbGFzdEFuaW1hdGlvbnMuV2FsayA9IGFuaW1hdGlvbklkOyBSZXNldFdhbGsoKTsgQW5pbS53YWxrLldhbGtBbmltLkFuaW1hdGlvbklkID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9Ii4uYW5pbWF0aW9uSWQ7IHJlZnJlc2goKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBhbmltYXRpb25UeXBlID09ICJSdW4iIHRoZW4gbGFzdEFuaW1hdGlvbnMuUnVuID0gYW5pbWF0aW9uSWQ7IFJlc2V0UnVuKCk7IEFuaW0ucnVuLlJ1bkFuaW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0iLi5hbmltYXRpb25JZDsgcmVmcmVzaCgpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIGFuaW1hdGlvblR5cGUgPT0gIkp1bXAiIHRoZW4gbGFzdEFuaW1hdGlvbnMuSnVtcCA9IGFuaW1hdGlvbklkOyBSZXNldEp1bXAoKTsgQW5pbS5qdW1wLkp1bXBBbmltLkFuaW1hdGlvbklkID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9Ii4uYW5pbWF0aW9uSWQ7IHJlZnJlc2goKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBhbmltYXRpb25UeXBlID09ICJGYWxsIiB0aGVuIGxhc3RBbmltYXRpb25zLkZhbGwgPSBhbmltYXRpb25JZDsgUmVzZXRGYWxsKCk7IEFuaW0uZmFsbC5GYWxsQW5pbS5BbmltYXRpb25JZCA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPSIuLmFuaW1hdGlvbklkOyByZWZyZXNoKCkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgYW5pbWF0aW9uVHlwZSA9PSAiU3dpbSIgYW5kIEFuaW0uc3dpbSB0aGVuIGxhc3RBbmltYXRpb25zLlN3aW0gPSBhbmltYXRpb25JZDsgUmVzZXRTd2ltKCk7IEFuaW0uc3dpbS5Td2ltLkFuaW1hdGlvbklkID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9Ii4uYW5pbWF0aW9uSWQ7IHJlZnJlc2hzd2ltKCkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgYW5pbWF0aW9uVHlwZSA9PSAiU3dpbUlkbGUiIGFuZCBBbmltLnN3aW1pZGxlIHRoZW4gbGFzdEFuaW1hdGlvbnMuU3dpbUlkbGUgPSBhbmltYXRpb25JZDsgUmVzZXRTd2ltSWRsZSgpOyBBbmltLnN3aW1pZGxlLlN3aW1JZGxlLkFuaW1hdGlvbklkID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9Ii4uYW5pbWF0aW9uSWQ7IHJlZnJlc2hzd2ltKCkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgYW5pbWF0aW9uVHlwZSA9PSAiQ2xpbWIiIHRoZW4gbGFzdEFuaW1hdGlvbnMuQ2xpbWIgPSBhbmltYXRpb25JZDsgUmVzZXRDbGltYigpOyBBbmltLmNsaW1iLkNsaW1iQW5pbS5BbmltYXRpb25JZCA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPSIuLmFuaW1hdGlvbklkOyByZWZyZXNoY2xpbWIoKSBlbmQKICAgICAgICAgICAgICAgICAgICBzYXZlTGFzdEFuaW1hdGlvbnMoKTsgdGFzay53YWl0KDAuMSk7IGh1bWFub2lkLlBsYXRmb3JtU3RhbmQgPSBmYWxzZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFBsYXlFbW90ZShhbmltYXRpb25JZCkgU3RvcEFuaW0oKTsgbG9jYWwgdHJhY2sgPSBsb2FkQW5pbWF0aW9uKGFuaW1hdGlvbklkKTsgdHJhY2s6UGxheSgpOyBsb2NhbCBjb25uOyBjb25uID0gUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKSBpZiBzcGVha2VyLkNoYXJhY3RlcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkIikuTW92ZURpcmVjdGlvbi5NYWduaXR1ZGUgPiAwIHRoZW4gdHJhY2s6U3RvcCgpOyBjb25uOkRpc2Nvbm5lY3QoKSBlbmQgZW5kKSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFplcm9QbGF5RW1vdGUoYW5pbWF0aW9uSWQpIFN0b3BBbmltKCk7IGxvY2FsIHRyYWNrID0gbG9hZEFuaW1hdGlvbihhbmltYXRpb25JZCk7IHRyYWNrOlBsYXkoKTsgdHJhY2s6QWRqdXN0U3BlZWQoMCk7IGxvY2FsIGNvbm47IGNvbm4gPSBSdW5TZXJ2aWNlLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpIGlmIHNwZWFrZXIuQ2hhcmFjdGVyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKS5Nb3ZlRGlyZWN0aW9uLk1hZ25pdHVkZSA+IDAgdGhlbiB0cmFjazpTdG9wKCk7IGNvbm46RGlzY29ubmVjdCgpIGVuZCBlbmQpIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gRlBsYXlFbW90ZShhbmltYXRpb25JZCkgU3RvcEFuaW0oKTsgbG9jYWwgdHJhY2sgPSBsb2FkQW5pbWF0aW9uKGFuaW1hdGlvbklkKTsgdHJhY2s6UGxheSgpOyB0YXNrLmRlbGF5KHRyYWNrLkxlbmd0aCAqIDAuOSwgZnVuY3Rpb24oKSB0cmFjazpBZGp1c3RTcGVlZCgwKSBlbmQpOyBsb2NhbCBjb25uOyBjb25uID0gUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKSBpZiBzcGVha2VyLkNoYXJhY3RlcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkIikuTW92ZURpcmVjdGlvbi5NYWduaXR1ZGUgPiAwIHRoZW4gdHJhY2s6U3RvcCgpOyBjb25uOkRpc2Nvbm5lY3QoKSBlbmQgZW5kKSBlbmQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gQWRkRW1vdGUobmFtZSwgaWQpIGNyZWF0ZVRoZUJ1dHRvbihuYW1lLi4iIC0gRW1vdGUiLCBmdW5jdGlvbigpIFBsYXlFbW90ZShpZCkgZW5kKSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIFplcm9BZGRFbW90ZShuYW1lLCBpZCkgY3JlYXRlVGhlQnV0dG9uKG5hbWUuLiIgLSBFbW90ZSIsIGZ1bmN0aW9uKCkgWmVyb1BsYXlFbW90ZShpZCkgZW5kKSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIEFkZEZFbW90ZShuYW1lLCBpZCkgY3JlYXRlVGhlQnV0dG9uKG5hbWUuLiIgLSBFbW90ZSIsIGZ1bmN0aW9uKCkgRlBsYXlFbW90ZShpZCkgZW5kKSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIEFkZERvbmF0ZShQcmljZSwgSWQpIGNyZWF0ZVRoZUJ1dHRvbigiRG9uYXRlICIuLlByaWNlLi4iIFJvYnV4IiwgZnVuY3Rpb24oKSBCdXkoSWQpIGVuZCkgZW5kCiAgICAgICAgICAgICAgICBsb2NhbCBmdW5jdGlvbiBjcmVhdGVBbmltYXRpb25CdXR0b24odGV4dCwgYW5pbVR5cGUsIGFuaW1JZCkgY3JlYXRlVGhlQnV0dG9uKHRleHQuLiIgLSAiLi5hbmltVHlwZSwgZnVuY3Rpb24oKSBzZXRBbmltYXRpb24oYW5pbVR5cGUsIGFuaW1JZCkgZW5kKSBlbmQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gcmVzZXRUb0FkaWRhc1Nwb3J0KCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBhbmltcyA9IEFuaW1hdGlvbnMKICAgICAgICAgICAgICAgICAgICBpZiBhbmltcy5XYWxrWyJTcG9ydHMgKEFkaWRhcykiXSB0aGVuIHNldEFuaW1hdGlvbigiV2FsayIsIGFuaW1zLldhbGtbIlNwb3J0cyAoQWRpZGFzKSJdKSBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBhbmltcy5SdW5bIlNwb3J0cyAoQWRpZGFzKSJdIHRoZW4gc2V0QW5pbWF0aW9uKCJSdW4iLCBhbmltcy5SdW5bIlNwb3J0cyAoQWRpZGFzKSJdKSBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBhbmltcy5KdW1wWyJTcG9ydHMgKEFkaWRhcykiXSB0aGVuIHNldEFuaW1hdGlvbigiSnVtcCIsIGFuaW1zLkp1bXBbIlNwb3J0cyAoQWRpZGFzKSJdKSBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBhbmltcy5GYWxsWyJTcG9ydHMgKEFkaWRhcykiXSB0aGVuIHNldEFuaW1hdGlvbigiRmFsbCIsIGFuaW1zLkZhbGxbIlNwb3J0cyAoQWRpZGFzKSJdKSBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBhbmltcy5Td2ltWyJTcG9ydHMgKEFkaWRhcykiXSB0aGVuIHNldEFuaW1hdGlvbigiU3dpbSIsIGFuaW1zLlN3aW1bIlNwb3J0cyAoQWRpZGFzKSJdKSBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBhbmltcy5Td2ltSWRsZVsiU3BvcnRzIChBZGlkYXMpIl0gdGhlbiBzZXRBbmltYXRpb24oIlN3aW1JZGxlIiwgYW5pbXMuU3dpbUlkbGVbIlNwb3J0cyAoQWRpZGFzKSJdKSBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBhbmltcy5DbGltYlsiU3BvcnRzIChBZGlkYXMpIl0gdGhlbiBzZXRBbmltYXRpb24oIkNsaW1iIiwgYW5pbXMuQ2xpbWJbIlNwb3J0cyAoQWRpZGFzKSJdKSBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgY3JlYXRlVGhlQnV0dG9uKCJSZXNldCB0byBBZGlkYXMgU3BvcnQiLCByZXNldFRvQWRpZGFzU3BvcnQpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGZvciBuYW1lLCBpZHMgaW4gcGFpcnMoQW5pbWF0aW9ucy5JZGxlKSBkbyB0YXNrLndhaXQoKTsgY3JlYXRlQW5pbWF0aW9uQnV0dG9uKG5hbWUsICJJZGxlIiwgaWRzKSBlbmQKICAgICAgICAgICAgICAgIGZvciBuYW1lLCBpZCBpbiBwYWlycyhBbmltYXRpb25zLldhbGspIGRvIHRhc2sud2FpdCgpOyBjcmVhdGVBbmltYXRpb25CdXR0b24obmFtZSwgIldhbGsiLCBpZCkgZW5kCiAgICAgICAgICAgICAgICBmb3IgbmFtZSwgaWQgaW4gcGFpcnMoQW5pbWF0aW9ucy5SdW4pIGRvIHRhc2sud2FpdCgpOyBjcmVhdGVBbmltYXRpb25CdXR0b24obmFtZSwgIlJ1biIsIGlkKSBlbmQKICAgICAgICAgICAgICAgIGZvciBuYW1lLCBpZCBpbiBwYWlycyhBbmltYXRpb25zLkp1bXApIGRvIHRhc2sud2FpdCgpOyBjcmVhdGVBbmltYXRpb25CdXR0b24obmFtZSwgIkp1bXAiLCBpZCkgZW5kCiAgICAgICAgICAgICAgICBmb3IgbmFtZSwgaWQgaW4gcGFpcnMoQW5pbWF0aW9ucy5GYWxsKSBkbyB0YXNrLndhaXQoKTsgY3JlYXRlQW5pbWF0aW9uQnV0dG9uKG5hbWUsICJGYWxsIiwgaWQpIGVuZAogICAgICAgICAgICAgICAgZm9yIG5hbWUsIGlkIGluIHBhaXJzKEFuaW1hdGlvbnMuU3dpbUlkbGUpIGRvIHRhc2sud2FpdCgpOyBjcmVhdGVBbmltYXRpb25CdXR0b24obmFtZSwgIlN3aW1JZGxlIiwgaWQpIGVuZAogICAgICAgICAgICAgICAgZm9yIG5hbWUsIGlkIGluIHBhaXJzKEFuaW1hdGlvbnMuU3dpbSkgZG8gdGFzay53YWl0KCk7IGNyZWF0ZUFuaW1hdGlvbkJ1dHRvbihuYW1lLCAiU3dpbSIsIGlkKSBlbmQKICAgICAgICAgICAgICAgIGZvciBuYW1lLCBpZCBpbiBwYWlycyhBbmltYXRpb25zLkNsaW1iKSBkbyB0YXNrLndhaXQoKTsgY3JlYXRlQW5pbWF0aW9uQnV0dG9uKG5hbWUsICJDbGltYiIsIGlkKSBlbmQKCiAgICAgICAgICAgICAgICBBZGREb25hdGUoMjAsIDExMzEzNzE1MzApOyBBZGREb25hdGUoMjAwLCAxMTMxMDY1NzAyKTsgQWRkRG9uYXRlKDE4MywgMTEyOTkxNTMxOCk7IEFkZERvbmF0ZSgyMDAwLCAxMTI4Mjk5NzQ5KQogICAgICAgICAgICAgICAgQWRkRW1vdGUoIkRhbmNlIDEiLCAxMjUyMTAwOTY2Nik7IEFkZEVtb3RlKCJEYW5jZSAyIiwgMTI1MjExNjk4MDApOyBBZGRFbW90ZSgiRGFuY2UgMyIsIDEyNTIxMTc4MzYyKTsgQWRkRW1vdGUoIkNoZWVyIiwgMTI1MjEwMjE5OTEpOyBBZGRFbW90ZSgiTGF1Z2giLCAxMjUyMTAxODcyNCk7IEFkZEVtb3RlKCJQb2ludCIsIDEyNTIxMDA3Njk0KTsgQWRkRW1vdGUoIldhdmUiLCAxMjUyMTAwNDU4NikKICAgICAgICAgICAgICAgIEFkZEZFbW90ZSgiU29sZGllciAtIEFzc2F1bHQgRmlyZSIsIDQ3MTM4MTE3NjMpOyBBZGRFbW90ZSgiU29sZGllciAtIEFzc2F1bHQgQWltIiwgNDcxMzYzMzUxMik7IEFkZEVtb3RlKCJab21iaWUgLSBBdHRhY2siLCAzNDg5MTY5NjA3KTsgQWRkRkVtb3RlKCJab21iaWUgLSBEZWF0aCIsIDM3MTY0Njg3NzQpOyBBZGRFbW90ZSgiUm9ibG94IC0gU2xlZXAiLCAyNjk1OTE4MzMyKTsgQWRkRW1vdGUoIlJvYmxveCAtIFF1YWtlIiwgMjkxNzIwNDUwOSk7IEFkZEVtb3RlKCJSb2Jsb3ggLSBSaWZsZSBSZWxvYWQiLCAzOTcyMTMxMTA1KQogICAgICAgICAgICAgICAgWmVyb0FkZEVtb3RlKCJBY2N1cmF0ZSBUIFBvc2UiLCAyNTE2OTMwODY3KQogICAgICAgICAgICBlbmQpCgogICAgICAgICAgICBpZiBhcHBseUFuaW1hdGlvblRyYW5zcGFyZW5jeSB0aGVuCiAgICAgICAgICAgICAgICBhcHBseUFuaW1hdGlvblRyYW5zcGFyZW5jeShpc0FuaW1hdGlvblRyYW5zcGFyZW50KQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKICAgIAogICAgYXBwbHlBbmltYXRpb25UcmFuc3BhcmVuY3kgPSBmdW5jdGlvbihpc1RyYW5zcGFyZW50KQogICAgICAgIGlmIG5vdCBBbmltYXRpb25TY3JlZW5HdWkgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgbG9jYWwgZnJhbWUgPSBBbmltYXRpb25TY3JlZW5HdWk6RmluZEZpcnN0Q2hpbGQoIkdhemVCcm8iLCB0cnVlKQogICAgICAgIAogICAgICAgIGxvY2FsIHRyYW5zVmFsdWUgPSAwLjg1CgogICAgICAgIGlmIGZyYW1lIHRoZW4KICAgICAgICAgICAgbG9jYWwgc2VhcmNoQmFyID0gZnJhbWU6RmluZEZpcnN0Q2hpbGQoIlNlYXJjaEJhciIpCiAgICAgICAgICAgIGxvY2FsIHNjcm9sbEZyYW1lID0gZnJhbWU6RmluZEZpcnN0Q2hpbGQoIlNjcm9sbEZyYW1lIikKICAgICAgICAgICAgbG9jYWwgcmVzaXplSGFuZGxlID0gZnJhbWU6RmluZEZpcnN0Q2hpbGQoIlJlc2l6ZUhhbmRsZSIpCiAgICAgICAgICAgIAogICAgICAgICAgICBmcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gaXNUcmFuc3BhcmVudCBhbmQgdHJhbnNWYWx1ZSBvciAwLjIKICAgICAgICAgICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gaXNUcmFuc3BhcmVudCBhbmQgdHJhbnNWYWx1ZSBvciAwLjMKICAgICAgICAgICAgaWYgc2VhcmNoQmFyIHRoZW4gc2VhcmNoQmFyLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSBpc1RyYW5zcGFyZW50IGFuZCB0cmFuc1ZhbHVlIG9yIDAgZW5kCiAgICAgICAgICAgIGlmIHNjcm9sbEZyYW1lIHRoZW4gc2Nyb2xsRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IGlzVHJhbnNwYXJlbnQgYW5kIHRyYW5zVmFsdWUgb3IgMCBlbmQKICAgICAgICAgICAgaWYgcmVzaXplSGFuZGxlIHRoZW4gcmVzaXplSGFuZGxlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSBpc1RyYW5zcGFyZW50IGFuZCAwLjkgb3IgMC41IGVuZAoKICAgICAgICAgICAgaWYgc2Nyb2xsRnJhbWUgdGhlbgogICAgICAgICAgICAgICAgZm9yIF8sIGJ1dHRvbiBpbiBpcGFpcnMoc2Nyb2xsRnJhbWU6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBidXR0b246SXNBKCJUZXh0QnV0dG9uIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCB0YXJnZXRUcmFuc3BhcmVuY3kgPSBpc1RyYW5zcGFyZW50IGFuZCB0cmFuc1ZhbHVlIG9yIDAuMwogICAgICAgICAgICAgICAgICAgICAgICBUd2VlblNlcnZpY2U6Q3JlYXRlKGJ1dHRvbiwgVHdlZW5JbmZvLm5ldygwLjEpLCB7QmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IHRhcmdldFRyYW5zcGFyZW5jeX0pOlBsYXkoKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgkKICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAtLSA9PSBCQUdJQU4gRklUVVIgQkFSVTogSU5WSVNJQkxFIChEQVJJIEtPREUgQU5EQSkgICAgICAgICAgICAgICAgPT0KICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAKICAgIGxvY2FsIGludmlzUnVubmluZyA9IGZhbHNlCiAgICBsb2NhbCBDaGFyYWN0ZXIgPSBuaWwKICAgIGxvY2FsIEludmlzaWJsZUNoYXJhY3RlciA9IG5pbAogICAgbG9jYWwgSXNJbnZpcyA9IGZhbHNlCiAgICBsb2NhbCBJc1J1bm5pbmcgPSB0cnVlCiAgICBsb2NhbCBpbnZpc0ZpeCA9IG5pbAogICAgbG9jYWwgaW52aXNEaWVkID0gbmlsCiAgICAKICAgIGxvY2FsIFR1cm5WaXNpYmxlIAogICAgCiAgICBmdW5jdGlvbiBmaXhjYW0oc3BlYWtlcikKICAgICAgICBXb3Jrc3BhY2UuQ3VycmVudENhbWVyYTpEZXN0cm95KCkKICAgICAgICB0YXNrLndhaXQoLjEpCiAgICAgICAgcmVwZWF0IHRhc2sud2FpdCgpIHVudGlsIHNwZWFrZXIuQ2hhcmFjdGVyIH49IG5pbAogICAgICAgIFdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVN1YmplY3QgPSBzcGVha2VyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZFdoaWNoSXNBKCdIdW1hbm9pZCcpCiAgICAgICAgV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhVHlwZSA9ICJDdXN0b20iCiAgICAgICAgc3BlYWtlci5DYW1lcmFNaW5ab29tRGlzdGFuY2UgPSAwLjUKICAgICAgICBzcGVha2VyLkNhbWVyYU1heFpvb21EaXN0YW5jZSA9IDQwMAogICAgICAgIHNwZWFrZXIuQ2FtZXJhTW9kZSA9ICJDbGFzc2ljIgogICAgICAgIGlmIHNwZWFrZXIuQ2hhcmFjdGVyIGFuZCBzcGVha2VyLkNoYXJhY3Rlci5IZWFkIHRoZW4KICAgICAgICAgICAgc3BlYWtlci5DaGFyYWN0ZXIuSGVhZC5BbmNob3JlZCA9IGZhbHNlCiAgICAgICAgZW5kCiAgICBlbmQKICAgIAogICAgZnVuY3Rpb24gbWFrZUludmlzaWJsZSgpCiAgICAgICAgaWYgaW52aXNSdW5uaW5nIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIGludmlzUnVubmluZyA9IHRydWUKICAgICAgICAKICAgICAgICByZXBlYXQgdGFzay53YWl0KC4xKSB1bnRpbCBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBDaGFyYWN0ZXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBDaGFyYWN0ZXIuQXJjaGl2YWJsZSA9IHRydWUKICAgICAgICBJc0ludmlzID0gZmFsc2UKICAgICAgICBJc1J1bm5pbmcgPSB0cnVlCiAgICAgICAgSW52aXNpYmxlQ2hhcmFjdGVyID0gQ2hhcmFjdGVyOkNsb25lKCkKICAgICAgICBJbnZpc2libGVDaGFyYWN0ZXIuUGFyZW50ID0gZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpCiAgICAgICAgbG9jYWwgVm9pZCA9IHdvcmtzcGFjZS5GYWxsZW5QYXJ0c0Rlc3Ryb3lIZWlnaHQKICAgICAgICBJbnZpc2libGVDaGFyYWN0ZXIuTmFtZSA9ICIiCiAgICAgICAgbG9jYWwgQ0YKICAgIAogICAgICAgIGxvY2FsIGZ1bmN0aW9uIFJlc3Bhd24oKQogICAgICAgICAgICBJc1J1bm5pbmcgPSBmYWxzZQogICAgICAgICAgICBpZiBJc0ludmlzID09IHRydWUgdGhlbgogICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGNsb25lUG9zaXRpb24gPSBJbnZpc2libGVDaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXIgPSBDaGFyYWN0ZXIKICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgIENoYXJhY3Rlci5QYXJlbnQgPSB3b3Jrc3BhY2UKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBDaGFyYWN0ZXIuUHJpbWFyeVBhcnQuQ0ZyYW1lID0gY2xvbmVQb3NpdGlvbgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZFdoaWNoSXNBKCdIdW1hbm9pZCcpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkV2hpY2hJc0EoJ0h1bWFub2lkJyk6RGVzdHJveSgpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgSXNJbnZpcyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgaWYgSW52aXNpYmxlQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgSW52aXNpYmxlQ2hhcmFjdGVyOkRlc3Ryb3koKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGludmlzUnVubmluZyA9IGZhbHNlCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIGVsc2VpZiBJc0ludmlzID09IGZhbHNlIHRoZW4KICAgICAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXIgPSBDaGFyYWN0ZXIKICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgIENoYXJhY3Rlci5QYXJlbnQgPSB3b3Jrc3BhY2UKICAgICAgICAgICAgICAgICAgICBpZiBDaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRXaGljaElzQSgnSHVtYW5vaWQnKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZFdoaWNoSXNBKCdIdW1hbm9pZCcpOkRlc3Ryb3koKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIFR1cm5WaXNpYmxlKCkKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAKICAgICAgICBpbnZpc0ZpeCA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGlmIG5vdCBMb2NhbFBsYXllci5DaGFyYWN0ZXIgb3Igbm90IExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgSXNJbnRlZ2VyCiAgICAgICAgICAgICAgICBpZiB0b3N0cmluZyhWb2lkKTpmaW5kJy0nIHRoZW4KICAgICAgICAgICAgICAgICAgICBJc0ludGVnZXIgPSB0cnVlCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgSXNJbnRlZ2VyID0gZmFsc2UKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgUG9zID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24KICAgICAgICAgICAgICAgIGxvY2FsIFkgPSBQb3MuWQogICAgICAgICAgICAgICAgaWYgSXNJbnRlZ2VyID09IHRydWUgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIFkgPD0gVm9pZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIFJlc3Bhd24oKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZWlmIElzSW50ZWdlciA9PSBmYWxzZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgWSA+PSBWb2lkIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgUmVzcGF3bigpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZCkKICAgIAogICAgICAgIGZvciBpLHYgaW4gcGFpcnMoSW52aXNpYmxlQ2hhcmFjdGVyOkdldERlc2NlbmRhbnRzKCkpZG8KICAgICAgICAgICAgaWYgdjpJc0EoIkJhc2VQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgaWYgdi5OYW1lID09ICJIdW1hbm9pZFJvb3RQYXJ0IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgdi5UcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgdi5UcmFuc3BhcmVuY3kgPSAuNQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgCiAgICAgICAgaW52aXNEaWVkID0gSW52aXNpYmxlQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygnSHVtYW5vaWQnKS5EaWVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICBSZXNwYXduKCkKICAgICAgICAgICAgaW52aXNEaWVkOkRpc2Nvbm5lY3QoKQogICAgICAgIGVuZCkKICAgIAogICAgICAgIGlmIElzSW52aXMgPT0gdHJ1ZSB0aGVuIHJldHVybiBlbmQKICAgICAgICBJc0ludmlzID0gdHJ1ZQogICAgICAgIENGID0gV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ0ZyYW1lCiAgICAgICAgbG9jYWwgQ0ZfMSA9IExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZQogICAgICAgIAogICAgICAgIENoYXJhY3RlcjpTZXRQcmltYXJ5UGFydENGcmFtZShDRnJhbWUubmV3KDAsIDEwMDAwMDAsIDApKQogICAgICAgIAogICAgICAgIFdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVR5cGUgPSBFbnVtLkNhbWVyYVR5cGUuU2NyaXB0YWJsZQogICAgICAgIHRhc2sud2FpdCguMikKICAgICAgICBXb3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DYW1lcmFUeXBlID0gRW51bS5DYW1lcmFUeXBlLkN1c3RvbQogICAgICAgIENoYXJhY3Rlci5QYXJlbnQgPSBnYW1lOkdldFNlcnZpY2UoIkxpZ2h0aW5nIikKICAgICAgICBJbnZpc2libGVDaGFyYWN0ZXIuUGFyZW50ID0gd29ya3NwYWNlCiAgICAgICAgSW52aXNpYmxlQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZfMQogICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3RlciA9IEludmlzaWJsZUNoYXJhY3RlcgogICAgICAgIGZpeGNhbShMb2NhbFBsYXllcikKICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXIuQW5pbWF0ZS5EaXNhYmxlZCA9IHRydWUKICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXIuQW5pbWF0ZS5EaXNhYmxlZCA9IGZhbHNlCiAgICAKICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCdJbnZpc2libGUnLCdBbmRhIHNla2FyYW5nIHRpZGFrIHRlcmxpaGF0IG9sZWggcGVtYWluIGxhaW4nLCBDb2xvcjMuZnJvbVJHQig1MCwgMjAwLCA1MCkpCiAgICBlbmQKICAgIAogICAgVHVyblZpc2libGUgPSBmdW5jdGlvbigpCiAgICAgICAgaWYgSXNJbnZpcyA9PSBmYWxzZSB0aGVuIHJldHVybiBlbmQKICAgICAgICBpZiBpbnZpc0ZpeCB0aGVuCiAgICAgICAgICAgIGludmlzRml4OkRpc2Nvbm5lY3QoKQogICAgICAgICAgICBpbnZpc0ZpeCA9IG5pbAogICAgICAgIGVuZAogICAgICAgIGlmIGludmlzRGllZCB0aGVuCiAgICAgICAgICAgIGludmlzRGllZDpEaXNjb25uZWN0KCkKICAgICAgICAgICAgaW52aXNEaWVkID0gbmlsCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIENGXzEgPSBDRnJhbWUubmV3KCkKICAgICAgICBpZiBMb2NhbFBsYXllci5DaGFyYWN0ZXIgYW5kIExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICAgICAgIENGXzEgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgICAgICBlbmQKICAgICAgIAogICAgICAgIGlmIEludmlzaWJsZUNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIEludmlzaWJsZUNoYXJhY3RlcjpEZXN0cm95KCkKICAgICAgICAgICAgSW52aXNpYmxlQ2hhcmFjdGVyID0gbmlsCiAgICAgICAgZW5kCgogICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3RlciA9IENoYXJhY3RlcgogICAgICAgIENoYXJhY3Rlci5QYXJlbnQgPSB3b3Jrc3BhY2UKICAgICAgICBpZiBDaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgICAgICBDaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRl8xCiAgICAgICAgZW5kCgogICAgICAgIElzSW52aXMgPSBmYWxzZQogICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3Rlci5BbmltYXRlLkRpc2FibGVkID0gdHJ1ZQogICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3Rlci5BbmltYXRlLkRpc2FibGVkID0gZmFsc2UKICAgICAgICAKICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgIGludmlzRGllZCA9IENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoJ0h1bWFub2lkJykuRGllZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGlmIGludmlzRGllZCB0aGVuIGludmlzRGllZDpEaXNjb25uZWN0KCk7IGludmlzRGllZCA9IG5pbCBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZCkKCiAgICAgICAgaW52aXNSdW5uaW5nID0gZmFsc2UKICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCdWaXNpYmxlJywnQW5kYSBzZWthcmFuZyB0ZXJsaWhhdCBvbGVoIHBlbWFpbiBsYWluJywgQ29sb3IzLmZyb21SR0IoMjAwLCAxNTAsIDUwKSkKICAgIGVuZAoKICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAtLSA9PSBCQUdJQU4gRlVOR1NJIFVUQU1BIChQTEFZRVIsIENPTUJBVCwgRExMKSAgICAgICAgICAgICAgICAgICAgICA9PQogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiAgICBsb2NhbCBzdG9wU3BlY3RhdGU7IC0tIERla2xhcmFzaSBhd2FsCiAgICBsb2NhbCBjeWNsZVNwZWN0YXRlOwogICAgbG9jYWwgc3RhcnRTcGVjdGF0ZTsgLS0gRGVrbGFyYXNpIGF3YWwKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gU2tpZEZsaW5nKFRhcmdldFBsYXllcikKICAgICAgICBsb2NhbCBDaGFyYWN0ZXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBsb2NhbCBIdW1hbm9pZCA9IENoYXJhY3RlciBhbmQgQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKQogICAgICAgIGxvY2FsIFJvb3RQYXJ0ID0gSHVtYW5vaWQgYW5kIEh1bWFub2lkLlJvb3RQYXJ0CiAgICAgICAgaWYgbm90IChDaGFyYWN0ZXIgYW5kIEh1bWFub2lkIGFuZCBSb290UGFydCkgdGhlbiByZXR1cm4gZW5kCgogICAgICAgIGxvY2FsIFRDaGFyYWN0ZXIgPSBUYXJnZXRQbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgaWYgbm90IFRDaGFyYWN0ZXIgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgVEh1bWFub2lkID0gVENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICBsb2NhbCBUUm9vdFBhcnQgPSBUSHVtYW5vaWQgYW5kIFRIdW1hbm9pZC5Sb290UGFydAogICAgICAgIGxvY2FsIFRIZWFkID0gVENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgbG9jYWwgQWNjZXNzb3J5ID0gVENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkFjY2Vzc29yeSIpCiAgICAgICAgbG9jYWwgSGFuZGxlID0gQWNjZXNzb3J5IGFuZCBBY2Nlc3Nvcnk6RmluZEZpcnN0Q2hpbGQoIkhhbmRsZSIpCgogICAgICAgIGlmIFJvb3RQYXJ0LlZlbG9jaXR5Lk1hZ25pdHVkZSA8IDUwIHRoZW4KICAgICAgICAgICAgZ2V0Z2VudigpLk9sZFBvcyA9IFJvb3RQYXJ0LkNGcmFtZQogICAgICAgIGVuZAogICAgICAgIGlmIFRIdW1hbm9pZCBhbmQgVEh1bWFub2lkLlNpdCB0aGVuCiAgICAgICAgICAgIHJldHVybiBzaG93Tm90aWZpY2F0aW9uKCJUYXJnZXQgaXMgc2l0dGluZyIsIENvbG9yMy5mcm9tUkdCKDI1NSwxMDAsMCkpCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgLS0gW1BFUkJBSUtBTl0gSGFueWEgdWJhaCBrYW1lcmEgamlrYSB0aWRhayBzZWRhbmcgZGFsYW0gbW9kZSBzcGVjdGF0ZQogICAgICAgIGlmIG5vdCBJc1ZpZXdpbmdQbGF5ZXIgdGhlbgogICAgICAgICAgICBpZiBUSGVhZCB0aGVuCiAgICAgICAgICAgICAgICB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DYW1lcmFTdWJqZWN0ID0gVEhlYWQKICAgICAgICAgICAgZWxzZWlmIG5vdCBUSGVhZCBhbmQgSGFuZGxlIHRoZW4KICAgICAgICAgICAgICAgIHdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVN1YmplY3QgPSBIYW5kbGUKICAgICAgICAgICAgZWxzZWlmIFRIdW1hbm9pZCBhbmQgVFJvb3RQYXJ0IHRoZW4KICAgICAgICAgICAgICAgIHdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVN1YmplY3QgPSBUSHVtYW5vaWQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgaWYgbm90IFRDaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRXaGljaElzQSgiQmFzZVBhcnQiKSB0aGVuCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIEZQb3MgPSBmdW5jdGlvbihCYXNlUGFydCwgUG9zLCBBbmcpCiAgICAgICAgICAgIGlmIG5vdCAoUm9vdFBhcnQgYW5kIFJvb3RQYXJ0LlBhcmVudCBhbmQgQ2hhcmFjdGVyIGFuZCBDaGFyYWN0ZXIuUGFyZW50KSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyhCYXNlUGFydC5Qb3NpdGlvbikgKiBQb3MgKiBBbmcKICAgICAgICAgICAgQ2hhcmFjdGVyOlNldFByaW1hcnlQYXJ0Q0ZyYW1lKENGcmFtZS5uZXcoQmFzZVBhcnQuUG9zaXRpb24pICogUG9zICogQW5nKQogICAgICAgICAgICBSb290UGFydC5WZWxvY2l0eSA9IFZlY3RvcjMubmV3KDllNywgOWU3ICogMTAsIDllNykKICAgICAgICAgICAgUm9vdFBhcnQuUm90VmVsb2NpdHkgPSBWZWN0b3IzLm5ldyg5ZTgsIDllOCwgOWU4KQogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIFNGQmFzZVBhcnQgPSBmdW5jdGlvbihCYXNlUGFydCkKICAgICAgICAgICAgbG9jYWwgVGltZVRvV2FpdCA9IDIKICAgICAgICAgICAgbG9jYWwgVGltZSA9IHRpY2soKQogICAgICAgICAgICBsb2NhbCBBbmdsZSA9IDAKCiAgICAgICAgICAgIHJlcGVhdAogICAgICAgICAgICAgICAgaWYgUm9vdFBhcnQgYW5kIFRIdW1hbm9pZCBhbmQgQmFzZVBhcnQgYW5kIEJhc2VQYXJ0LlBhcmVudCB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgQmFzZVBhcnQuVmVsb2NpdHkuTWFnbml0dWRlIDwgNTAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBBbmdsZSA9IEFuZ2xlICsgMTAwCiAgICAgICAgICAgICAgICAgICAgICAgIEZQb3MoQmFzZVBhcnQsIENGcmFtZS5uZXcoMCwgMS41LCAwKSArIFRIdW1hbm9pZC5Nb3ZlRGlyZWN0aW9uICogQmFzZVBhcnQuVmVsb2NpdHkuTWFnbml0dWRlIC8gMS4yNSwgQ0ZyYW1lLkFuZ2xlcyhtYXRoLnJhZChBbmdsZSksMCAsMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDAsIC0xLjUsIDApICsgVEh1bWFub2lkLk1vdmVEaXJlY3Rpb24gKiBCYXNlUGFydC5WZWxvY2l0eS5NYWduaXR1ZGUgLyAxLjI1LCBDRnJhbWUuQW5nbGVzKG1hdGgucmFkKEFuZ2xlKSwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDIuMjUsIDEuNSwgLTIuMjUpICsgVEh1bWFub2lkLk1vdmVEaXJlY3Rpb24gKiBCYXNlUGFydC5WZWxvY2l0eS5NYWduaXR1ZGUgLyAxLjI1LCBDRnJhbWUuQW5nbGVzKG1hdGgucmFkKEFuZ2xlKSwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KC0yLjI1LCAtMS41LCAyLjI1KSArIFRIdW1hbm9pZC5Nb3ZlRGlyZWN0aW9uICogQmFzZVBhcnQuVmVsb2NpdHkuTWFnbml0dWRlIC8gMS4yNSwgQ0ZyYW1lLkFuZ2xlcyhtYXRoLnJhZChBbmdsZSksIDAsIDApKTsgdGFzay53YWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgRlBvcyhCYXNlUGFydCwgQ0ZyYW1lLm5ldygwLCAxLjUsIDApICsgVEh1bWFub2lkLk1vdmVEaXJlY3Rpb24sQ0ZyYW1lLkFuZ2xlcyhtYXRoLnJhZChBbmdsZSksIDAsIDApKTsgdGFzay53YWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgRlBvcyhCYXNlUGFydCwgQ0ZyYW1lLm5ldygwLCAtMS41LCAwKSArIFRIdW1hbm9pZC5Nb3ZlRGlyZWN0aW9uLENGcmFtZS5BbmdsZXMobWF0aC5yYWQoQW5nbGUpLCAwLCAwKSk7IHRhc2sud2FpdCgpCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDAsIDEuNSwgVEh1bWFub2lkLldhbGtTcGVlZCksIENGcmFtZS5BbmdsZXMobWF0aC5yYWQoOTApLCAwLCAwKSk7IHRhc2sud2FpdCgpCiAgICAgICAgICAgICAgICAgICAgICAgIEZQb3MoQmFzZVBhcnQsIENGcmFtZS5uZXcoMCwgLTEuNSwgLVRIdW1hbm9pZC5XYWxrU3BlZWQpLCBDRnJhbWUuQW5nbGVzKDAsIDAsIDApKTsgdGFzay53YWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgRlBvcyhCYXNlUGFydCwgQ0ZyYW1lLm5ldygwLCAxLjUsIFRIdW1hbm9pZC5XYWxrU3BlZWQpLCBDRnJhbWUuQW5nbGVzKG1hdGgucmFkKDkwKSwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDAsIDEuNSwgVFJvb3RQYXJ0LlZlbG9jaXR5Lk1hZ25pdHVkZSAvIDEuMjUpLCBDRnJhbWUuQW5nbGVzKG1hdGgucmFkKDkwKSwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDAsIC0xLjUsIC1UUm9vdFBhcnQuVmVsb2NpdHkuTWFnbml0dWRlIC8gMS4yNSksIENGcmFtZS5BbmdsZXMoMCwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDAsIDEuNSwgVFJvb3RQYXJ0LlZlbG9jaXR5Lk1hZ25pdHVkZSAvIDEuMjUpLCBDRnJhbWUuQW5nbGVzKG1hdGgucmFkKDkwKSwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDAsIC0xLjUsIDApLCBDRnJhbWUuQW5nbGVzKG1hdGgucmFkKDkwKSwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICBGUG9zKEJhc2VQYXJ0LCBDRnJhbWUubmV3KDAsIC0xLjUsIDApLCBDRnJhbWUuQW5nbGVzKDAsIDAsIDApKTsgdGFzay53YWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgRlBvcyhCYXNlUGFydCwgQ0ZyYW1lLm5ldygwLCAtMS41ICwwKSwgQ0ZyYW1lLkFuZ2xlcyhtYXRoLnJhZCgtOTApLCAwLCAwKSk7IHRhc2sud2FpdCgpCiAgICAgICAgICAgICAgICAgICAgICAgIEZQb3MoQmFzZVBhcnQsIENGcmFtZS5uZXcoMCwgLTEuNSwgMCksIENGcmFtZS5BbmdsZXMoMCwgMCwgMCkpOyB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgdW50aWwgbm90IChCYXNlUGFydCBhbmQgQmFzZVBhcnQuUGFyZW50KSBvciBCYXNlUGFydC5WZWxvY2l0eS5NYWduaXR1ZGUgPiA1MDAgb3IgQmFzZVBhcnQuUGFyZW50IH49IFRhcmdldFBsYXllci5DaGFyYWN0ZXIgb3IgVGFyZ2V0UGxheWVyLlBhcmVudCB+PSBQbGF5ZXJzIG9yIG5vdCBUYXJnZXRQbGF5ZXIuQ2hhcmFjdGVyID09IFRDaGFyYWN0ZXIgb3IgVEh1bWFub2lkLlNpdCBvciBIdW1hbm9pZC5IZWFsdGggPD0gMCBvciB0aWNrKCkgPiBUaW1lICsgVGltZVRvV2FpdAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIHdvcmtzcGFjZS5GYWxsZW5QYXJ0c0Rlc3Ryb3lIZWlnaHQgPSAwLzAKICAgICAgICAKICAgICAgICBsb2NhbCBCViA9IEluc3RhbmNlLm5ldygiQm9keVZlbG9jaXR5IikKICAgICAgICBCVi5OYW1lID0gIkVwaXhWZWwiCiAgICAgICAgQlYuUGFyZW50ID0gUm9vdFBhcnQKICAgICAgICBCVi5WZWxvY2l0eSA9IFZlY3RvcjMubmV3KDllOCwgOWU4LCA5ZTgpCiAgICAgICAgQlYuTWF4Rm9yY2UgPSBWZWN0b3IzLm5ldygxLzAsIDEvMCwgMS8wKQogICAgICAgIAogICAgICAgIEh1bWFub2lkOlNldFN0YXRlRW5hYmxlZChFbnVtLkh1bWFub2lkU3RhdGVUeXBlLlNlYXRlZCwgZmFsc2UpCiAgICAgICAgCiAgICAgICAgaWYgVFJvb3RQYXJ0IGFuZCBUSGVhZCB0aGVuCiAgICAgICAgICAgIGlmIChUUm9vdFBhcnQuQ0ZyYW1lLnAgLSBUSGVhZC5DRnJhbWUucCkuTWFnbml0dWRlID4gNSB0aGVuCiAgICAgICAgICAgICAgICBTRkJhc2VQYXJ0KFRIZWFkKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBTRkJhc2VQYXJ0KFRSb290UGFydCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZWlmIFRSb290UGFydCBhbmQgbm90IFRIZWFkIHRoZW4KICAgICAgICAgICAgU0ZCYXNlUGFydChUUm9vdFBhcnQpCiAgICAgICAgZWxzZWlmIG5vdCBUUm9vdFBhcnQgYW5kIFRIZWFkIHRoZW4KICAgICAgICAgICAgU0ZCYXNlUGFydChUSGVhZCkKICAgICAgICBlbHNlaWYgbm90IFRSb290UGFydCBhbmQgbm90IFRIZWFkIGFuZCBBY2Nlc3NvcnkgYW5kIEhhbmRsZSB0aGVuCiAgICAgICAgICAgIFNGQmFzZVBhcnQoSGFuZGxlKQogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIEJWOkRlc3Ryb3koKQogICAgICAgIEh1bWFub2lkOlNldFN0YXRlRW5hYmxlZChFbnVtLkh1bWFub2lkU3RhdGVUeXBlLlNlYXRlZCwgdHJ1ZSkKICAgICAgICAKICAgICAgICAtLSBbUEVSQkFJS0FOXSBIYW55YSBrZW1iYWxpa2FuIGthbWVyYSBrZSBwbGF5ZXIgbG9rYWwgamlrYSB0aWRhayBzZWRhbmcgc3BlY3RhdGUKICAgICAgICBpZiBub3QgSXNWaWV3aW5nUGxheWVyIHRoZW4KICAgICAgICAgICAgd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhU3ViamVjdCA9IEh1bWFub2lkCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgcmVwZWF0CiAgICAgICAgICAgIGlmIG5vdCAoUm9vdFBhcnQgYW5kIFJvb3RQYXJ0LlBhcmVudCBhbmQgQ2hhcmFjdGVyIGFuZCBDaGFyYWN0ZXIuUGFyZW50KSB0aGVuIGJyZWFrIGVuZAogICAgICAgICAgICBSb290UGFydC5DRnJhbWUgPSBnZXRnZW52KCkuT2xkUG9zICogQ0ZyYW1lLm5ldygwLCAuNSwgMCkKICAgICAgICAgICAgQ2hhcmFjdGVyOlNldFByaW1hcnlQYXJ0Q0ZyYW1lKGdldGdlbnYoKS5PbGRQb3MgKiBDRnJhbWUubmV3KDAsIC41LCAwKSkKICAgICAgICAgICAgSHVtYW5vaWQ6Q2hhbmdlU3RhdGUoIkdldHRpbmdVcCIpCiAgICAgICAgICAgIHRhYmxlLmZvcmVhY2goQ2hhcmFjdGVyOkdldENoaWxkcmVuKCksIGZ1bmN0aW9uKF8sIHgpCiAgICAgICAgICAgICAgICBpZiB4OklzQSgiQmFzZVBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgeC5WZWxvY2l0eSwgeC5Sb3RWZWxvY2l0eSA9IFZlY3RvcjMubmV3KCksIFZlY3RvcjMubmV3KCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIHRhc2sud2FpdCgpCiAgICAgICAgdW50aWwgbm90IFJvb3RQYXJ0IG9yIG5vdCBSb290UGFydC5QYXJlbnQgb3IgKFJvb3RQYXJ0LlBvc2l0aW9uIC0gZ2V0Z2VudigpLk9sZFBvcy5wKS5NYWduaXR1ZGUgPCAyNQogICAgICAgIHdvcmtzcGFjZS5GYWxsZW5QYXJ0c0Rlc3Ryb3lIZWlnaHQgPSBnZXRnZW52KCkuRlBESAogICAgZW5kCgogICAgbG9jYWwgVG9nZ2xlRmxpbmdPblBsYXllcgoKICAgIGxvY2FsIGZ1bmN0aW9uIGNyZWF0ZU9yVXBkYXRlRmxpbmdTdGF0dXNCYXIodGFyZ2V0UGxheWVyKQogICAgICAgIGlmIGZsaW5nU3RhdHVzR3VpIGFuZCBmbGluZ1N0YXR1c0d1aS5QYXJlbnQgdGhlbgogICAgICAgICAgICBmbGluZ1N0YXR1c0d1aTpEZXN0cm95KCkKICAgICAgICAgICAgZmxpbmdTdGF0dXNHdWkgPSBuaWwKICAgICAgICBlbmQKICAgIAogICAgICAgIGlmIG5vdCB0YXJnZXRQbGF5ZXIgdGhlbgogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKICAgIAogICAgICAgIGZsaW5nU3RhdHVzR3VpID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQogICAgICAgIGZsaW5nU3RhdHVzR3VpLk5hbWUgPSAiRmxpbmdTdGF0dXNHVUkiCiAgICAgICAgZmxpbmdTdGF0dXNHdWkuUGFyZW50ID0gQ29yZUd1aQogICAgICAgIGZsaW5nU3RhdHVzR3VpLlpJbmRleEJlaGF2aW9yID0gRW51bS5aSW5kZXhCZWhhdmlvci5TaWJsaW5nCiAgICAgICAgZmxpbmdTdGF0dXNHdWkuUmVzZXRPblNwYXduID0gZmFsc2UKICAgIAogICAgICAgIGxvY2FsIEZsaW5nQmFyID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCiAgICAgICAgRmxpbmdCYXIuTmFtZSA9ICJGbGluZ0JhciIKICAgICAgICBGbGluZ0Jhci5TaXplID0gVURpbTIubmV3KDAsIDI1MCwgMCwgMzUpCiAgICAgICAgRmxpbmdCYXIuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTI1LCAwLCAxNSkKICAgICAgICBGbGluZ0Jhci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAwLCA1MCwgNTApCiAgICAgICAgRmxpbmdCYXIuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuMgogICAgICAgIEZsaW5nQmFyLkJvcmRlclNpemVQaXhlbCA9IDAKICAgICAgICBGbGluZ0Jhci5QYXJlbnQgPSBmbGluZ1N0YXR1c0d1aQogICAgCiAgICAgICAgbG9jYWwgVUlDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRmxpbmdCYXIpCiAgICAgICAgVUlDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKICAgICAgICBsb2NhbCBVSVN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBGbGluZ0JhcikKICAgICAgICBVSVN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTAwLCAxMDApCiAgICAgICAgVUlTdHJva2UuVGhpY2tuZXNzID0gMQogICAgICAgIFVJU3Ryb2tlLlRyYW5zcGFyZW5jeSA9IDAuNQogICAgCiAgICAgICAgbG9jYWwgRGlzYWJsZUJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCiAgICAgICAgRGlzYWJsZUJ1dHRvbi5OYW1lID0gIkRpc2FibGVCdXR0b24iCiAgICAgICAgRGlzYWJsZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCiAgICAgICAgRGlzYWJsZUJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgIERpc2FibGVCdXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAogICAgICAgIERpc2FibGVCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCiAgICAgICAgRGlzYWJsZUJ1dHRvbi5UZXh0U2l6ZSA9IDE0CiAgICAgICAgRGlzYWJsZUJ1dHRvbi5UZXh0ID0gIkhlbnRpa2FuIEZsaW5nOiAiIC4uIHRhcmdldFBsYXllci5EaXNwbGF5TmFtZQogICAgICAgIERpc2FibGVCdXR0b24uUGFyZW50ID0gRmxpbmdCYXIKICAgIAogICAgICAgIERpc2FibGVCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIGN1cnJlbnRGbGluZ1RhcmdldCB0aGVuCiAgICAgICAgICAgICAgICBUb2dnbGVGbGluZ09uUGxheWVyKGN1cnJlbnRGbGluZ1RhcmdldCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCiAgICAKICAgIFRvZ2dsZUZsaW5nT25QbGF5ZXIgPSBmdW5jdGlvbih0YXJnZXRQbGF5ZXIpCiAgICAgICAgaWYgZmxpbmdMb29wQ29ubmVjdGlvbiB0aGVuCiAgICAgICAgICAgIGZsaW5nTG9vcENvbm5lY3Rpb246RGlzY29ubmVjdCgpCiAgICAgICAgICAgIGZsaW5nTG9vcENvbm5lY3Rpb24gPSBuaWwKICAgICAgICBlbmQKICAgIAogICAgICAgIGlmIGN1cnJlbnRGbGluZ1RhcmdldCA9PSB0YXJnZXRQbGF5ZXIgdGhlbgogICAgICAgICAgICBjdXJyZW50RmxpbmdUYXJnZXQgPSBuaWwKICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbigiRmxpbmcgZGloZW50aWthbi4iLCBDb2xvcjMuZnJvbVJHQigyMDAsIDE1MCwgNTApKQogICAgICAgICAgICAKICAgICAgICAgICAgY3JlYXRlT3JVcGRhdGVGbGluZ1N0YXR1c0JhcihuaWwpCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBDaGFyYWN0ZXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICAgICAgaWYgQ2hhcmFjdGVyIGFuZCBmbGluZ1N0YXJ0UG9zaXRpb24gdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgSHVtYW5vaWQgPSBDaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpCiAgICAgICAgICAgICAgICBsb2NhbCBSb290UGFydCA9IEh1bWFub2lkIGFuZCBIdW1hbm9pZC5Sb290UGFydAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBSb290UGFydCBhbmQgSHVtYW5vaWQgdGhlbgogICAgICAgICAgICAgICAgICAgIC0tIFtQRVJCQUlLQU5dIEhhbnlhIGtlbWJhbGlrYW4ga2FtZXJhIGppa2EgdGlkYWsgc2VkYW5nIHNwZWN0YXRlCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IElzVmlld2luZ1BsYXllciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVN1YmplY3QgPSBIdW1hbm9pZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHJlcGVhdAogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgUm9vdFBhcnQgb3Igbm90IFJvb3RQYXJ0LlBhcmVudCB0aGVuIGJyZWFrIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBSb290UGFydC5DRnJhbWUgPSBmbGluZ1N0YXJ0UG9zaXRpb24gKiBDRnJhbWUubmV3KDAsIDAuNSwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcmFjdGVyOlNldFByaW1hcnlQYXJ0Q0ZyYW1lKGZsaW5nU3RhcnRQb3NpdGlvbiAqIENGcmFtZS5uZXcoMCwgMC41LCAwKSkKICAgICAgICAgICAgICAgICAgICAgICAgSHVtYW5vaWQ6Q2hhbmdlU3RhdGUoIkdldHRpbmdVcCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLCB4IGluIGlwYWlycyhDaGFyYWN0ZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHg6SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LlZlbG9jaXR5LCB4LlJvdFZlbG9jaXR5ID0gVmVjdG9yMy5uZXcoKSwgVmVjdG9yMy5uZXcoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgIHVudGlsIG5vdCBSb290UGFydCBvciBub3QgUm9vdFBhcnQuUGFyZW50IG9yIChSb290UGFydC5Qb3NpdGlvbiAtIGZsaW5nU3RhcnRQb3NpdGlvbi5wKS5NYWduaXR1ZGUgPCAyNQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBmbGluZ1N0YXJ0UG9zaXRpb24gPSBuaWwgCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgbG9jYWwgY2hhciA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICBsb2NhbCByb290ID0gY2hhciBhbmQgY2hhcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGlmIHJvb3QgdGhlbgogICAgICAgICAgICAgICAgZmxpbmdTdGFydFBvc2l0aW9uID0gcm9vdC5DRnJhbWUgCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oIkthcmFrdGVyIEFuZGEgdGlkYWsgZGFwYXQgZGl0ZW11a2FuIHVudHVrIG1lbXVsYWkgZmxpbmcuIiwgQ29sb3IzLmZyb21SR0IoMjU1LCAxMDAsIDApKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGVuZAogICAgCiAgICAgICAgICAgIGN1cnJlbnRGbGluZ1RhcmdldCA9IHRhcmdldFBsYXllcgogICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCJNZW5nYWt0aWZrYW4gZmxpbmcgcGFkYSAiIC4uIHRhcmdldFBsYXllci5OYW1lLCBDb2xvcjMuZnJvbVJHQigyMDAsIDUwLCA1MCkpCiAgICAgICAgICAgIAogICAgICAgICAgICBjcmVhdGVPclVwZGF0ZUZsaW5nU3RhdHVzQmFyKHRhcmdldFBsYXllcikKCiAgICAgICAgICAgIGZsaW5nTG9vcENvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGlmIGN1cnJlbnRGbGluZ1RhcmdldCBhbmQgY3VycmVudEZsaW5nVGFyZ2V0LlBhcmVudCA9PSBQbGF5ZXJzIGFuZCBjdXJyZW50RmxpbmdUYXJnZXQuQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICBwY2FsbChTa2lkRmxpbmcsIGN1cnJlbnRGbGluZ1RhcmdldCkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBUb2dnbGVGbGluZ09uUGxheWVyKGN1cnJlbnRGbGluZ1RhcmdldCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgZW5kCiAgICAgICAgdXBkYXRlUGxheWVyTGlzdCgpIAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gU3RhcnRGbHkoKQogICAgICAgIGlmIElzRmx5aW5nIHRoZW4gcmV0dXJuIGVuZDsgbG9jYWwgY2hhcmFjdGVyID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOyBpZiBub3QgKGNoYXJhY3RlciBhbmQgY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgYW5kIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikpIHRoZW4gcmV0dXJuIGVuZDsgbG9jYWwgcm9vdCA9IGNoYXJhY3RlcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKTsgbG9jYWwgaHVtYW5vaWQgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpOyBJc0ZseWluZyA9IHRydWU7IHNhdmVGZWF0dXJlU3RhdGVzKCk7IGh1bWFub2lkLlBsYXRmb3JtU3RhbmQgPSB0cnVlOyBsb2NhbCBib2R5R3lybyA9IEluc3RhbmNlLm5ldygiQm9keUd5cm8iLCByb290KTsgYm9keUd5cm8uTmFtZSA9ICJGbHlHeXJvIjsgYm9keUd5cm8uUCA9IDllNDsgYm9keUd5cm8uTWF4VG9ycXVlID0gVmVjdG9yMy5uZXcoOWU5LCA5ZTksIDllOSk7IGJvZHlHeXJvLkNGcmFtZSA9IHJvb3QuQ0ZyYW1lOyBsb2NhbCBib2R5VmVsb2NpdHkgPSBJbnN0YW5jZS5uZXcoIkJvZHlWZWxvY2l0eSIsIHJvb3QpOyBib2R5VmVsb2NpdHkuTmFtZSA9ICJGbHlWZWxvY2l0eSI7IGJvZHlWZWxvY2l0eS5NYXhGb3JjZSA9IFZlY3RvcjMubmV3KDllOSwgOWU5LCA5ZTkpOyBib2R5VmVsb2NpdHkuVmVsb2NpdHkgPSBWZWN0b3IzLm5ldygwLCAwLCAwKTsgbG9jYWwgY29udHJvbHMgPSB7RiA9IDAsIEIgPSAwLCBMID0gMCwgUiA9IDAsIFEgPSAwLCBFID0gMH0KICAgICAgICB0YWJsZS5pbnNlcnQoRmx5Q29ubmVjdGlvbnMsIFVzZXJJbnB1dFNlcnZpY2UuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBwcm9jZXNzZWQpIGlmIHByb2Nlc3NlZCB0aGVuIHJldHVybiBlbmQ7IGlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLktleWJvYXJkIHRoZW4gbG9jYWwga2V5ID0gaW5wdXQuS2V5Q29kZS5OYW1lOmxvd2VyKCk7IGlmIGtleSA9PSAidyIgdGhlbiBjb250cm9scy5GID0gU2V0dGluZ3MuRmx5U3BlZWQgZWxzZWlmIGtleSA9PSAicyIgdGhlbiBjb250cm9scy5CID0gLVNldHRpbmdzLkZseVNwZWVkIGVsc2VpZiBrZXkgPT0gImEiIHRoZW4gY29udHJvbHMuTCA9IC1TZXR0aW5ncy5GbHlTcGVlZCBlbHNlaWYga2V5ID09ICJkIiB0aGVuIGNvbnRyb2xzLlIgPSBTZXR0aW5ncy5GbHlTcGVlZCBlbHNlaWYga2V5ID09ICJlIiB0aGVuIGNvbnRyb2xzLlEgPSBTZXR0aW5ncy5GbHlTcGVlZCAqIDIgZWxzZWlmIGtleSA9PSAicSIgdGhlbiBjb250cm9scy5FID0gLVNldHRpbmdzLkZseVNwZWVkICogMiBlbmQ7IFdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVR5cGUgPSBFbnVtLkNhbWVyYVR5cGUuVHJhY2sgZW5kIGVuZCkpCiAgICAgICAgdGFibGUuaW5zZXJ0KEZseUNvbm5lY3Rpb25zLCBVc2VySW5wdXRTZXJ2aWNlLklucHV0RW5kZWQ6Q29ubmVjdChmdW5jdGlvbihpbnB1dCwgcHJvY2Vzc2VkKSBpZiBwcm9jZXNzZWQgdGhlbiByZXR1cm4gZW5kOyBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5LZXlib2FyZCB0aGVuIGxvY2FsIGtleSA9IGlucHV0LktleUNvZGUuTmFtZTpsb3dlcigpOyBpZiBrZXkgPT0gInciIHRoZW4gY29udHJvbHMuRiA9IDAgZWxzZWlmIGtleSA9PSAicyIgdGhlbiBjb250cm9scy5CID0gMCBlbHNlaWYga2V5ID09ICJhIiB0aGVuIGNvbnRyb2xzLkwgPSAwIGVsc2VpZiBrZXkgPT0gImQiIHRoZW4gY29udHJvbHMuUiA9IDAgZWxzZWlmIGtleSA9PSAiZSIgdGhlbiBjb250cm9scy5RID0gMCBlbHNlaWYga2V5ID09ICJxIiB0aGVuIGNvbnRyb2xzLkUgPSAwIGVuZCBlbmQgZW5kKSkKICAgICAgICB0YWJsZS5pbnNlcnQoRmx5Q29ubmVjdGlvbnMsIFJ1blNlcnZpY2UuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkgaWYgbm90IElzRmx5aW5nIHRoZW4gcmV0dXJuIGVuZDsgbG9jYWwgc3BlZWQgPSAoY29udHJvbHMuTCArIGNvbnRyb2xzLlIgfj0gMCBvciBjb250cm9scy5GICsgY29udHJvbHMuQiB+PSAwIG9yIGNvbnRyb2xzLlEgKyBjb250cm9scy5FIH49IDApIGFuZCA1MCBvciAwOyBsb2NhbCBjYW1lcmEgPSBXb3Jrc3BhY2UuQ3VycmVudENhbWVyYTsgaWYgc3BlZWQgfj0gMCB0aGVuIGJvZHlWZWxvY2l0eS5WZWxvY2l0eSA9ICgoY2FtZXJhLkNGcmFtZS5Mb29rVmVjdG9yICogKGNvbnRyb2xzLkYgKyBjb250cm9scy5CKSkgKyAoKGNhbWVyYS5DRnJhbWUgKiBDRnJhbWUubmV3KGNvbnRyb2xzLkwgKyBjb250cm9scy5SLCAoY29udHJvbHMuRiArIGNvbnRyb2xzLkIgKyBjb250cm9scy5RICsgY29udHJvbHMuRSkgKiAwLjIsIDApLlBvc2l0aW9uKSAtIGNhbWVyYS5DRnJhbWUuUG9zaXRpb24pKSAqIHNwZWVkIGVsc2UgYm9keVZlbG9jaXR5LlZlbG9jaXR5ID0gVmVjdG9yMy5uZXcoMCwgMCwgMCkgZW5kOyBib2R5R3lyby5DRnJhbWUgPSBjYW1lcmEuQ0ZyYW1lIGVuZCkpCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBTdG9wRmx5KCkKICAgICAgICBpZiBub3QgSXNGbHlpbmcgdGhlbiByZXR1cm4gZW5kOyBJc0ZseWluZyA9IGZhbHNlOyBzYXZlRmVhdHVyZVN0YXRlcygpOyBsb2NhbCBjaGFyYWN0ZXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXI7IGlmIGNoYXJhY3RlciBhbmQgY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKSB0aGVuIGNoYXJhY3Rlci5IdW1hbm9pZC5QbGF0Zm9ybVN0YW5kID0gZmFsc2UgZW5kOyBmb3IgXywgY29ubiBpbiBwYWlycyhGbHlDb25uZWN0aW9ucykgZG8gY29ubjpEaXNjb25uZWN0KCkgZW5kOyBGbHlDb25uZWN0aW9ucyA9IHt9OyBsb2NhbCByb290ID0gY2hhcmFjdGVyIGFuZCBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKTsgaWYgcm9vdCB0aGVuIGlmIHJvb3Q6RmluZEZpcnN0Q2hpbGQoIkZseUd5cm8iKSB0aGVuIHJvb3QuRmx5R3lybzpEZXN0cm95KCkgZW5kOyBpZiByb290OkZpbmRGaXJzdENoaWxkKCJGbHlWZWxvY2l0eSIpIHRoZW4gcm9vdC5GbHlWZWxvY2l0eTpEZXN0cm95KCkgZW5kIGVuZDsgV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhVHlwZSA9IEVudW0uQ2FtZXJhVHlwZS5DdXN0b20KICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIFN0b3BNb2JpbGVGbHkoKQogICAgICAgIGlmIG5vdCBJc0ZseWluZyB0aGVuIHJldHVybiBlbmQ7IElzRmx5aW5nID0gZmFsc2U7IHNhdmVGZWF0dXJlU3RhdGVzKCk7IGxvY2FsIGNoYXJhY3RlciA9IExvY2FsUGxheWVyLkNoYXJhY3RlcjsgaWYgY2hhcmFjdGVyIGFuZCBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIHRoZW4gY2hhcmFjdGVyLkh1bWFub2lkLlBsYXRmb3JtU3RhbmQgPSBmYWxzZSBlbmQ7IGZvciBfLCBjb25uIGluIHBhaXJzKEZseUNvbm5lY3Rpb25zKSBkbyBjb25uOkRpc2Nvbm5lY3QoKSBlbmQ7IEZseUNvbm5lY3Rpb25zID0ge307IGxvY2FsIHJvb3QgPSBjaGFyYWN0ZXIgYW5kIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpOyBpZiByb290IHRoZW4gaWYgcm9vdDpGaW5kRmlyc3RDaGlsZCgiRmx5R3lybyIpIHRoZW4gcm9vdC5GbHlHeXJvOkRlc3Ryb3koKSBlbmQ7IGlmIHJvb3Q6RmluZEZpcnN0Q2hpbGQoIkZseVZlbG9jaXR5IikgdGhlbiByb290LkZseVZlbG9jaXR5OkRlc3Ryb3koKSBlbmQgZW5kOyBXb3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DYW1lcmFUeXBlID0gRW51bS5DYW1lcmFUeXBlLkN1c3RvbQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gU3RhcnRNb2JpbGVGbHkoKQogICAgICAgIGlmIElzRmx5aW5nIHRoZW4gcmV0dXJuIGVuZDsgbG9jYWwgY2hhcmFjdGVyID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOyBpZiBub3QgKGNoYXJhY3RlciBhbmQgY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgYW5kIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikpIHRoZW4gcmV0dXJuIGVuZDsgbG9jYWwgcm9vdCA9IGNoYXJhY3RlcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKTsgbG9jYWwgaHVtYW5vaWQgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpOyBsb2NhbCBzdWNjZXNzLCBjb250cm9sTW9kdWxlID0gcGNhbGwocmVxdWlyZSwgTG9jYWxQbGF5ZXIuUGxheWVyU2NyaXB0czpXYWl0Rm9yQ2hpbGQoIlBsYXllck1vZHVsZSIpOldhaXRGb3JDaGlsZCgiQ29udHJvbE1vZHVsZSIpKTsgaWYgbm90IHN1Y2Nlc3MgdGhlbiBzaG93Tm90aWZpY2F0aW9uKCJHYWdhbCBtZW11YXQgbW9kdWwga29udHJvbCBtb2JpbGUuIiwgQ29sb3IzLmZyb21SR0IoMjU1LCAxMDAsIDEwMCkpOyByZXR1cm4gZW5kCiAgICAgICAgSXNGbHlpbmcgPSB0cnVlOyBzYXZlRmVhdHVyZVN0YXRlcygpOyBodW1hbm9pZC5QbGF0Zm9ybVN0YW5kID0gdHJ1ZTsgbG9jYWwgYm9keVZlbG9jaXR5ID0gSW5zdGFuY2UubmV3KCJCb2R5VmVsb2NpdHkiLCByb290KTsgYm9keVZlbG9jaXR5Lk5hbWUgPSAiRmx5VmVsb2NpdHkiOyBib2R5VmVsb2NpdHkuTWF4Rm9yY2UgPSBWZWN0b3IzLm5ldyg5ZTksIDllOSwgOWU5KTsgYm9keVZlbG9jaXR5LlZlbG9jaXR5ID0gVmVjdG9yMy5uZXcoMCwgMCwgMCk7IGxvY2FsIGJvZHlHeXJvID0gSW5zdGFuY2UubmV3KCJCb2R5R3lybyIsIHJvb3QpOyBib2R5R3lyby5OYW1lID0gIkZseUd5cm8iOyBib2R5R3lyby5NYXhUb3JxdWUgPSBWZWN0b3IzLm5ldyg5ZTksIDllOSwgOWU5KTsgYm9keUd5cm8uUCA9IDEwMDA7IGJvZHlHeXJvLkQgPSA1MAogICAgICAgIHRhYmxlLmluc2VydChGbHlDb25uZWN0aW9ucywgUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKSBpZiBub3QgSXNGbHlpbmcgdGhlbiByZXR1cm4gZW5kOyBsb2NhbCBjYW1lcmEgPSBXb3Jrc3BhY2UuQ3VycmVudENhbWVyYTsgaWYgbm90IChjaGFyYWN0ZXIgYW5kIHJvb3QgYW5kIHJvb3Q6RmluZEZpcnN0Q2hpbGQoIkZseVZlbG9jaXR5IikgYW5kIHJvb3Q6RmluZEZpcnN0Q2hpbGQoIkZseUd5cm8iKSkgdGhlbiBTdG9wTW9iaWxlRmx5KCk7IHJldHVybiBlbmQ7IHJvb3QuRmx5VmVsb2NpdHkuTWF4Rm9yY2UgPSBWZWN0b3IzLm5ldyg5ZTksIDllOSwgOWU5KTsgcm9vdC5GbHlHeXJvLk1heFRvcnF1ZSA9IFZlY3RvcjMubmV3KDllOSwgOWU5LCA5ZTkpOyByb290LkZseUd5cm8uQ0ZyYW1lID0gY2FtZXJhLkNGcmFtZTsgcm9vdC5GbHlWZWxvY2l0eS5WZWxvY2l0eSA9IFZlY3RvcjMubmV3KDAsIDAsIDApOyBsb2NhbCBkaXJlY3Rpb24gPSBjb250cm9sTW9kdWxlOkdldE1vdmVWZWN0b3IoKTsgaWYgZGlyZWN0aW9uLlggfj0gMCB0aGVuIHJvb3QuRmx5VmVsb2NpdHkuVmVsb2NpdHkgPSByb290LkZseVZlbG9jaXR5LlZlbG9jaXR5ICsgY2FtZXJhLkNGcmFtZS5SaWdodFZlY3RvciAqIChkaXJlY3Rpb24uWCAqIChTZXR0aW5ncy5GbHlTcGVlZCAqIDUwKSkgZW5kOyBpZiBkaXJlY3Rpb24uWiB+PSAwIHRoZW4gcm9vdC5GbHlWZWxvY2l0eS5WZWxvY2l0eSA9IHJvb3QuRmx5VmVsb2NpdHkuVmVsb2NpdHkgLSBjYW1lcmEuQ0ZyYW1lLkxvb2tWZWN0b3IgKiAoZGlyZWN0aW9uLlogKiAoU2V0dGluZ3MuRmx5U3BlZWQgKiA1MCkpIGVuZCBlbmQpKQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gVG9nZ2xlTm9jbGlwKGVuYWJsZWQpCiAgICAgICAgSXNOb2NsaXBFbmFibGVkID0gZW5hYmxlZAogICAgICAgIHNhdmVGZWF0dXJlU3RhdGVzKCkKICAgICAgICBpZiBlbmFibGVkIHRoZW4gdGFzay5zcGF3bihmdW5jdGlvbigpIHdoaWxlIElzTm9jbGlwRW5hYmxlZCBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGRvIGZvciBfLCBwYXJ0IGluIHBhaXJzKExvY2FsUGxheWVyLkNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbyBpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSBhbmQgcGFydC5DYW5Db2xsaWRlIHRoZW4gcGFydC5DYW5Db2xsaWRlID0gZmFsc2UgZW5kIGVuZDsgdGFzay53YWl0KDAuMSkgZW5kOyBpZiBMb2NhbFBsYXllci5DaGFyYWN0ZXIgdGhlbiBmb3IgXywgcGFydCBpbiBwYWlycyhMb2NhbFBsYXllci5DaGFyYWN0ZXI6R2V0RGVzY2VuZGFudHMoKSkgZG8gaWYgcGFydDpJc0EoIkJhc2VQYXJ0IikgdGhlbiBwYXJ0LkNhbkNvbGxpZGUgPSB0cnVlIGVuZCBlbmQgZW5kIGVuZCkgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBhcHBseUdvZE1vZGUoY2hhcmFjdGVyKQogICAgICAgIGlmIG5vdCBjaGFyYWN0ZXIgdGhlbiByZXR1cm4gZW5kOyBsb2NhbCBodW1hbm9pZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIik7IGlmIG5vdCBodW1hbm9pZCB0aGVuIHJldHVybiBlbmQ7IGlmIGdvZE1vZGVDb25uZWN0aW9uIHRoZW4gZ29kTW9kZUNvbm5lY3Rpb246RGlzY29ubmVjdCgpOyBnb2RNb2RlQ29ubmVjdGlvbiA9IG5pbCBlbmQKICAgICAgICBnb2RNb2RlQ29ubmVjdGlvbiA9IGh1bWFub2lkLkhlYWx0aENoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihuZXdIZWFsdGgpIGlmIG5ld0hlYWx0aCA8PSAwIGFuZCBJc0dvZE1vZGVFbmFibGVkIHRoZW4gaHVtYW5vaWQuSGVhbHRoID0gaHVtYW5vaWQuTWF4SGVhbHRoIGVuZCBlbmQpCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBUb2dnbGVHb2RNb2RlKGVuYWJsZWQpCiAgICAgICAgSXNHb2RNb2RlRW5hYmxlZCA9IGVuYWJsZWQ7IHNhdmVGZWF0dXJlU3RhdGVzKCk7IGlmIGVuYWJsZWQgdGhlbiBpZiBMb2NhbFBsYXllci5DaGFyYWN0ZXIgdGhlbiBhcHBseUdvZE1vZGUoTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyKSBlbmQgZWxzZWlmIGdvZE1vZGVDb25uZWN0aW9uIHRoZW4gZ29kTW9kZUNvbm5lY3Rpb246RGlzY29ubmVjdCgpOyBnb2RNb2RlQ29ubmVjdGlvbiA9IG5pbCBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIFRvZ2dsZVdhbGtTcGVlZChlbmFibGVkKQogICAgICAgIElzV2Fsa1NwZWVkRW5hYmxlZCA9IGVuYWJsZWQ7IHNhdmVGZWF0dXJlU3RhdGVzKCk7IGlmIExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKSB0aGVuIExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5XYWxrU3BlZWQgPSBlbmFibGVkIGFuZCBTZXR0aW5ncy5XYWxrU3BlZWQgb3IgT3JpZ2luYWxXYWxrU3BlZWQgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBDcmVhdGVUb3VjaEZsaW5nR1VJKCkKICAgICAgICBpZiB0b3VjaEZsaW5nR3VpIGFuZCB0b3VjaEZsaW5nR3VpLlBhcmVudCB0aGVuIHJldHVybiBlbmQ7IGxvY2FsIEZsaW5nU2NyZWVuR3VpID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKTsgRmxpbmdTY3JlZW5HdWkuUGFyZW50ID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJQbGF5ZXJHdWkiKTsgRmxpbmdTY3JlZW5HdWkuWkluZGV4QmVoYXZpb3IgPSBFbnVtLlpJbmRleEJlaGF2aW9yLlNpYmxpbmc7IEZsaW5nU2NyZWVuR3VpLlJlc2V0T25TcGF3biA9IGZhbHNlOyB0b3VjaEZsaW5nR3VpID0gRmxpbmdTY3JlZW5HdWkKICAgICAgICBsb2NhbCBGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBGbGluZ1NjcmVlbkd1aSk7IEZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxNzAsIDIwMCwgMjU1KTsgRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuMzsgRnJhbWUuQm9yZGVyU2l6ZVBpeGVsID0gMDsgCiAgICAgICAgRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtNDUsIDAsIDIwKTsgCiAgICAgICAgaWYgbG9hZGVkR3VpUG9zaXRpb25zIGFuZCBsb2FkZWRHdWlQb3NpdGlvbnMuRmxpbmdGcmFtZSB0aGVuCiAgICAgICAgICAgIGxvY2FsIHBvc0RhdGEgPSBsb2FkZWRHdWlQb3NpdGlvbnMuRmxpbmdGcmFtZQogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpIEZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KHBvc0RhdGEuWFNjYWxlLCBwb3NEYXRhLlhPZmZzZXQsIHBvc0RhdGEuWVNjYWxlLCBwb3NEYXRhLllPZmZzZXQpIGVuZCkKICAgICAgICBlbmQKICAgICAgICBGcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDkwLCAwLCA1Nik7IGxvY2FsIEZyYW1lVUlDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRnJhbWUpOyBGcmFtZVVJQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDYpOyBsb2NhbCBGcmFtZVVJU3Ryb2tlID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIEZyYW1lKTsgRnJhbWVVSVN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDAsIDEwMCwgMjU1KTsgRnJhbWVVSVN0cm9rZS5UaGlja25lc3MgPSAxLjU7IEZyYW1lVUlTdHJva2UuVHJhbnNwYXJlbmN5ID0gMC4yCiAgICAgICAgbG9jYWwgVGl0bGVCYXIgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBGcmFtZSk7IFRpdGxlQmFyLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxNDAsIDE3MCwgMjM1KTsgVGl0bGVCYXIuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNDsgVGl0bGVCYXIuQm9yZGVyU2l6ZVBpeGVsID0gMDsgVGl0bGVCYXIuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAxOCk7IFRpdGxlQmFyLlRleHQgPSAiIjsgVGl0bGVCYXIuQXV0b0J1dHRvbkNvbG9yID0gZmFsc2UKICAgICAgICBNYWtlRHJhZ2dhYmxlKEZyYW1lLCBUaXRsZUJhciwgZnVuY3Rpb24oKSByZXR1cm4gdHJ1ZSBlbmQsIG5pbCkKICAgICAgICAKICAgICAgICBsb2NhbCBUaXRsZUxhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBUaXRsZUJhcik7IFRpdGxlTGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEuMDsgVGl0bGVMYWJlbC5TaXplID0gVURpbTIubmV3KDEsIC0yMCwgMSwgMCk7IFRpdGxlTGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMCwgMCk7IFRpdGxlTGFiZWwuRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZDsgVGl0bGVMYWJlbC5UZXh0ID0gIlRvdWNoIEZsaW5nIjsgVGl0bGVMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7IFRpdGxlTGFiZWwuVGV4dFNpemUgPSAxMTsgVGl0bGVMYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdAogICAgICAgIGxvY2FsIE9uT2ZmQnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRnJhbWUpOyBPbk9mZkJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMTIwLCAyNTUpOyBPbk9mZkJ1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwOyBPbk9mZkJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIC0zMCwgMCwgMjUpOyBPbk9mZkJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDYwLCAwLCAyMik7IE9uT2ZmQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQ7IE9uT2ZmQnV0dG9uLlRleHQgPSAiT0ZGIjsgT25PZmZCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOyBPbk9mZkJ1dHRvbi5UZXh0U2l6ZSA9IDE0OyBsb2NhbCBPbk9mZkJ1dHRvbkNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBPbk9mZkJ1dHRvbik7IE9uT2ZmQnV0dG9uQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDUpOyBsb2NhbCBPbk9mZkJ1dHRvbkdyYWRpZW50ID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgT25PZmZCdXR0b24pOyBPbk9mZkJ1dHRvbkdyYWRpZW50LkNvbG9yID0gQ29sb3JTZXF1ZW5jZS5uZXcoQ29sb3IzLmZyb21SR0IoMTAwLCAxODAsIDI1NSksIENvbG9yMy5mcm9tUkdCKDgwLCAxNTAsIDI1NSkpOyBPbk9mZkJ1dHRvbkdyYWRpZW50LlJvdGF0aW9uID0gOTAKICAgICAgICBsb2NhbCBDbG9zZUJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIFRpdGxlQmFyKTsgQ2xvc2VCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAxNiwgMCwgMTYpOyBDbG9zZUJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMTgsIDAuNSwgLTgpOyBDbG9zZUJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAwLCA1MCwgNTApOyBDbG9zZUJ1dHRvbi5UZXh0ID0gIlgiOyBDbG9zZUJ1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7IENsb3NlQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQ7IENsb3NlQnV0dG9uLlRleHRTaXplID0gMTE7IGxvY2FsIGNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBDbG9zZUJ1dHRvbik7IGNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygxLCAwKQogICAgICAgIGxvY2FsIGhpZGRlbmZsaW5nLCBmbGluZ1RocmVhZCA9IGZhbHNlLCBuaWwKICAgICAgICBsb2NhbCBmdW5jdGlvbiBmbGluZygpIHdoaWxlIGhpZGRlbmZsaW5nIGRvIGxvY2FsIGhycCA9IFBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBQbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpOyBpZiBocnAgdGhlbiBsb2NhbCB2ZWwgPSBocnAuVmVsb2NpdHk7IGhycC5WZWxvY2l0eSA9IHZlbCAqIDEwMDAwICsgVmVjdG9yMy5uZXcoMCwgMTAwMDAsIDApOyBSdW5TZXJ2aWNlLlJlbmRlclN0ZXBwZWQ6V2FpdCgpOyBpZiBocnAgYW5kIGhycC5QYXJlbnQgdGhlbiBocnAuVmVsb2NpdHkgPSB2ZWwgZW5kOyBSdW5TZXJ2aWNlLlN0ZXBwZWQ6V2FpdCgpOyBpZiBocnAgYW5kIGhycC5QYXJlbnQgdGhlbiBocnAuVmVsb2NpdHkgPSB2ZWwgKyBWZWN0b3IzLm5ldygwLCAwLjEgKiAobWF0aC5yYW5kb20oMCwgMSkgPT0gMCBhbmQgLTEgb3IgMSksIDApIGVuZCBlbmQ7IFJ1blNlcnZpY2UuSGVhcnRiZWF0OldhaXQoKSBlbmQgZW5kCiAgICAgICAgT25PZmZCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpIGhpZGRlbmZsaW5nID0gbm90IGhpZGRlbmZsaW5nOyBPbk9mZkJ1dHRvbi5UZXh0ID0gaGlkZGVuZmxpbmcgYW5kICJPTiIgb3IgIk9GRiI7IGlmIGhpZGRlbmZsaW5nIHRoZW4gaWYgbm90IGZsaW5nVGhyZWFkIG9yIGNvcm91dGluZS5zdGF0dXMoZmxpbmdUaHJlYWQpID09ICJkZWFkIiB0aGVuIGZsaW5nVGhyZWFkID0gY29yb3V0aW5lLmNyZWF0ZShmbGluZyk7IGNvcm91dGluZS5yZXN1bWUoZmxpbmdUaHJlYWQpIGVuZCBlbmQgZW5kKQogICAgICAgIENsb3NlQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKSBoaWRkZW5mbGluZyA9IGZhbHNlOyBGbGluZ1NjcmVlbkd1aTpEZXN0cm95KCk7IHRvdWNoRmxpbmdHdWkgPSBuaWwgZW5kKQogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFRvZ2dsZUtpbGxBdXJhKGVuYWJsZWQpCiAgICAgICAgSXNLaWxsQXVyYUVuYWJsZWQgPSBlbmFibGVkCiAgICAgICAgc2F2ZUZlYXR1cmVTdGF0ZXMoKQogICAgICAgIGlmIGVuYWJsZWQgdGhlbiBLaWxsQXVyYUNvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkgbG9jYWwgcm9vdCA9IExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7IGlmIG5vdCByb290IHRoZW4gcmV0dXJuIGVuZDsgZm9yIF8sIG5wYyBpbiBwYWlycyhXb3Jrc3BhY2U6R2V0RGVzY2VuZGFudHMoKSkgZG8gaWYgbnBjOklzQSgiTW9kZWwiKSBhbmQgbnBjIH49IExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgbnBjOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKSBhbmQgbnBjOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgdGhlbiBsb2NhbCBodW1hbm9pZCA9IG5wYy5IdW1hbm9pZDsgaWYgaHVtYW5vaWQuSGVhbHRoID4gMCBhbmQgKG5wYy5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uIC0gcm9vdC5Qb3NpdGlvbikuTWFnbml0dWRlIDw9IFNldHRpbmdzLktpbGxBdXJhUmFkaXVzIHRoZW4gaHVtYW5vaWQ6VGFrZURhbWFnZShTZXR0aW5ncy5LaWxsQXVyYURhbWFnZSkgZW5kIGVuZCBlbmQgZW5kKQogICAgICAgIGVsc2VpZiBLaWxsQXVyYUNvbm5lY3Rpb24gdGhlbiBLaWxsQXVyYUNvbm5lY3Rpb246RGlzY29ubmVjdCgpOyBLaWxsQXVyYUNvbm5lY3Rpb24gPSBuaWwgZW5kCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gVG9nZ2xlQWltYm90KGVuYWJsZWQpCiAgICAgICAgSXNBaW1ib3RFbmFibGVkID0gZW5hYmxlZAogICAgICAgIHNhdmVGZWF0dXJlU3RhdGVzKCkKICAgICAgICBpZiBlbmFibGVkIHRoZW4gQ3JlYXRlRk9WQ2lyY2xlKCk7IEFpbWJvdENvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpIGxvY2FsIGNhbWVyYSA9IFdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhOyBsb2NhbCByb290ID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKTsgaWYgbm90IChyb290IGFuZCBjYW1lcmEpIHRoZW4gcmV0dXJuIGVuZDsgbG9jYWwgbW91c2VQb3MgPSBVc2VySW5wdXRTZXJ2aWNlOkdldE1vdXNlTG9jYXRpb24oKTsgbG9jYWwgY2xvc2VzdE5QQywgY2xvc2VzdERpc3RhbmNlID0gbmlsLCBTZXR0aW5ncy5BaW1ib3RGT1Y7IGZvciBfLCBucGMgaW4gcGFpcnMoV29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvIGlmIG5wYzpJc0EoIk1vZGVsIikgYW5kIG5wYyB+PSBMb2NhbFBsYXllci5DaGFyYWN0ZXIgYW5kIG5wYzpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikgYW5kIG5wYzpGaW5kRmlyc3RDaGlsZChTZXR0aW5ncy5BaW1ib3RQYXJ0KSB0aGVuIGxvY2FsIGh1bWFub2lkID0gbnBjLkh1bWFub2lkOyBpZiBodW1hbm9pZC5IZWFsdGggPiAwIHRoZW4gbG9jYWwgc2NyZWVuUG9zLCBvblNjcmVlbiA9IGNhbWVyYTpXb3JsZFRvVmlld3BvcnRQb2ludChucGNbU2V0dGluZ3MuQWltYm90UGFydF0uUG9zaXRpb24pOyBpZiBvblNjcmVlbiB0aGVuIGxvY2FsIGRpc3RhbmNlID0gKG1vdXNlUG9zIC0gVmVjdG9yMi5uZXcoc2NyZWVuUG9zLlgsIHNjcmVlblBvcy5ZKSkuTWFnbml0dWRlOyBpZiBkaXN0YW5jZSA8PSBjbG9zZXN0RGlzdGFuY2UgdGhlbiBjbG9zZXN0RGlzdGFuY2UsIGNsb3Nlc3ROUEMgPSBkaXN0YW5jZSwgbnBjIGVuZCBlbmQgZW5kIGVuZCBlbmQ7IEFpbWJvdFRhcmdldCA9IGNsb3Nlc3ROUEM7IGlmIEFpbWJvdFRhcmdldCBhbmQgQWltYm90VGFyZ2V0OkZpbmRGaXJzdENoaWxkKFNldHRpbmdzLkFpbWJvdFBhcnQpIHRoZW4gY2FtZXJhLkNGcmFtZSA9IENGcmFtZS5uZXcoY2FtZXJhLkNGcmFtZS5Qb3NpdGlvbiwgQWltYm90VGFyZ2V0W1NldHRpbmdzLkFpbWJvdFBhcnRdLlBvc2l0aW9uKTsgQWltYm90VGFyZ2V0Lkh1bWFub2lkOlRha2VEYW1hZ2UoU2V0dGluZ3MuS2lsbEF1cmFEYW1hZ2UpIGVuZDsgaWYgRk9WUGFydCB0aGVuIEZPVlBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyhyb290LlBvc2l0aW9uICsgVmVjdG9yMy5uZXcoMCwgMiwgMCkpOyBGT1ZQYXJ0LkZPVkd1aS5FbmFibGVkID0gdHJ1ZSBlbmQgZW5kKQogICAgICAgIGVsc2UgaWYgQWltYm90Q29ubmVjdGlvbiB0aGVuIEFpbWJvdENvbm5lY3Rpb246RGlzY29ubmVjdCgpOyBBaW1ib3RDb25uZWN0aW9uID0gbmlsIGVuZDsgQWltYm90VGFyZ2V0ID0gbmlsOyBpZiBGT1ZQYXJ0IHRoZW4gRk9WUGFydDpEZXN0cm95KCk7IEZPVlBhcnQgPSBuaWwgZW5kIGVuZAogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIHByb3RlY3RfY2hhcmFjdGVyKCkKICAgICAgICBsb2NhbCByb290ID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKTsgaWYgcm9vdCBhbmQgYW50aWZsaW5nX2VuYWJsZWQgdGhlbiBpZiByb290LlZlbG9jaXR5Lk1hZ25pdHVkZSA8PSBhbnRpZmxpbmdfdmVsb2NpdHlfdGhyZXNob2xkIHRoZW4gYW50aWZsaW5nX2xhc3Rfc2FmZV9jZnJhbWUgPSByb290LkNGcmFtZSBlbmQ7IGlmIHJvb3QuVmVsb2NpdHkuTWFnbml0dWRlID4gYW50aWZsaW5nX3ZlbG9jaXR5X3RocmVzaG9sZCBhbmQgYW50aWZsaW5nX2xhc3Rfc2FmZV9jZnJhbWUgdGhlbiByb290LlZlbG9jaXR5LCByb290LkFzc2VtYmx5TGluZWFyVmVsb2NpdHksIHJvb3QuQXNzZW1ibHlBbmd1bGFyVmVsb2NpdHksIHJvb3QuQ0ZyYW1lID0gVmVjdG9yMy5uZXcoKSwgVmVjdG9yMy5uZXcoKSwgVmVjdG9yMy5uZXcoKSwgYW50aWZsaW5nX2xhc3Rfc2FmZV9jZnJhbWUgZW5kOyBpZiByb290LkFzc2VtYmx5QW5ndWxhclZlbG9jaXR5Lk1hZ25pdHVkZSA+IGFudGlmbGluZ19hbmd1bGFyX3RocmVzaG9sZCB0aGVuIHJvb3QuQXNzZW1ibHlBbmd1bGFyVmVsb2NpdHkgPSBWZWN0b3IzLm5ldygpIGVuZDsgaWYgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkOkdldFN0YXRlKCkgPT0gRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5GYWxsaW5nRG93biB0aGVuIExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZDpDaGFuZ2VTdGF0ZShFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkdldHRpbmdVcCkgZW5kIGVuZAogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFRvZ2dsZUFudGlGbGluZyhlbmFibGVkKQogICAgICAgIGFudGlmbGluZ19lbmFibGVkID0gZW5hYmxlZDsgc2F2ZUZlYXR1cmVTdGF0ZXMoKTsgaWYgZW5hYmxlZCBhbmQgbm90IGFudGlmbGluZ19jb25uZWN0aW9uIHRoZW4gYW50aWZsaW5nX2Nvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KHByb3RlY3RfY2hhcmFjdGVyKSBlbHNlaWYgbm90IGVuYWJsZWQgYW5kIGFudGlmbGluZ19jb25uZWN0aW9uIHRoZW4gYW50aWZsaW5nX2Nvbm5lY3Rpb246RGlzY29ubmVjdCgpOyBhbnRpZmxpbmdfY29ubmVjdGlvbiA9IG5pbCBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIFRvZ2dsZUFudGlMYWcoZW5hYmxlZCkKICAgICAgICBJc0FudGlMYWdFbmFibGVkID0gZW5hYmxlZAogICAgICAgIHNhdmVGZWF0dXJlU3RhdGVzKCkKICAgICAgICBpZiBlbmFibGVkIHRoZW4KICAgICAgICAgICAgTGlnaHRpbmcuR2xvYmFsU2hhZG93cyA9IGZhbHNlOyBMaWdodGluZy5Gb2dFbmQgPSA5OTk5OTkKICAgICAgICAgICAgaWYgc2V0dGluZ3MgdGhlbiBwY2FsbChmdW5jdGlvbigpIHNldHRpbmdzKCkuUmVuZGVyaW5nLlF1YWxpdHlMZXZlbCA9ICJMZXZlbDAxIiBlbmQpIGVuZAogICAgICAgICAgICBmb3IgXywgdiBpbiBwYWlycyhXb3Jrc3BhY2U6R2V0RGVzY2VuZGFudHMoKSkgZG8gaWYgdjpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIG9yIHY6SXNBKCJFeHBsb3Npb24iKSBvciB2OklzQSgiRmlyZSIpIG9yIHY6SXNBKCJTbW9rZSIpIG9yIHY6SXNBKCJTcGFya2xlcyIpIHRoZW4gdi5FbmFibGVkID0gZmFsc2UgZW5kIGVuZAogICAgICAgICAgICBmb3IgXywgdiBpbiBwYWlycyhMaWdodGluZzpHZXRDaGlsZHJlbigpKSBkbyBpZiB2OklzQSgiQmx1ckVmZmVjdCIpIG9yIHY6SXNBKCJTdW5SYXlzRWZmZWN0Iikgb3IgdjpJc0EoIkNvbG9yQ29ycmVjdGlvbkVmZmVjdCIpIG9yIHY6SXNBKCJCbG9vbUVmZmVjdCIpIG9yIHY6SXNBKCJEZXB0aE9mRmllbGRFZmZlY3QiKSB0aGVuIHYuRW5hYmxlZCA9IGZhbHNlIGVuZCBlbmQKICAgICAgICAgICAgYW50aUxhZ0Nvbm5lY3Rpb24gPSBXb3Jrc3BhY2UuRGVzY2VuZGFudEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oZGVzY2VuZGFudCkgaWYgZGVzY2VuZGFudDpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIG9yIGRlc2NlbmRhbnQ6SXNBKCJFeHBsb3Npb24iKSBvciBkZXNjZW5kYW50OklzQSgiRmlyZSIpIG9yIGRlc2NlbmRhbnQ6SXNBKCJTbW9rZSIpIG9yIGRlc2NlbmRhbnQ6SXNBKCJTcGFya2xlcyIpIHRoZW4gdGFzay53YWl0KCk7IGRlc2NlbmRhbnQuRW5hYmxlZCA9IGZhbHNlIGVuZCBlbmQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBpZiBhbnRpTGFnQ29ubmVjdGlvbiB0aGVuIGFudGlMYWdDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKTsgYW50aUxhZ0Nvbm5lY3Rpb24gPSBuaWwgZW5kCiAgICAgICAgICAgIExpZ2h0aW5nLkdsb2JhbFNoYWRvd3MgPSB0cnVlCiAgICAgICAgICAgIGlmIHNldHRpbmdzIHRoZW4gcGNhbGwoZnVuY3Rpb24oKSBzZXR0aW5ncygpLlJlbmRlcmluZy5RdWFsaXR5TGV2ZWwgPSAiQXV0b21hdGljIiBlbmQpIGVuZAogICAgICAgICAgICBmb3IgXywgdiBpbiBwYWlycyhXb3Jrc3BhY2U6R2V0RGVzY2VuZGFudHMoKSkgZG8gaWYgdjpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIG9yIHY6SXNBKCJFeHBsb3Npb24iKSBvciB2OklzQSgiRmlyZSIpIG9yIHY6SXNBKCJTbW9rZSIpIG9yIHY6SXNBKCJTcGFya2xlcyIpIHRoZW4gdi5FbmFibGVkID0gdHJ1ZSBlbmQgZW5kCiAgICAgICAgICAgIGZvciBfLCB2IGluIHBhaXJzKExpZ2h0aW5nOkdldENoaWxkcmVuKCkpIGRvIGlmIHY6SXNBKCJCbHVyRWZmZWN0Iikgb3IgdjpJc0EoIlN1blJheXNFZmZlY3QiKSBvciB2OklzQSgiQ29sb3JDb3JyZWN0aW9uRWZmZWN0Iikgb3IgdjpJc0EoIkJsb29tRWZmZWN0Iikgb3IgdjpJc0EoIkRlcHRoT2ZGaWVsZEVmZmVjdCIpIHRoZW4gdi5FbmFibGVkID0gdHJ1ZSBlbmQgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLS0gPT0gQkFHSUFOIEZJVFVSIEJPT1NUIEZQUyAoSU5URUdSQVNJKSAgICAgICAgICAgICAgICAgICAgICAgICAgID09CiAgICAtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKICAgIGxvY2FsIGZ1bmN0aW9uIHN0b3JlQm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzKCkKICAgICAgICBib29zdEZwc09yaWdpbmFsU2V0dGluZ3MgPSB7fQogICAgICAgIAogICAgICAgIGxvY2FsIHRlcnJhaW4gPSB3b3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCdUZXJyYWluJykKICAgICAgICBpZiB0ZXJyYWluIHRoZW4KICAgICAgICAgICAgYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLldhdGVyV2F2ZVNpemUgPSB0ZXJyYWluLldhdGVyV2F2ZVNpemUKICAgICAgICAgICAgYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLldhdGVyV2F2ZVNwZWVkID0gdGVycmFpbi5XYXRlcldhdmVTcGVlZAogICAgICAgICAgICBib29zdEZwc09yaWdpbmFsU2V0dGluZ3MuV2F0ZXJSZWZsZWN0YW5jZSA9IHRlcnJhaW4uV2F0ZXJSZWZsZWN0YW5jZQogICAgICAgICAgICBib29zdEZwc09yaWdpbmFsU2V0dGluZ3MuV2F0ZXJUcmFuc3BhcmVuY3kgPSB0ZXJyYWluLldhdGVyVHJhbnNwYXJlbmN5CiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLkdsb2JhbFNoYWRvd3MgPSBMaWdodGluZy5HbG9iYWxTaGFkb3dzCiAgICAgICAgYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLkZvZ0VuZCA9IExpZ2h0aW5nLkZvZ0VuZAogICAgICAgIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5Gb2dTdGFydCA9IExpZ2h0aW5nLkZvZ1N0YXJ0CiAgICAgICAgCiAgICAgICAgaWYgc2V0dGluZ3MgYW5kIHNldHRpbmdzKCkgYW5kIHNldHRpbmdzKCkuUmVuZGVyaW5nIHRoZW4KICAgICAgICAgICAgIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5RdWFsaXR5TGV2ZWwgPSBzZXR0aW5ncygpLlJlbmRlcmluZy5RdWFsaXR5TGV2ZWwKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBib29zdEZwc09yaWdpbmFsU2V0dGluZ3MuUGFydFByb3BlcnRpZXMgPSB7fQogICAgICAgIGZvciBfLCBkZXNjZW5kYW50IGluIHBhaXJzKGdhbWU6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgZGVzY2VuZGFudDpJc0EoIkJhc2VQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgICAgIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5QYXJ0UHJvcGVydGllc1tkZXNjZW5kYW50XSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWwgPSBkZXNjZW5kYW50Lk1hdGVyaWFsLAogICAgICAgICAgICAgICAgICAgICAgICBSZWZsZWN0YW5jZSA9IGRlc2NlbmRhbnQuUmVmbGVjdGFuY2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYgZGVzY2VuZGFudDpJc0EoIkRlY2FsIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5QYXJ0UHJvcGVydGllc1tkZXNjZW5kYW50XSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNwYXJlbmN5ID0gZGVzY2VuZGFudC5UcmFuc3BhcmVuY3kKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlaWYgZGVzY2VuZGFudDpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIG9yIGRlc2NlbmRhbnQ6SXNBKCJUcmFpbCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLlBhcnRQcm9wZXJ0aWVzW2Rlc2NlbmRhbnRdID0gewogICAgICAgICAgICAgICAgICAgICAgICBMaWZldGltZSA9IGRlc2NlbmRhbnQuTGlmZXRpbWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5Qb3N0RWZmZWN0cyA9IHt9CiAgICAgICAgZm9yIF8sIGVmZmVjdCBpbiBwYWlycyhMaWdodGluZzpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICBpZiBlZmZlY3Q6SXNBKCJQb3N0RWZmZWN0IikgdGhlbgogICAgICAgICAgICAgICAgYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLlBvc3RFZmZlY3RzW2VmZmVjdF0gPSBlZmZlY3QuRW5hYmxlZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGVuYWJsZUJvb3N0RnBzKCkKICAgICAgICBzdG9yZUJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncygpCiAgICAgICAgCiAgICAgICAgbG9jYWwgdGVycmFpbiA9IHdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoJ1RlcnJhaW4nKQogICAgICAgIGlmIHRlcnJhaW4gdGhlbgogICAgICAgICAgICB0ZXJyYWluLldhdGVyV2F2ZVNpemUgPSAwCiAgICAgICAgICAgIHRlcnJhaW4uV2F0ZXJXYXZlU3BlZWQgPSAwCiAgICAgICAgICAgIHRlcnJhaW4uV2F0ZXJSZWZsZWN0YW5jZSA9IDAKICAgICAgICAgICAgdGVycmFpbi5XYXRlclRyYW5zcGFyZW5jeSA9IDEKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBMaWdodGluZy5HbG9iYWxTaGFkb3dzID0gZmFsc2UKICAgICAgICBMaWdodGluZy5Gb2dFbmQgPSA5ZTkKICAgICAgICBMaWdodGluZy5Gb2dTdGFydCA9IDllOQogICAgICAgIAogICAgICAgIGlmIHNldHRpbmdzIGFuZCBzZXR0aW5ncygpIGFuZCBzZXR0aW5ncygpLlJlbmRlcmluZyB0aGVuCiAgICAgICAgICAgIHNldHRpbmdzKCkuUmVuZGVyaW5nLlF1YWxpdHlMZXZlbCA9IDEKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBmb3IgXywgZGVzY2VuZGFudCBpbiBwYWlycyhnYW1lOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGlmIGRlc2NlbmRhbnQ6SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBkZXNjZW5kYW50Lk1hdGVyaWFsID0gRW51bS5NYXRlcmlhbC5QbGFzdGljCiAgICAgICAgICAgICAgICAgICAgZGVzY2VuZGFudC5SZWZsZWN0YW5jZSA9IDAKICAgICAgICAgICAgICAgIGVsc2VpZiBkZXNjZW5kYW50OklzQSgiRGVjYWwiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZGVzY2VuZGFudC5UcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgICAgICAgICBlbHNlaWYgZGVzY2VuZGFudDpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIG9yIGRlc2NlbmRhbnQ6SXNBKCJUcmFpbCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBkZXNjZW5kYW50LkxpZmV0aW1lID0gTnVtYmVyUmFuZ2UubmV3KDApCiAgICAgICAgICAgICAgICBlbHNlaWYgZGVzY2VuZGFudDpJc0EoIlBvc3RFZmZlY3QiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZGVzY2VuZGFudC5FbmFibGVkID0gZmFsc2UKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgZW5kCgogICAgICAgIGlmIGJvb3N0RnBzRGVzY2VuZGFudENvbm5lY3Rpb24gdGhlbiBib29zdEZwc0Rlc2NlbmRhbnRDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKSBlbmQKICAgICAgICBib29zdEZwc0Rlc2NlbmRhbnRDb25uZWN0aW9uID0gd29ya3NwYWNlLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGNoaWxkKQogICAgICAgICAgICBpZiBjaGlsZDpJc0EoJ0ZvcmNlRmllbGQnKSBvciBjaGlsZDpJc0EoJ1NwYXJrbGVzJykgb3IgY2hpbGQ6SXNBKCdTbW9rZScpIG9yIGNoaWxkOklzQSgnRmlyZScpIG9yIGNoaWxkOklzQSgnQmVhbScpIHRoZW4KICAgICAgICAgICAgICAgIHRhc2suZGVmZXIoZnVuY3Rpb24oKSBjaGlsZDpEZXN0cm95KCkgZW5kKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBkaXNhYmxlQm9vc3RGcHMoKQogICAgICAgIGlmIG5vdCBuZXh0KGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncykgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgdGVycmFpbiA9IHdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoJ1RlcnJhaW4nKQogICAgICAgIGlmIHRlcnJhaW4gYW5kIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5XYXRlcldhdmVTaXplIHRoZW4KICAgICAgICAgICAgdGVycmFpbi5XYXRlcldhdmVTaXplID0gYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLldhdGVyV2F2ZVNpemUKICAgICAgICAgICAgdGVycmFpbi5XYXRlcldhdmVTcGVlZCA9IGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5XYXRlcldhdmVTcGVlZAogICAgICAgICAgICB0ZXJyYWluLldhdGVyUmVmbGVjdGFuY2UgPSBib29zdEZwc09yaWdpbmFsU2V0dGluZ3MuV2F0ZXJSZWZsZWN0YW5jZQogICAgICAgICAgICB0ZXJyYWluLldhdGVyVHJhbnNwYXJlbmN5ID0gYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLldhdGVyVHJhbnNwYXJlbmN5CiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgTGlnaHRpbmcuR2xvYmFsU2hhZG93cyA9IGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5HbG9iYWxTaGFkb3dzCiAgICAgICAgTGlnaHRpbmcuRm9nRW5kID0gYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLkZvZ0VuZAogICAgICAgIExpZ2h0aW5nLkZvZ1N0YXJ0ID0gYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLkZvZ1N0YXJ0CiAgICAgICAgCiAgICAgICAgaWYgc2V0dGluZ3MgYW5kIHNldHRpbmdzKCkgYW5kIHNldHRpbmdzKCkuUmVuZGVyaW5nIGFuZCBib29zdEZwc09yaWdpbmFsU2V0dGluZ3MuUXVhbGl0eUxldmVsIHRoZW4KICAgICAgICAgICAgIHNldHRpbmdzKCkuUmVuZGVyaW5nLlF1YWxpdHlMZXZlbCA9IGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5RdWFsaXR5TGV2ZWwKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBmb3IgZWZmZWN0LCB3YXNFbmFibGVkIGluIHBhaXJzKGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncy5Qb3N0RWZmZWN0cykgZG8KICAgICAgICAgICAgaWYgZWZmZWN0IGFuZCBlZmZlY3QuUGFyZW50IHRoZW4KICAgICAgICAgICAgICAgIGVmZmVjdC5FbmFibGVkID0gd2FzRW5hYmxlZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBpZiBib29zdEZwc09yaWdpbmFsU2V0dGluZ3MuUGFydFByb3BlcnRpZXMgdGhlbgogICAgICAgICAgICBmb3IgaW5zdGFuY2UsIHByb3BlcnRpZXMgaW4gcGFpcnMoYm9vc3RGcHNPcmlnaW5hbFNldHRpbmdzLlBhcnRQcm9wZXJ0aWVzKSBkbwogICAgICAgICAgICAgICAgaWYgaW5zdGFuY2UgYW5kIGluc3RhbmNlLlBhcmVudCB0aGVuCiAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcHJvcE5hbWUsIHByb3BWYWx1ZSBpbiBwYWlycyhwcm9wZXJ0aWVzKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gcHJvcFZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICBpZiBib29zdEZwc0Rlc2NlbmRhbnRDb25uZWN0aW9uIHRoZW4KICAgICAgICAgICAgYm9vc3RGcHNEZXNjZW5kYW50Q29ubmVjdGlvbjpEaXNjb25uZWN0KCkKICAgICAgICAgICAgYm9vc3RGcHNEZXNjZW5kYW50Q29ubmVjdGlvbiA9IG5pbAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGJvb3N0RnBzT3JpZ2luYWxTZXR0aW5ncyA9IHt9CiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBUb2dnbGVCb29zdEZQUyhlbmFibGVkKQogICAgICAgIElzQm9vc3RGUFNFbmFibGVkID0gZW5hYmxlZAogICAgICAgIHNhdmVGZWF0dXJlU3RhdGVzKCkKICAgICAgICBpZiBlbmFibGVkIHRoZW4KICAgICAgICAgICAgZW5hYmxlQm9vc3RGcHMoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgZGlzYWJsZUJvb3N0RnBzKCkKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICAtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLS0gPT0gQkFHSUFOIEZJVFVSIFZJRVcgUExBWUVSIChQRVJCQUlLQU4pICAgICAgICAgICAgICAgICAgICAgICAgID09CiAgICAtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBjcmVhdGVTcGVjdGF0b3JHVUkoKQogICAgICAgIGlmIFNwZWN0YXRvckd1aSBhbmQgU3BlY3RhdG9yR3VpLlBhcmVudCB0aGVuIHJldHVybiBlbmQKICAgIAogICAgICAgIFNwZWN0YXRvckd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIikKICAgICAgICBTcGVjdGF0b3JHdWkuTmFtZSA9ICJBcmV4YW5zU3BlY3RhdG9yR1VJIgogICAgICAgIFNwZWN0YXRvckd1aS5QYXJlbnQgPSBDb3JlR3VpCiAgICAgICAgU3BlY3RhdG9yR3VpLlpJbmRleEJlaGF2aW9yID0gRW51bS5aSW5kZXhCZWhhdmlvci5TaWJsaW5nCiAgICAgICAgU3BlY3RhdG9yR3VpLlJlc2V0T25TcGF3biA9IGZhbHNlCiAgICAgICAgU3BlY3RhdG9yR3VpLkVuYWJsZWQgPSBmYWxzZQogICAgCiAgICAgICAgbG9jYWwgTWFpbkJhciA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQogICAgICAgIE1haW5CYXIuTmFtZSA9ICJNYWluQmFyIgogICAgICAgIE1haW5CYXIuU2l6ZSA9IFVEaW0yLm5ldygwLCAzMDAsIDAsIDQwKQogICAgICAgIE1haW5CYXIuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTUwLCAxLCAtNTApCiAgICAgICAgTWFpbkJhci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAsIDIwLCAyMCkKICAgICAgICBNYWluQmFyLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjMKICAgICAgICBNYWluQmFyLkJvcmRlclNpemVQaXhlbCA9IDAKICAgICAgICBNYWluQmFyLlBhcmVudCA9IFNwZWN0YXRvckd1aQogICAgCiAgICAgICAgbG9jYWwgVUlDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgTWFpbkJhcikKICAgICAgICBVSUNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA4KQogICAgICAgIGxvY2FsIFVJU3Ryb2tlID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIE1haW5CYXIpCiAgICAgICAgVUlTdHJva2UuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigwLCAxNTAsIDI1NSkKICAgICAgICBVSVN0cm9rZS5UaGlja25lc3MgPSAxCiAgICAgICAgVUlTdHJva2UuVHJhbnNwYXJlbmN5ID0gMC41CiAgICAKICAgICAgICBsb2NhbCBOaWNrbmFtZUxhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKICAgICAgICBOaWNrbmFtZUxhYmVsLk5hbWUgPSAiTmlja25hbWVMYWJlbCIKICAgICAgICBOaWNrbmFtZUxhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwgLTgwLCAxLCAwKQogICAgICAgIE5pY2tuYW1lTGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApCiAgICAgICAgTmlja25hbWVMYWJlbC5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQogICAgICAgIE5pY2tuYW1lTGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICBOaWNrbmFtZUxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgICAgICBOaWNrbmFtZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgIE5pY2tuYW1lTGFiZWwuVGV4dFNpemUgPSAxNgogICAgICAgIE5pY2tuYW1lTGFiZWwuVGV4dCA9ICJNZW5nYW1hdGk6IFBsYXllciIKICAgICAgICBOaWNrbmFtZUxhYmVsLkF1dG9CdXR0b25Db2xvciA9IGZhbHNlCiAgICAgICAgTmlja25hbWVMYWJlbC5QYXJlbnQgPSBNYWluQmFyCiAgICAgICAgTmlja25hbWVMYWJlbC5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgc3RvcFNwZWN0YXRlKCkKICAgICAgICBlbmQpCiAgICAKICAgICAgICBsb2NhbCBMZWZ0QnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKICAgICAgICBMZWZ0QnV0dG9uLk5hbWUgPSAiTGVmdEJ1dHRvbiIKICAgICAgICBMZWZ0QnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMzAsIDAsIDMwKQogICAgICAgIExlZnRCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMC41LCAtMTUpCiAgICAgICAgTGVmdEJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNTAsIDUwLCA1MCkKICAgICAgICBMZWZ0QnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgICAgICBMZWZ0QnV0dG9uLlRleHQgPSAiPCIKICAgICAgICBMZWZ0QnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgIExlZnRCdXR0b24uVGV4dFNpemUgPSAyMAogICAgICAgIExlZnRCdXR0b24uUGFyZW50ID0gTWFpbkJhcgogICAgICAgIGxvY2FsIExCQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIExlZnRCdXR0b24pOyBMQkNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA2KQogICAgCiAgICAgICAgbG9jYWwgUmlnaHRCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQogICAgICAgIFJpZ2h0QnV0dG9uLk5hbWUgPSAiUmlnaHRCdXR0b24iCiAgICAgICAgUmlnaHRCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAzMCwgMCwgMzApCiAgICAgICAgUmlnaHRCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTM1LCAwLjUsIC0xNSkKICAgICAgICBSaWdodEJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNTAsIDUwLCA1MCkKICAgICAgICBSaWdodEJ1dHRvbi5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnNCb2xkCiAgICAgICAgUmlnaHRCdXR0b24uVGV4dCA9ICI+IgogICAgICAgIFJpZ2h0QnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgIFJpZ2h0QnV0dG9uLlRleHRTaXplID0gMjAKICAgICAgICBSaWdodEJ1dHRvbi5QYXJlbnQgPSBNYWluQmFyCiAgICAgICAgbG9jYWwgUkJDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgUmlnaHRCdXR0b24pOyBSQkNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA2KQogICAgCiAgICAgICAgTGVmdEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkgY3ljbGVTcGVjdGF0ZSgtMSkgZW5kKQogICAgICAgIFJpZ2h0QnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKSBjeWNsZVNwZWN0YXRlKDEpIGVuZCkKICAgIGVuZAogICAgCiAgICBzdG9wU3BlY3RhdGUgPSBmdW5jdGlvbigpCiAgICAgICAgaWYgbm90IElzVmlld2luZ1BsYXllciB0aGVuIHJldHVybiBlbmQKICAgICAgICAKICAgICAgICBJc1ZpZXdpbmdQbGF5ZXIgPSBmYWxzZQogICAgICAgIGlmIHZpZXdpbmdQbGF5ZXJDb25uZWN0aW9uIHRoZW4KICAgICAgICAgICAgdmlld2luZ1BsYXllckNvbm5lY3Rpb246RGlzY29ubmVjdCgpCiAgICAgICAgICAgIHZpZXdpbmdQbGF5ZXJDb25uZWN0aW9uID0gbmlsCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgbG9jYWwgbG9jYWxDaGFyID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICBpZiBvcmlnaW5hbENhbWVyYVN1YmplY3QgYW5kIG9yaWdpbmFsQ2FtZXJhU3ViamVjdC5QYXJlbnQgdGhlbgogICAgICAgICAgICAgICAgV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhU3ViamVjdCA9IG9yaWdpbmFsQ2FtZXJhU3ViamVjdAogICAgICAgICAgICBlbHNlaWYgbG9jYWxDaGFyIGFuZCBsb2NhbENoYXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIHRoZW4KICAgICAgICAgICAgICAgIFdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVN1YmplY3QgPSBsb2NhbENoYXIuSHVtYW5vaWQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgICAgIG9yaWdpbmFsQ2FtZXJhU3ViamVjdCA9IG5pbAogICAgICAgIAogICAgICAgIGlmIGxvY2FsUGxheWVySXNIaWRkZW4gYW5kIGxvY2FsQ2hhciBhbmQgb3JpZ2luYWxQbGF5ZXJDRnJhbWUgdGhlbgogICAgICAgICAgICBpZiBsb2NhbENoYXIuUGFyZW50IH49IFdvcmtzcGFjZSB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbENoYXIuUGFyZW50ID0gV29ya3NwYWNlCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBsb2NhbENoYXI6U2V0UHJpbWFyeVBhcnRDRnJhbWUob3JpZ2luYWxQbGF5ZXJDRnJhbWUpCiAgICAgICAgZW5kCiAgICAgICAgbG9jYWxQbGF5ZXJJc0hpZGRlbiA9IGZhbHNlCiAgICAgICAgb3JpZ2luYWxQbGF5ZXJDRnJhbWUgPSBuaWwKICAgIAogICAgICAgIGlmIFNwZWN0YXRvckd1aSB0aGVuIFNwZWN0YXRvckd1aS5FbmFibGVkID0gZmFsc2UgZW5kCiAgICAgICAgCiAgICAgICAgY3VycmVudGx5Vmlld2VkUGxheWVyID0gbmlsCiAgICAgICAgaWYgdXBkYXRlUGxheWVyTGlzdCB0aGVuIHVwZGF0ZVBsYXllckxpc3QoKSBlbmQgCiAgICBlbmQKICAgIAogICAgc3RhcnRTcGVjdGF0ZSA9IGZ1bmN0aW9uKHRhcmdldFBsYXllcikKICAgICAgICBpZiBJc1ZpZXdpbmdQbGF5ZXIgYW5kIGN1cnJlbnRseVZpZXdlZFBsYXllciA9PSB0YXJnZXRQbGF5ZXIgdGhlbgogICAgICAgICAgICBzdG9wU3BlY3RhdGUoKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKICAgIAogICAgICAgIGlmIElzVmlld2luZ1BsYXllciB0aGVuCiAgICAgICAgICAgIHN0b3BTcGVjdGF0ZSgpCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjEpIAogICAgICAgIGVuZAogICAgCiAgICAgICAgbG9jYWwgbG9jYWxDaGFyID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgbG9jYWwgdGFyZ2V0Q2hhciA9IHRhcmdldFBsYXllci5DaGFyYWN0ZXIKICAgIAogICAgICAgIGlmIG5vdCAobG9jYWxDaGFyIGFuZCBsb2NhbENoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBhbmQgdGFyZ2V0Q2hhciBhbmQgdGFyZ2V0Q2hhcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpKSB0aGVuCiAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oKHRhcmdldFBsYXllciBhbmQgdGFyZ2V0UGxheWVyLk5hbWUgb3IgIlBlbWFpbiIpIC4uICIgdGlkYWsgYmlzYSBkaWFtYXRpLiIsIENvbG9yMy5mcm9tUkdCKDIwMCwgMTUwLCA1MCkpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgCiAgICAgICAgSXNWaWV3aW5nUGxheWVyID0gdHJ1ZQogICAgICAgIGN1cnJlbnRseVZpZXdlZFBsYXllciA9IHRhcmdldFBsYXllcgogICAgCiAgICAgICAgb3JpZ2luYWxQbGF5ZXJDRnJhbWUgPSBsb2NhbENoYXIuUHJpbWFyeVBhcnQuQ0ZyYW1lCiAgICAgICAgb3JpZ2luYWxDYW1lcmFTdWJqZWN0ID0gV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhU3ViamVjdAogICAgICAgIGxvY2FsUGxheWVySXNIaWRkZW4gPSB0cnVlCiAgICAKICAgICAgICBsb2NhbENoYXI6U2V0UHJpbWFyeVBhcnRDRnJhbWUodGFyZ2V0Q2hhci5QcmltYXJ5UGFydC5DRnJhbWUgKyBWZWN0b3IzLm5ldygwLCA1MCwgMCkpCiAgICAgICAgbG9jYWxDaGFyLlBhcmVudCA9IG5pbAogICAgCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKSBXb3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DYW1lcmFTdWJqZWN0ID0gdGFyZ2V0Q2hhci5IdW1hbm9pZCBlbmQpCiAgICAKICAgICAgICB2aWV3aW5nUGxheWVyQ29ubmVjdGlvbiA9IHRhcmdldFBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGNoYXJhY3RlcikKICAgICAgICAgICAgdGFzay53YWl0KDAuMSkKICAgICAgICAgICAgaWYgSXNWaWV3aW5nUGxheWVyIGFuZCBjdXJyZW50bHlWaWV3ZWRQbGF5ZXIgPT0gdGFyZ2V0UGxheWVyIGFuZCBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIHRoZW4KICAgICAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkgV29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhU3ViamVjdCA9IGNoYXJhY3Rlci5IdW1hbm9pZCBlbmQpCiAgICAgICAgICAgICAgICBpZiBsb2NhbFBsYXllcklzSGlkZGVuIGFuZCBsb2NhbENoYXIgYW5kIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgIGxvY2FsQ2hhcjpTZXRQcmltYXJ5UGFydENGcmFtZShjaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgKyBWZWN0b3IzLm5ldygwLCA1MCwgMCkpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgCiAgICAgICAgaWYgbm90IFNwZWN0YXRvckd1aSBvciBub3QgU3BlY3RhdG9yR3VpLlBhcmVudCB0aGVuIGNyZWF0ZVNwZWN0YXRvckdVSSgpIGVuZAogICAgICAgIFNwZWN0YXRvckd1aS5FbmFibGVkID0gdHJ1ZQogICAgICAgIGxvY2FsIE5pY2tuYW1lTGFiZWwgPSBTcGVjdGF0b3JHdWk6RmluZEZpcnN0Q2hpbGQoIk1haW5CYXIiLCB0cnVlKTpGaW5kRmlyc3RDaGlsZCgiTmlja25hbWVMYWJlbCIsIHRydWUpCiAgICAgICAgaWYgTmlja25hbWVMYWJlbCB0aGVuCiAgICAgICAgICAgIE5pY2tuYW1lTGFiZWwuVGV4dCA9ICJNZW5nYW1hdGk6ICIgLi4gdGFyZ2V0UGxheWVyLkRpc3BsYXlOYW1lCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgaWYgdXBkYXRlUGxheWVyTGlzdCB0aGVuIHVwZGF0ZVBsYXllckxpc3QoKSBlbmQKICAgIGVuZAoKICAgIGN5Y2xlU3BlY3RhdGUgPSBmdW5jdGlvbihkaXJlY3Rpb24pIAogICAgICAgIGlmIG5vdCBJc1ZpZXdpbmdQbGF5ZXIgdGhlbiByZXR1cm4gZW5kCgogICAgICAgIGxvY2FsIHBsYXllckxpc3QgPSB7fQogICAgICAgIGZvciBfLCBwIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgaWYgcCB+PSBMb2NhbFBsYXllciB0aGVuCiAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQocGxheWVyTGlzdCwgcCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIHRhYmxlLnNvcnQocGxheWVyTGlzdCwgZnVuY3Rpb24oYSwgYikgcmV0dXJuIGEuTmFtZSA8IGIuTmFtZSBlbmQpCgogICAgICAgIGlmICNwbGF5ZXJMaXN0ID09IDAgdGhlbgogICAgICAgICAgICBzdG9wU3BlY3RhdGUoKQogICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCJUaWRhayBhZGEgcGVtYWluIGxhaW4gdW50dWsgZGlhbWF0aS4iLCBDb2xvcjMuZnJvbVJHQigyMDAsIDE1MCwgNTApKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgY3VycmVudEluZGV4ID0gMAogICAgICAgIGlmIGN1cnJlbnRseVZpZXdlZFBsYXllciB0aGVuCiAgICAgICAgICAgIGZvciBpLCBwIGluIGlwYWlycyhwbGF5ZXJMaXN0KSBkbwogICAgICAgICAgICAgICAgaWYgcCA9PSBjdXJyZW50bHlWaWV3ZWRQbGF5ZXIgdGhlbgogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGlmIGN1cnJlbnRJbmRleCA9PSAwIGFuZCAjcGxheWVyTGlzdCA+IDAgdGhlbgogICAgICAgICAgICBjdXJyZW50SW5kZXggPSBkaXJlY3Rpb24gPiAwIGFuZCAwIG9yICNwbGF5ZXJMaXN0ICsgMQogICAgICAgIGVuZAoKICAgICAgICBmb3IgXyA9IDEsICNwbGF5ZXJMaXN0IGRvCiAgICAgICAgICAgIGxvY2FsIG5ld0luZGV4ID0gY3VycmVudEluZGV4ICsgZGlyZWN0aW9uCiAgICAgICAgICAgIGlmIG5ld0luZGV4ID4gI3BsYXllckxpc3QgdGhlbgogICAgICAgICAgICAgICAgbmV3SW5kZXggPSAxCiAgICAgICAgICAgIGVsc2VpZiBuZXdJbmRleCA8IDEgdGhlbgogICAgICAgICAgICAgICAgbmV3SW5kZXggPSAjcGxheWVyTGlzdAogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGxvY2FsIG5leHRQbGF5ZXIgPSBwbGF5ZXJMaXN0W25ld0luZGV4XQogICAgICAgICAgICBpZiBuZXh0UGxheWVyIGFuZCBuZXh0UGxheWVyLkNoYXJhY3RlciBhbmQgbmV4dFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIHRoZW4KICAgICAgICAgICAgICAgIHN0YXJ0U3BlY3RhdGUobmV4dFBsYXllcikKICAgICAgICAgICAgICAgIHJldHVybiAKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgY3VycmVudEluZGV4ID0gbmV3SW5kZXgKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIHN0b3BTcGVjdGF0ZSgpCiAgICAgICAgc2hvd05vdGlmaWNhdGlvbigiVGlkYWsgYWRhIHBlbWFpbiB5YW5nIGJpc2EgZGlhbWF0aSBzYWF0IGluaS4iLCBDb2xvcjMuZnJvbVJHQigyMDAsIDE1MCwgNTApKQogICAgZW5kCiAgICAKICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAtLSA9PSBBS0hJUiBCQUdJQU4gVklFVyBQTEFZRVIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPT0KICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgogICAgbG9jYWwgZnVuY3Rpb24gSG9wU2VydmVyKCkKICAgICAgICBpZiBTQ1JJUFRfVVJMID09ICJHQU5USV9ERU5HQU5fVVJMX1JBV19QQVNURUJJTl9BVEFVX0dJU1RfQU5EQSIgdGhlbgogICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCJVUkwgU2tyaXAgYmVsdW0gZGlhdHVyISBMaWhhdCBiYWdpYW4gYXRhcyBza3JpcC4iLCBDb2xvcjMuZnJvbVJHQigyNTUsIDEwMCwgMCkpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBzZXJ2ZXJzID0ge30KICAgICAgICBsb2NhbCBzdWNjZXNzLCByZXNwb25zZSA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgcmV0dXJuIEh0dHBTZXJ2aWNlOkpTT05EZWNvZGUoZ2FtZTpIdHRwR2V0KCJodHRwczovL2dhbWVzLnJvYmxveC5jb20vdjEvZ2FtZXMvIiAuLiB0b3N0cmluZyhnYW1lLlBsYWNlSWQpIC4uICIvc2VydmVycy9QdWJsaWM/c29ydE9yZGVyPUFzYyZsaW1pdD0xMDAiKSkKICAgICAgICBlbmQpCgogICAgICAgIGlmIG5vdCBzdWNjZXNzIG9yIG5vdCByZXNwb25zZSBvciBub3QgcmVzcG9uc2UuZGF0YSB0aGVuCiAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oIkdhZ2FsIG1lbmdhbWJpbCBkYWZ0YXIgc2VydmVyLiIsIENvbG9yMy5mcm9tUkdCKDIwMCwgNTAsIDUwKSkKICAgICAgICAgICAgd2FybigiU2VydmVyIEhvcCBFcnJvcjoiLCByZXNwb25zZSkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgZm9yIF8sIHNlcnZlciBpbiBpcGFpcnMocmVzcG9uc2UuZGF0YSkgZG8KICAgICAgICAgICAgaWYgdHlwZShzZXJ2ZXIpID09ICd0YWJsZScgYW5kIHNlcnZlci5pZCB+PSBnYW1lLkpvYklkIGFuZCBzZXJ2ZXIucGxheWluZyA8IHNlcnZlci5tYXhQbGF5ZXJzIHRoZW4KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChzZXJ2ZXJzLCBzZXJ2ZXIuaWQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAoKICAgICAgICBpZiAjc2VydmVycyA+IDAgdGhlbgogICAgICAgICAgICBsb2NhbCByYW5kb21TZXJ2ZXIgPSBzZXJ2ZXJzW21hdGgucmFuZG9tKDEsICNzZXJ2ZXJzKV0KICAgICAgICAgICAgCiAgICAgICAgICAgIHNhdmVGZWF0dXJlU3RhdGVzKCkKICAgICAgICAgICAgc2F2ZUd1aVBvc2l0aW9ucygpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBxdWV1ZV9vbl90ZWxlcG9ydCBhbmQgdHlwZShxdWV1ZV9vbl90ZWxlcG9ydCkgPT0gImZ1bmN0aW9uIiB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBsb2FkZXJDb2RlID0gImxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCciIC4uIFNDUklQVF9VUkwgLi4gIicpKSgpIgogICAgICAgICAgICAgICAgcXVldWVfb25fdGVsZXBvcnQobG9hZGVyQ29kZSkKICAgICAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oIlJlLWVrc2VrdXNpIHRlcmphZHdhbCwgcGluZGFoIHNlcnZlci4uLiIsIENvbG9yMy5mcm9tUkdCKDUwLCAxNTAsIDI1NSkpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24oIkV4ZWN1dG9yIHRpZGFrIG1lbmR1a3VuZyAncXVldWVfb25fdGVsZXBvcnQnLiBHdW5ha2FuIGF1dG8tZXhlYy4iLCBDb2xvcjMuZnJvbVJHQigyNTUsIDE1MCwgMCkpCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgdGFzay53YWl0KDAuMSkgCiAgICAgICAgICAgIAogICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBUZWxlcG9ydFNlcnZpY2U6VGVsZXBvcnRUb1BsYWNlSW5zdGFuY2UoZ2FtZS5QbGFjZUlkLCByYW5kb21TZXJ2ZXIsIExvY2FsUGxheWVyKQogICAgICAgICAgICBlbmQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCJUaWRhayBhZGEgc2VydmVyIGxhaW4geWFuZyBkaXRlbXVrYW4uIiwgQ29sb3IzLmZyb21SR0IoMjAwLCAxNTAsIDUwKSkKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBEaXNhYmxlQWxsRmVhdHVyZXMoKQoJCWlmIElzSW52aXNpYmlsaXR5RW5hYmxlZCBvciBpbnZpc1J1bm5pbmcgdGhlbiBUdXJuVmlzaWJsZSgpIGVuZAogICAgICAgIGlmIElzVmlld2luZ1BsYXllciB0aGVuIHN0b3BTcGVjdGF0ZSgpIGVuZAoJCQogICAgICAgIGlmIElzRmx5aW5nIHRoZW4gaWYgVXNlcklucHV0U2VydmljZS5Ub3VjaEVuYWJsZWQgdGhlbiBTdG9wTW9iaWxlRmx5KCkgZWxzZSBTdG9wRmx5KCkgZW5kIGVuZDsgaWYgSXNXYWxrU3BlZWRFbmFibGVkIHRoZW4gVG9nZ2xlV2Fsa1NwZWVkKGZhbHNlKSBlbmQ7IGlmIElzTm9jbGlwRW5hYmxlZCB0aGVuIFRvZ2dsZU5vY2xpcChmYWxzZSkgZW5kOyBpZiBJc0dvZE1vZGVFbmFibGVkIHRoZW4gVG9nZ2xlR29kTW9kZShmYWxzZSkgZW5kOyBpZiBJc0tpbGxBdXJhRW5hYmxlZCB0aGVuIFRvZ2dsZUtpbGxBdXJhKGZhbHNlKSBlbmQ7IGlmIElzQWltYm90RW5hYmxlZCB0aGVuIFRvZ2dsZUFpbWJvdChmYWxzZSkgZW5kOyBpZiBJc0luZmluaXR5SnVtcEVuYWJsZWQgdGhlbiBJc0luZmluaXR5SnVtcEVuYWJsZWQgPSBmYWxzZTsgaWYgaW5maW5pdHlKdW1wQ29ubmVjdGlvbiB0aGVuIGluZmluaXR5SnVtcENvbm5lY3Rpb246RGlzY29ubmVjdCgpOyBpbmZpbml0eUp1bXBDb25uZWN0aW9uID0gbmlsIGVuZCBlbmQ7IGlmIGFudGlmbGluZ19lbmFibGVkIHRoZW4gVG9nZ2xlQW50aUZsaW5nKGZhbHNlKSBlbmQ7IGlmIElzQW50aUxhZ0VuYWJsZWQgdGhlbiBUb2dnbGVBbnRpTGFnKGZhbHNlKSBlbmQKICAgICAgICBpZiBJc0Jvb3N0RlBTRW5hYmxlZCB0aGVuIFRvZ2dsZUJvb3N0RlBTKGZhbHNlKSBlbmQKICAgICAgICBpZiBpc0Vtb3RlRW5hYmxlZCB0aGVuIGRlc3Ryb3lFbW90ZUdVSSgpOyBFbW90ZVRvZ2dsZUJ1dHRvbi5WaXNpYmxlID0gZmFsc2UgZW5kCiAgICAgICAgaWYgaXNBbmltYXRpb25FbmFibGVkIHRoZW4gZGVzdHJveUFuaW1hdGlvbkdVSSgpOyBBbmltYXRpb25TaG93QnV0dG9uLlZpc2libGUgPSBmYWxzZSBlbmQgCiAgICAgICAgaWYgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIHRoZW4gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLldhbGtTcGVlZCA9IE9yaWdpbmFsV2Fsa1NwZWVkIGVuZAogICAgICAgIGlmIGN1cnJlbnRGbGluZ1RhcmdldCB0aGVuIFRvZ2dsZUZsaW5nT25QbGF5ZXIoY3VycmVudEZsaW5nVGFyZ2V0KSBlbmQKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBDbG9zZVNjcmlwdCgpCiAgICAgICAgRGlzYWJsZUFsbEZlYXR1cmVzKCkKICAgICAgICBTY3JlZW5HdWk6RGVzdHJveSgpCiAgICAgICAgaWYgdG91Y2hGbGluZ0d1aSBhbmQgdG91Y2hGbGluZ0d1aS5QYXJlbnQgdGhlbiB0b3VjaEZsaW5nR3VpOkRlc3Ryb3koKSBlbmQKICAgICAgICBpZiBTcGVjdGF0b3JHdWkgdGhlbiBTcGVjdGF0b3JHdWk6RGVzdHJveSgpIGVuZAogICAgICAgIGlmIGZsaW5nU3RhdHVzR3VpIGFuZCBmbGluZ1N0YXR1c0d1aS5QYXJlbnQgdGhlbiBmbGluZ1N0YXR1c0d1aTpEZXN0cm95KCkgZW5kCiAgICBlbmQKICAgIAogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIC0tID09IEJBR0lBTiBQRU1CVUFUQU4gRUxFTUVOIFVJIChTTElERVIsIFRPR0dMRSwgRExMKSAgICAgICAgICAgICA9PQogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIAogICAgbG9jYWwgZnVuY3Rpb24gY3JlYXRlU2xpZGVyKHBhcmVudCwgbmFtZSwgbWluLCBtYXgsIGN1cnJlbnQsIHN1ZmZpeCwgaW5jcmVtZW50LCBjYWxsYmFjaykKICAgICAgICBsb2NhbCBzbGlkZXJGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBwYXJlbnQpOyBzbGlkZXJGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDUwKTsgc2xpZGVyRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDE7IGxvY2FsIHRpdGxlTGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIHNsaWRlckZyYW1lKTsgdGl0bGVMYWJlbC5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDE1KTsgdGl0bGVMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMTsgdGl0bGVMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAwLCAyMDAsIDIwMCk7IHRpdGxlTGFiZWwuVGV4dFNpemUgPSAxMjsgdGl0bGVMYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsgdGl0bGVMYWJlbC5UZXh0ID0gbmFtZSAuLiAiOiAiIC4uIHRvc3RyaW5nKG1hdGguZmxvb3IoY3VycmVudCAqIDEwKSAvIDEwKSAuLiAiICIgLi4gc3VmZml4OyB0aXRsZUxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2FucwogICAgICAgIGxvY2FsIHNsaWRlckJhc2UgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgc2xpZGVyRnJhbWUpOyBzbGlkZXJCYXNlLk5hbWUgPSAiU2xpZGVyQmFzZSI7IHNsaWRlckJhc2UuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAxMCk7IHNsaWRlckJhc2UuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMjUpOyBzbGlkZXJCYXNlLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzNSwgMzUsIDM1KTsgc2xpZGVyQmFzZS5Cb3JkZXJTaXplUGl4ZWwgPSAwOyBsb2NhbCBzYkNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBzbGlkZXJCYXNlKTsgc2JDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgNSkKICAgICAgICBsb2NhbCBzbGlkZXJGaWxsID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIHNsaWRlckJhc2UpOyBzbGlkZXJGaWxsLk5hbWUgPSAiU2xpZGVyRmlsbCI7IGxvY2FsIGZpbGxXaWR0aCA9IChjdXJyZW50IC0gbWluKSAvIChtYXggLSBtaW4pOyBzbGlkZXJGaWxsLlNpemUgPSBVRGltMi5uZXcoZmlsbFdpZHRoLCAwLCAxLCAwKTsgc2xpZGVyRmlsbC5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMTUwLCAyNTUpOyBzbGlkZXJGaWxsLkJvcmRlclNpemVQaXhlbCA9IDA7IGxvY2FsIHNmQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIHNsaWRlckZpbGwpOyBzZkNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA1KQogICAgICAgIGxvY2FsIHNsaWRlclRodW1iID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIHNsaWRlckJhc2UpOyBzbGlkZXJUaHVtYi5OYW1lID0gIlNsaWRlclRodW1iIjsgc2xpZGVyVGh1bWIuU2l6ZSA9IFVEaW0yLm5ldygwLCAxNSwgMCwgMjUpOyBzbGlkZXJUaHVtYi5Qb3NpdGlvbiA9IFVEaW0yLm5ldyhmaWxsV2lkdGgsIC03LjUsIDAuNSwgLTEyLjUpOyBzbGlkZXJUaHVtYi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMjAwLCAyNTUpOyBzbGlkZXJUaHVtYi5Cb3JkZXJTaXplUGl4ZWwgPSAwOyBsb2NhbCBzdENvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBzbGlkZXJUaHVtYik7IHN0Q29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDUpOyBsb2NhbCBzdFN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBzbGlkZXJUaHVtYik7IHN0U3Ryb2tlLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7IHN0U3Ryb2tlLlRoaWNrbmVzcyA9IDE7IHN0U3Ryb2tlLlRyYW5zcGFyZW5jeSA9IDAuOAogICAgICAgIGxvY2FsIGlzRHJhZ2dpbmdTbGlkZXIgPSBmYWxzZTsgbG9jYWwgZnVuY3Rpb24gdXBkYXRlU2xpZGVyKGlucHV0KSBsb2NhbCBwb3MgPSBpbnB1dC5Qb3NpdGlvbi5YIC0gc2xpZGVyQmFzZS5BYnNvbHV0ZVBvc2l0aW9uLlg7IGxvY2FsIG5ld1dpZHRoID0gbWF0aC5taW4obWF0aC5tYXgocG9zLCAwKSwgc2xpZGVyQmFzZS5BYnNvbHV0ZVNpemUuWCk7IGxvY2FsIG5ld1ZhbHVlID0gbWluICsgKG5ld1dpZHRoIC8gc2xpZGVyQmFzZS5BYnNvbHV0ZVNpemUuWCkgKiAobWF4IC0gbWluKTsgbmV3VmFsdWUgPSBtYXRoLmZsb29yKG5ld1ZhbHVlIC8gaW5jcmVtZW50KSAqIGluY3JlbWVudDsgbG9jYWwgbmV3RmlsbFdpZHRoID0gKG5ld1ZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pOyBzbGlkZXJGaWxsLlNpemUgPSBVRGltMi5uZXcobmV3RmlsbFdpZHRoLCAwLCAxLCAwKTsgc2xpZGVyVGh1bWIuUG9zaXRpb24gPSBVRGltMi5uZXcobmV3RmlsbFdpZHRoLCAtNy41LCAwLjUsIC0xMi41KTsgdGl0bGVMYWJlbC5UZXh0ID0gbmFtZSAuLiAiOiAiIC4uIHRvc3RyaW5nKG1hdGguZmxvb3IobmV3VmFsdWUgKiAxMCkgLyAxMCkgLi4gIiAiIC4uIHN1ZmZpeDsgY2FsbGJhY2sobmV3VmFsdWUpIGVuZAogICAgICAgIHNsaWRlckJhc2UuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBwcm9jZXNzZWQpIGlmIHByb2Nlc3NlZCB0aGVuIHJldHVybiBlbmQ7IGlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSBvciBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Ub3VjaCB0aGVuIGlzRHJhZ2dpbmdTbGlkZXIgPSB0cnVlOyB1cGRhdGVTbGlkZXIoaW5wdXQpIGVuZCBlbmQpCiAgICAgICAgc2xpZGVyQmFzZS5JbnB1dEVuZGVkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpIGlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSBvciBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Ub3VjaCB0aGVuIGlzRHJhZ2dpbmdTbGlkZXIgPSBmYWxzZTsgc2F2ZUZlYXR1cmVTdGF0ZXMoKSBlbmQgZW5kKQogICAgICAgIFVzZXJJbnB1dFNlcnZpY2UuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpIGlmIGlzRHJhZ2dpbmdTbGlkZXIgdGhlbiB1cGRhdGVTbGlkZXIoaW5wdXQpIGVuZCBlbmQpCiAgICAgICAgcmV0dXJuIHNsaWRlckZyYW1lCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gY3JlYXRlVG9nZ2xlKHBhcmVudCwgbmFtZSwgaW5pdGlhbFN0YXRlLCBjYWxsYmFjaykKICAgICAgICBsb2NhbCB0b2dnbGVGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBwYXJlbnQpOyB0b2dnbGVGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KTsgdG9nZ2xlRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDE7IGxvY2FsIHRvZ2dsZUxhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCB0b2dnbGVGcmFtZSk7IHRvZ2dsZUxhYmVsLlNpemUgPSBVRGltMi5uZXcoMC44LCAtMTAsIDEsIDApOyB0b2dnbGVMYWJlbC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCAwKTsgdG9nZ2xlTGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDE7IHRvZ2dsZUxhYmVsLlRleHQgPSBuYW1lOyB0b2dnbGVMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7IHRvZ2dsZUxhYmVsLlRleHRTaXplID0gMTI7IHRvZ2dsZUxhYmVsLlRleHRYQWxpZ25tZW50ID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OyB0b2dnbGVMYWJlbC5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnMKICAgICAgICBsb2NhbCBzd2l0Y2ggPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCB0b2dnbGVGcmFtZSk7IHN3aXRjaC5OYW1lID0gIlN3aXRjaCI7IHN3aXRjaC5TaXplID0gVURpbTIubmV3KDAsIDQwLCAwLCAyMCk7IHN3aXRjaC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtNTAsIDAuNSwgLTEwKTsgc3dpdGNoLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig1MCwgNTAsIDUwKTsgc3dpdGNoLkJvcmRlclNpemVQaXhlbCA9IDA7IHN3aXRjaC5UZXh0ID0gIiI7IGxvY2FsIHN3aXRjaENvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBzd2l0Y2gpOyBzd2l0Y2hDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMSwgMCkKICAgICAgICBsb2NhbCB0aHVtYiA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBzd2l0Y2gpOyB0aHVtYi5OYW1lID0gIlRodW1iIjsgdGh1bWIuU2l6ZSA9IFVEaW0yLm5ldygwLCAxNiwgMCwgMTYpOyB0aHVtYi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAyLCAwLjUsIC04KTsgdGh1bWIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIyMCwgMjIwLCAyMjApOyB0aHVtYi5Cb3JkZXJTaXplUGl4ZWwgPSAwOyBsb2NhbCB0aHVtYkNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCB0aHVtYik7IHRodW1iQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDEsIDApCiAgICAgICAgbG9jYWwgb25Db2xvciwgb2ZmQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigwLCAxNTAsIDI1NSksIENvbG9yMy5mcm9tUkdCKDYwLCA2MCwgNjApOyBsb2NhbCBvblBvc2l0aW9uLCBvZmZQb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMTgsIDAuNSwgLTgpLCBVRGltMi5uZXcoMCwgMiwgMC41LCAtOCk7IGxvY2FsIHR3ZWVuSW5mbyA9IFR3ZWVuSW5mby5uZXcoMC4yLCBFbnVtLkVhc2luZ1N0eWxlLlF1aW50LCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQpOyBsb2NhbCBpc1RvZ2dsZWQgPSBpbml0aWFsU3RhdGUKICAgICAgICBsb2NhbCBmdW5jdGlvbiB1cGRhdGVWaXN1YWxzKGlzSW5zdGFudCkgbG9jYWwgZ29hbFBvc2l0aW9uLCBnb2FsQ29sb3IgPSBpc1RvZ2dsZWQgYW5kIG9uUG9zaXRpb24gb3Igb2ZmUG9zaXRpb24sIGlzVG9nZ2xlZCBhbmQgb25Db2xvciBvciBvZmZDb2xvcjsgaWYgaXNJbnN0YW50IHRoZW4gdGh1bWIuUG9zaXRpb24sIHN3aXRjaC5CYWNrZ3JvdW5kQ29sb3IzID0gZ29hbFBvc2l0aW9uLCBnb2FsQ29sb3IgZWxzZSBUd2VlblNlcnZpY2U6Q3JlYXRlKHRodW1iLCB0d2VlbkluZm8sIHtQb3NpdGlvbiA9IGdvYWxQb3NpdGlvbn0pOlBsYXkoKTsgVHdlZW5TZXJ2aWNlOkNyZWF0ZShzd2l0Y2gsIHR3ZWVuSW5mbywge0JhY2tncm91bmRDb2xvcjMgPSBnb2FsQ29sb3J9KTpQbGF5KCkgZW5kIGVuZAogICAgICAgIHN3aXRjaC5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkgaXNUb2dnbGVkID0gbm90IGlzVG9nZ2xlZDsgdXBkYXRlVmlzdWFscyhmYWxzZSk7IGNhbGxiYWNrKGlzVG9nZ2xlZCkgZW5kKTsgdXBkYXRlVmlzdWFscyh0cnVlKQogICAgICAgIHJldHVybiB0b2dnbGVGcmFtZSwgc3dpdGNoCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gY3JlYXRlRHJvcGRvd24ocGFyZW50LCBuYW1lLCBvcHRpb25zLCBjdXJyZW50LCBjYWxsYmFjaykKICAgICAgICBsb2NhbCBkcm9wZG93bkZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIHBhcmVudCk7IGRyb3Bkb3duRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCA1MCk7IGRyb3Bkb3duRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDE7IGxvY2FsIGxhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBkcm9wZG93bkZyYW1lKTsgbGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyMCk7IGxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxOyBsYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsgbGFiZWwuVGV4dCA9IG5hbWUgLi4gIjogIiAuLiBjdXJyZW50OyBsYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7IGxhYmVsLlRleHRTaXplID0gMTI7IGxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2FucwogICAgICAgIGxvY2FsIG9wdGlvbkJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIGRyb3Bkb3duRnJhbWUpOyBvcHRpb25CdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAyNSk7IG9wdGlvbkJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAyNSk7IG9wdGlvbkJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMTUwLCAyNTUpOyBvcHRpb25CdXR0b24uQm9yZGVyU2l6ZVBpeGVsID0gMDsgb3B0aW9uQnV0dG9uLlRleHQgPSAiVWJhaCBUYXJnZXQiOyBvcHRpb25CdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOyBvcHRpb25CdXR0b24uVGV4dFNpemUgPSAxMjsgb3B0aW9uQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2FuczsgbG9jYWwgYnRuQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIG9wdGlvbkJ1dHRvbik7IGJ0bkNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA1KQogICAgICAgIGxvY2FsIGN1cnJlbnRJbmRleCA9IDE7IGZvciBpLHYgaW4gcGFpcnMob3B0aW9ucykgZG8gaWYgdiA9PSBjdXJyZW50IHRoZW4gY3VycmVudEluZGV4ID0gaSBicmVhayBlbmQgZW5kCiAgICAgICAgb3B0aW9uQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKSBjdXJyZW50SW5kZXggPSBjdXJyZW50SW5kZXggJSAjb3B0aW9ucyArIDE7IGxvY2FsIG5ld09wdGlvbiA9IG9wdGlvbnNbY3VycmVudEluZGV4XTsgbGFiZWwuVGV4dCA9IG5hbWUgLi4gIjogIiAuLiBuZXdPcHRpb247IGNhbGxiYWNrKG5ld09wdGlvbikgZW5kKTsgcmV0dXJuIGRyb3Bkb3duRnJhbWUKICAgIGVuZAogICAgCiAgICAtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLS0gPT0gQkFHSUFOIFBFTkdBVFVSQU4gS09OVEVOIFRBQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9PQogICAgLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIAogICAgLS0gVGFiIFBsYXllcgogICAgbG9jYWwgcGxheWVySGVhZGVyRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgUGxheWVyVGFiQ29udGVudCk7IHBsYXllckhlYWRlckZyYW1lLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgNTUpOyBwbGF5ZXJIZWFkZXJGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgbG9jYWwgcGxheWVyQ291bnRMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgcGxheWVySGVhZGVyRnJhbWUpOyBwbGF5ZXJDb3VudExhYmVsLk5hbWUgPSAiUGxheWVyQ291bnRMYWJlbCI7IHBsYXllckNvdW50TGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygxLCAtMjAsIDAsIDE1KTsgcGxheWVyQ291bnRMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMTsgcGxheWVyQ291bnRMYWJlbC5UZXh0ID0gIlBlbWFpbiBPbmxpbmU6ICIgLi4gI1BsYXllcnM6R2V0UGxheWVycygpOyBwbGF5ZXJDb3VudExhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsgcGxheWVyQ291bnRMYWJlbC5UZXh0U2l6ZSA9IDEyOyBwbGF5ZXJDb3VudExhYmVsLlRleHRYQWxpZ25tZW50ID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OyBwbGF5ZXJDb3VudExhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgIAogICAgbG9jYWwgcmVmcmVzaEJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIHBsYXllckhlYWRlckZyYW1lKQogICAgcmVmcmVzaEJ1dHRvbi5OYW1lID0gIlJlZnJlc2hCdXR0b24iCiAgICByZWZyZXNoQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMTUsIDAsIDE1KTsgcmVmcmVzaEJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMTUsIDAsIDApOyByZWZyZXNoQnV0dG9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICByZWZyZXNoQnV0dG9uLlRleHQgPSAi8J+UhCI7IHJlZnJlc2hCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDIwMCwgMjU1KTsgcmVmcmVzaEJ1dHRvbi5UZXh0U2l6ZSA9IDE0OyByZWZyZXNoQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgIAogICAgbG9jYWwgaXNBbmltYXRpbmdSZWZyZXNoID0gZmFsc2UKICAgIHJlZnJlc2hCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpIAogICAgICAgIGlmIGlzQW5pbWF0aW5nUmVmcmVzaCB0aGVuIHJldHVybiBlbmQ7IGlzQW5pbWF0aW5nUmVmcmVzaCA9IHRydWUKICAgICAgICBsb2NhbCB0d2VlbkluZm8gPSBUd2VlbkluZm8ubmV3KDAuNCwgRW51bS5FYXNpbmdTdHlsZS5MaW5lYXIpOyBsb2NhbCB0d2VlbiA9IFR3ZWVuU2VydmljZTpDcmVhdGUocmVmcmVzaEJ1dHRvbiwgdHdlZW5JbmZvLCB7IFJvdGF0aW9uID0gcmVmcmVzaEJ1dHRvbi5Sb3RhdGlvbiArIDM2MCB9KTsgdHdlZW46UGxheSgpCiAgICAgICAgaWYgdXBkYXRlUGxheWVyTGlzdCB0aGVuIHVwZGF0ZVBsYXllckxpc3QoKSBlbmQgCiAgICAgICAgdHdlZW4uQ29tcGxldGVkOkNvbm5lY3QoZnVuY3Rpb24oKSBpc0FuaW1hdGluZ1JlZnJlc2ggPSBmYWxzZSBlbmQpCiAgICBlbmQpCgogICAgbG9jYWwgc2VhcmNoRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgcGxheWVySGVhZGVyRnJhbWUpOyBzZWFyY2hGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDI1KTsgc2VhcmNoRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMjApOyBzZWFyY2hGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgbG9jYWwgc2VhcmNoVGV4dEJveCA9IEluc3RhbmNlLm5ldygiVGV4dEJveCIsIHNlYXJjaEZyYW1lKTsgc2VhcmNoVGV4dEJveC5TaXplID0gVURpbTIubmV3KDAuNywgLTEwLCAxLCAwKTsgc2VhcmNoVGV4dEJveC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCAwKTsgc2VhcmNoVGV4dEJveC5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMzUsIDM1LCAzNSk7IHNlYXJjaFRleHRCb3guVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyMDApOyBzZWFyY2hUZXh0Qm94LlBsYWNlaG9sZGVyVGV4dCA9ICJDYXJpIFBlbWFpbi4uLiI7IHNlYXJjaFRleHRCb3guVGV4dFNpemUgPSAxMjsgc2VhcmNoVGV4dEJveC5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnM7IHNlYXJjaFRleHRCb3guQ2xlYXJUZXh0T25Gb2N1cyA9IHRydWU7IGxvY2FsIHNib3hDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgc2VhcmNoVGV4dEJveCk7IHNib3hDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgNSkKICAgIGxvY2FsIHNlYXJjaEJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIHNlYXJjaEZyYW1lKTsgc2VhcmNoQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMC4zLCAwLCAxLCAwKTsgc2VhcmNoQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNywgMCwgMCwgMCk7IHNlYXJjaEJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMTUwLCAgMjU1KTsgc2VhcmNoQnV0dG9uLkJvcmRlclNpemVQaXhlbCA9IDA7IHNlYXJjaEJ1dHRvbi5UZXh0ID0gIkNhcmkiOyBzZWFyY2hCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOyBzZWFyY2hCdXR0b24uVGV4dFNpemUgPSAxMjsgc2VhcmNoQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQ7IGxvY2FsIHNidG5Db3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgc2VhcmNoQnV0dG9uKTsgc2J0bkNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA1KQogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBjcmVhdGVQbGF5ZXJCdXR0b24ocGxheWVyKQogICAgICAgIGxvY2FsIHBsYXllckZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIFBsYXllckxpc3RDb250YWluZXIpOyBwbGF5ZXJGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDUwKTsgcGxheWVyRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDE7IHBsYXllckZyYW1lLk5hbWUgPSBwbGF5ZXIuTmFtZQogICAgICAgIAogICAgICAgIGxvY2FsIGF2YXRhckltYWdlID0gSW5zdGFuY2UubmV3KCJJbWFnZUJ1dHRvbiIsIHBsYXllckZyYW1lKQogICAgICAgIGF2YXRhckltYWdlLk5hbWUgPSAiQXZhdGFySW1hZ2VCdXR0b24iCiAgICAgICAgYXZhdGFySW1hZ2UuU2l6ZSA9IFVEaW0yLm5ldygwLCAzMCwgMCwgMzApCiAgICAgICAgYXZhdGFySW1hZ2UuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMC41LCAtMTUpCiAgICAgICAgYXZhdGFySW1hZ2UuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICBhdmF0YXJJbWFnZS5BdXRvQnV0dG9uQ29sb3IgPSBmYWxzZQogICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkgYXZhdGFySW1hZ2UuSW1hZ2UgPSBQbGF5ZXJzOkdldFVzZXJUaHVtYm5haWxBc3luYyhwbGF5ZXIuVXNlcklkLCBFbnVtLlRodW1ibmFpbFR5cGUuSGVhZFNob3QsIEVudW0uVGh1bWJuYWlsU2l6ZS5TaXplNDIweDQyMCkgZW5kKQogICAgICAgIAogICAgICAgIGxvY2FsIGF2YXRhckNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBhdmF0YXJJbWFnZSkKICAgICAgICBhdmF0YXJDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMSwgMCkKICAgICAgICBsb2NhbCBhdmF0YXJTdHJva2UgPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgYXZhdGFySW1hZ2UpCiAgICAgICAgYXZhdGFyU3Ryb2tlLk5hbWUgPSAiU3BlY3RhdGVTdHJva2UiCiAgICAgICAgYXZhdGFyU3Ryb2tlLkFwcGx5U3Ryb2tlTW9kZSA9IEVudW0uQXBwbHlTdHJva2VNb2RlLkJvcmRlcgogICAgICAgIGF2YXRhclN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDQwLCAyMDAsIDQwKQogICAgICAgIGF2YXRhclN0cm9rZS5UaGlja25lc3MgPSAxLjUKICAgICAgICBhdmF0YXJTdHJva2UuVHJhbnNwYXJlbmN5ID0gMSAKICAgICAgICAKICAgICAgICBhdmF0YXJJbWFnZS5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgc3RhcnRTcGVjdGF0ZShwbGF5ZXIpCiAgICAgICAgZW5kKQogICAgICAgIAogICAgICAgIGxvY2FsIGRpc3BsYXluYW1lTGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIHBsYXllckZyYW1lKTsgZGlzcGxheW5hbWVMYWJlbC5TaXplID0gVURpbTIubmV3KDEsIC05MCwgMCwgMTUpOyBkaXNwbGF5bmFtZUxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDQwLCAwLCAyKTsgZGlzcGxheW5hbWVMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMTsgZGlzcGxheW5hbWVMYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsgZGlzcGxheW5hbWVMYWJlbC5UZXh0ID0gcGxheWVyLkRpc3BsYXlOYW1lOyBkaXNwbGF5bmFtZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsgZGlzcGxheW5hbWVMYWJlbC5UZXh0U2l6ZSA9IDExOyBkaXNwbGF5bmFtZUxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc1NlbWlib2xkCiAgICAgICAgbG9jYWwgdXNlcm5hbWVMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgcGxheWVyRnJhbWUpOyB1c2VybmFtZUxhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwgLTkwLCAwLCAxNSk7IHVzZXJuYW1lTGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNDAsIDAsIDE4KTsgdXNlcm5hbWVMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMTsgdXNlcm5hbWVMYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsgdXNlcm5hbWVMYWJlbC5UZXh0ID0gIkAiIC4uIHBsYXllci5OYW1lOyB1c2VybmFtZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxNTAsIDE1MCwgMTUwKTsgdXNlcm5hbWVMYWJlbC5UZXh0U2l6ZSA9IDk7IHVzZXJuYW1lTGFiZWwuRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zCiAgICAgICAgbG9jYWwgZGlzdGFuY2VMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgcGxheWVyRnJhbWUpOyBkaXN0YW5jZUxhYmVsLk5hbWUgPSAiRGlzdGFuY2VMYWJlbCI7IGRpc3RhbmNlTGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygxLCAtOTAsIDAsIDE1KTsgZGlzdGFuY2VMYWJlbC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA0MCwgMCwgMzQpOyBkaXN0YW5jZUxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxOyBkaXN0YW5jZUxhYmVsLlRleHRYQWxpZ25tZW50ID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OyBkaXN0YW5jZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAyNTUsIDEyNyk7IGRpc3RhbmNlTGFiZWwuVGV4dFNpemUgPSAxMDsgZGlzdGFuY2VMYWJlbC5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnNTZW1pYm9sZAogICAgICAgIAogICAgICAgIGxvY2FsIGFjdGlvbnNGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBwbGF5ZXJGcmFtZSkKICAgICAgICBhY3Rpb25zRnJhbWUuTmFtZSA9ICJBY3Rpb25zRnJhbWUiCiAgICAgICAgYWN0aW9uc0ZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgMTgsIDAsIDQxKQogICAgICAgIGFjdGlvbnNGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMjMsIDAuNSwgLTIwLjUpCiAgICAgICAgYWN0aW9uc0ZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgCiAgICAgICAgbG9jYWwgZmxpbmdCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBhY3Rpb25zRnJhbWUpCiAgICAgICAgZmxpbmdCdXR0b24uTmFtZSA9ICJGbGluZ0J1dHRvbiIKICAgICAgICBmbGluZ0J1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDE4LCAwLCAxOCkKICAgICAgICBmbGluZ0J1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKSAKICAgICAgICBmbGluZ0J1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoODAsIDgwLCA4MCkKICAgICAgICBmbGluZ0J1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwCiAgICAgICAgZmxpbmdCdXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAogICAgICAgIGZsaW5nQnV0dG9uLlRleHQgPSAi4pig77iPIgogICAgICAgIGZsaW5nQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgIGZsaW5nQnV0dG9uLlRleHRTaXplID0gMTIKICAgICAgICBsb2NhbCBmbGluZ0Nvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBmbGluZ0J1dHRvbik7IGZsaW5nQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDUpCiAgICAgICAgZmxpbmdCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIFRvZ2dsZUZsaW5nT25QbGF5ZXIocGxheWVyKQogICAgICAgIGVuZCkKCiAgICAgICAgbG9jYWwgbmV3VGVsZXBvcnRCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBhY3Rpb25zRnJhbWUpCiAgICAgICAgbmV3VGVsZXBvcnRCdXR0b24uTmFtZSA9ICJUZWxlcG9ydEJ1dHRvbiIKICAgICAgICBuZXdUZWxlcG9ydEJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDE4LCAwLCAxOCkKICAgICAgICBuZXdUZWxlcG9ydEJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAxLCAtMTgpCiAgICAgICAgbmV3VGVsZXBvcnRCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDEyMCwgMjU1KQogICAgICAgIG5ld1RlbGVwb3J0QnV0dG9uLkJvcmRlclNpemVQaXhlbCA9IDAKICAgICAgICBuZXdUZWxlcG9ydEJ1dHRvbi5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnNCb2xkCiAgICAgICAgbmV3VGVsZXBvcnRCdXR0b24uVGV4dCA9ICLwn4yAIgogICAgICAgIG5ld1RlbGVwb3J0QnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgICAgIG5ld1RlbGVwb3J0QnV0dG9uLlRleHRTaXplID0gMTIKICAgICAgICBsb2NhbCB0cENvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBuZXdUZWxlcG9ydEJ1dHRvbik7IHRwQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDUpCiAgICAgICAgbmV3VGVsZXBvcnRCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbiArIFZlY3RvcjMubmV3KDAsIDMsIDApKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHBsYXllckZyYW1lCiAgICBlbmQKICAgIAogICAgdXBkYXRlUGxheWVyTGlzdCA9IGZ1bmN0aW9uKCkKICAgICAgICBpZiBpc1VwZGF0aW5nUGxheWVyTGlzdCB0aGVuIHJldHVybiBlbmQ7IGlmIG5vdCAoTWFpbkZyYW1lLlZpc2libGUgYW5kIFBsYXllclRhYkNvbnRlbnQuVmlzaWJsZSkgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgaXNVcGRhdGluZ1BsYXllckxpc3QgPSB0cnVlCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICBwbGF5ZXJDb3VudExhYmVsLlRleHQgPSAiUGVtYWluIE9ubGluZTogIiAuLiAjUGxheWVyczpHZXRQbGF5ZXJzKCkKICAgICAgICAgICAgbG9jYWwgY3VycmVudFBsYXllcnMgPSB7fTsgZm9yIF8sIHBsYXllciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvIGN1cnJlbnRQbGF5ZXJzW3BsYXllci5Vc2VySWRdID0gcGxheWVyIGVuZAogICAgICAgICAgICBmb3IgdXNlcklkLCBidXR0b24gaW4gcGFpcnMoUGxheWVyQnV0dG9ucykgZG8gaWYgbm90IGN1cnJlbnRQbGF5ZXJzW3VzZXJJZF0gdGhlbiBidXR0b246RGVzdHJveSgpOyBQbGF5ZXJCdXR0b25zW3VzZXJJZF0gPSBuaWwgZW5kIGVuZAogICAgICAgICAgICBmb3IgaSwgcGxheWVyIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgICAgIGlmIHBsYXllciB+PSBMb2NhbFBsYXllciB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgcGFzc2VzRmlsdGVyID0gKEN1cnJlbnRQbGF5ZXJGaWx0ZXIgPT0gIiIgb3IgQ3VycmVudFBsYXllckZpbHRlciA9PSAiQ2FyaSBQZW1haW4uLi4iIG9yIHBsYXllci5OYW1lOmxvd2VyKCk6ZmluZChDdXJyZW50UGxheWVyRmlsdGVyOmxvd2VyKCksIDEsIHRydWUpIG9yIHBsYXllci5EaXNwbGF5TmFtZTpsb3dlcigpOmZpbmQoQ3VycmVudFBsYXllckZpbHRlcjpsb3dlcigpLCAxLCB0cnVlKSkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBleGlzdGluZ0J1dHRvbiA9IFBsYXllckJ1dHRvbnNbcGxheWVyLlVzZXJJZF0KICAgICAgICAgICAgICAgICAgICBpZiBub3QgZXhpc3RpbmdCdXR0b24gdGhlbiBleGlzdGluZ0J1dHRvbiA9IGNyZWF0ZVBsYXllckJ1dHRvbihwbGF5ZXIpOyBQbGF5ZXJCdXR0b25zW3BsYXllci5Vc2VySWRdID0gZXhpc3RpbmdCdXR0b24gZW5kCiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdCdXR0b24uVmlzaWJsZSA9IHBhc3Nlc0ZpbHRlcjsgZXhpc3RpbmdCdXR0b24uTGF5b3V0T3JkZXIgPSBpIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGxvY2FsIGRpc3RMYWJlbCA9IGV4aXN0aW5nQnV0dG9uOkZpbmRGaXJzdENoaWxkKCJEaXN0YW5jZUxhYmVsIikKICAgICAgICAgICAgICAgICAgICBpZiBkaXN0TGFiZWwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBsb2NhbEhSUCA9IExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iik7IGxvY2FsIHRhcmdldEhSUCA9IHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgICAgICAgICAgICAgICAgICBkaXN0TGFiZWwuVGV4dCA9IChsb2NhbEhSUCBhbmQgdGFyZ2V0SFJQKSBhbmQgdG9zdHJpbmcobWF0aC5mbG9vcigobG9jYWxIUlAuUG9zaXRpb24gLSB0YXJnZXRIUlAuUG9zaXRpb24pLk1hZ25pdHVkZSkpIC4uICJtIiBvciAiLi4uIgogICAgICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgICAgICBsb2NhbCBhdmF0YXJJbWdCdG4gPSBleGlzdGluZ0J1dHRvbjpGaW5kRmlyc3RDaGlsZCgiQXZhdGFySW1hZ2VCdXR0b24iKQogICAgICAgICAgICAgICAgICAgIGlmIGF2YXRhckltZ0J0biB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHN0cm9rZSA9IGF2YXRhckltZ0J0bjpGaW5kRmlyc3RDaGlsZCgiU3BlY3RhdGVTdHJva2UiKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBzdHJva2UgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgSXNWaWV3aW5nUGxheWVyIGFuZCBjdXJyZW50bHlWaWV3ZWRQbGF5ZXIgPT0gcGxheWVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2UuVHJhbnNwYXJlbmN5ID0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZS5UcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZmxpbmdCdXR0b24gPSBleGlzdGluZ0J1dHRvbjpGaW5kRmlyc3RDaGlsZCgiRmxpbmdCdXR0b24iLCB0cnVlKQogICAgICAgICAgICAgICAgICAgIGlmIGZsaW5nQnV0dG9uIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY3VycmVudEZsaW5nVGFyZ2V0ID09IHBsYXllciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGluZ0J1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAwLCA1MCwgNTApIAogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGluZ0J1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoODAsIDgwLCA4MCkgCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICBpc1VwZGF0aW5nUGxheWVyTGlzdCA9IGZhbHNlCiAgICBlbmQKICAgIAogICAgc2VhcmNoVGV4dEJveC5Gb2N1c0xvc3Q6Q29ubmVjdChmdW5jdGlvbigpIEN1cnJlbnRQbGF5ZXJGaWx0ZXIgPSBzZWFyY2hUZXh0Qm94LlRleHQ7IHVwZGF0ZVBsYXllckxpc3QoKSBlbmQpCiAgICBzZWFyY2hCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpIEN1cnJlbnRQbGF5ZXJGaWx0ZXIgPSBzZWFyY2hUZXh0Qm94LlRleHQ7IHVwZGF0ZVBsYXllckxpc3QoKSBlbmQpCiAgICAKICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKSB3aGlsZSB0YXNrLndhaXQoMSkgZG8gaWYgdXBkYXRlUGxheWVyTGlzdCB0aGVuIHVwZGF0ZVBsYXllckxpc3QoKSBlbmQgZW5kIGVuZCkKICAgIFBsYXllcnMuUGxheWVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbigpIHRhc2sud2FpdCgwLjUpOyBpZiB1cGRhdGVQbGF5ZXJMaXN0IHRoZW4gdXBkYXRlUGxheWVyTGlzdCgpIGVuZCBlbmQpCiAgICBQbGF5ZXJzLlBsYXllclJlbW92aW5nOkNvbm5lY3QoZnVuY3Rpb24ocGxheWVyKSAKICAgICAgICBpZiBJc1ZpZXdpbmdQbGF5ZXIgYW5kIGN1cnJlbnRseVZpZXdlZFBsYXllciA9PSBwbGF5ZXIgdGhlbgogICAgICAgICAgICBjeWNsZVNwZWN0YXRlKDEpIAogICAgICAgIGVuZAogICAgICAgIGlmIGN1cnJlbnRGbGluZ1RhcmdldCA9PSBwbGF5ZXIgdGhlbgogICAgICAgICAgICBUb2dnbGVGbGluZ09uUGxheWVyKHBsYXllcikgCiAgICAgICAgZW5kCiAgICAgICAgdGFzay53YWl0KDAuNSk7IAogICAgICAgIGlmIHVwZGF0ZVBsYXllckxpc3QgdGhlbiB1cGRhdGVQbGF5ZXJMaXN0KCkgZW5kIAogICAgZW5kKQogICAgCiAgICAtLSBUYWIgVW11bQogICAgY3JlYXRlU2xpZGVyKEdlbmVyYWxUYWJDb250ZW50LCAiS2VjZXBhdGFuIEphbGFuIiwgMCwgU2V0dGluZ3MuTWF4V2Fsa1NwZWVkLCBTZXR0aW5ncy5XYWxrU3BlZWQsICIiLCAxLCBmdW5jdGlvbih2KSBTZXR0aW5ncy5XYWxrU3BlZWQgPSB2OyBpZiBJc1dhbGtTcGVlZEVuYWJsZWQgYW5kIExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkIHRoZW4gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLldhbGtTcGVlZCA9IHYgZW5kIGVuZCkKICAgIGNyZWF0ZVRvZ2dsZShHZW5lcmFsVGFiQ29udGVudCwgIkphbGFuIENlcGF0IiwgSXNXYWxrU3BlZWRFbmFibGVkLCBmdW5jdGlvbih2KSBJc1dhbGtTcGVlZEVuYWJsZWQgPSB2OyBUb2dnbGVXYWxrU3BlZWQodikgZW5kKQogICAgY3JlYXRlU2xpZGVyKEdlbmVyYWxUYWJDb250ZW50LCAiS2VjZXBhdGFuIFRlcmJhbmciLCAwLCBTZXR0aW5ncy5NYXhGbHlTcGVlZCwgU2V0dGluZ3MuRmx5U3BlZWQsICIiLCAwLjEsIGZ1bmN0aW9uKHYpIFNldHRpbmdzLkZseVNwZWVkID0gdiBlbmQpCiAgICBjcmVhdGVUb2dnbGUoR2VuZXJhbFRhYkNvbnRlbnQsICJUZXJiYW5nIiwgSXNGbHlpbmcsIGZ1bmN0aW9uKHYpIGlmIHYgdGhlbiBpZiBVc2VySW5wdXRTZXJ2aWNlLlRvdWNoRW5hYmxlZCB0aGVuIFN0YXJ0TW9iaWxlRmx5KCkgZWxzZSBTdGFydEZseSgpIGVuZCBlbHNlIGlmIFVzZXJJbnB1dFNlcnZpY2UuVG91Y2hFbmFibGVkIHRoZW4gU3RvcE1vYmlsZUZseSgpIGVsc2UgU3RvcEZseSgpIGVuZCBlbmQgZW5kKQogICAgY3JlYXRlVG9nZ2xlKEdlbmVyYWxUYWJDb250ZW50LCAiTm9jbGlwIiwgSXNOb2NsaXBFbmFibGVkLCBmdW5jdGlvbih2KSBUb2dnbGVOb2NsaXAodikgZW5kKQogICAgY3JlYXRlVG9nZ2xlKEdlbmVyYWxUYWJDb250ZW50LCAiSW5maW5pdHkgSnVtcCIsIElzSW5maW5pdHlKdW1wRW5hYmxlZCwgZnVuY3Rpb24odikgSXNJbmZpbml0eUp1bXBFbmFibGVkID0gdjsgc2F2ZUZlYXR1cmVTdGF0ZXMoKTsgaWYgdiB0aGVuIGlmIExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkIHRoZW4gaW5maW5pdHlKdW1wQ29ubmVjdGlvbiA9IFVzZXJJbnB1dFNlcnZpY2UuSnVtcFJlcXVlc3Q6Q29ubmVjdChmdW5jdGlvbigpIExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZDpDaGFuZ2VTdGF0ZShFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkp1bXBpbmcpIGVuZCkgZW5kIGVsc2VpZiBpbmZpbml0eUp1bXBDb25uZWN0aW9uIHRoZW4gaW5maW5pdHlKdW1wQ29ubmVjdGlvbjpEaXNjb25uZWN0KCk7IGluZmluaXR5SnVtcENvbm5lY3Rpb24gPSBuaWwgZW5kIGVuZCkKICAgIGNyZWF0ZVRvZ2dsZShHZW5lcmFsVGFiQ29udGVudCwgIk1vZGUgS2ViYWwiLCBJc0dvZE1vZGVFbmFibGVkLCBUb2dnbGVHb2RNb2RlKSAKICAgIGNyZWF0ZUJ1dHRvbihHZW5lcmFsVGFiQ29udGVudCwgIkJ1a2EgVG91Y2ggRmxpbmciLCBDcmVhdGVUb3VjaEZsaW5nR1VJKQogICAgY3JlYXRlVG9nZ2xlKEdlbmVyYWxUYWJDb250ZW50LCAiQW50aS1GbGluZyIsIGFudGlmbGluZ19lbmFibGVkLCBUb2dnbGVBbnRpRmxpbmcpCiAgICBjcmVhdGVUb2dnbGUoR2VuZXJhbFRhYkNvbnRlbnQsICJBbnRpLUxhZyIsIElzQW50aUxhZ0VuYWJsZWQsIFRvZ2dsZUFudGlMYWcpCiAgICBjcmVhdGVUb2dnbGUoR2VuZXJhbFRhYkNvbnRlbnQsICJCb29zdCBGUFMiLCBJc0Jvb3N0RlBTRW5hYmxlZCwgVG9nZ2xlQm9vc3RGUFMpCiAgICBjcmVhdGVUb2dnbGUoR2VuZXJhbFRhYkNvbnRlbnQsICJJbnZpc2libGUiLCBJc0ludmlzaWJpbGl0eUVuYWJsZWQsIGZ1bmN0aW9uKHYpCiAgICAgICAgSXNJbnZpc2liaWxpdHlFbmFibGVkID0gdgogICAgICAgIGlmIHYgdGhlbgogICAgICAgICAgICBtYWtlSW52aXNpYmxlKCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIFR1cm5WaXNpYmxlKCkKICAgICAgICBlbmQKICAgICAgICBzYXZlRmVhdHVyZVN0YXRlcygpCiAgICBlbmQpCiAgICBjcmVhdGVCdXR0b24oR2VuZXJhbFRhYkNvbnRlbnQsICJIb3AgU2VydmVyIiwgZnVuY3Rpb24oKSBIb3BTZXJ2ZXIoKSBlbmQpCgogICAgLS0gVGFiIFRlbXB1cgogICAgY3JlYXRlU2xpZGVyKENvbWJhdFRhYkNvbnRlbnQsICJSYWRpdXMgQXVyYSBTZXJhbmciLCAwLCBTZXR0aW5ncy5NYXhLaWxsQXVyYVJhZGl1cywgU2V0dGluZ3MuS2lsbEF1cmFSYWRpdXMsICJTdHVkcyIsIDEsIGZ1bmN0aW9uKHYpIFNldHRpbmdzLktpbGxBdXJhUmFkaXVzID0gdiBlbmQpCiAgICBjcmVhdGVTbGlkZXIoQ29tYmF0VGFiQ29udGVudCwgIktlcnVzYWthbiIsIDAsIFNldHRpbmdzLk1heEtpbGxBdXJhRGFtYWdlLCBTZXR0aW5ncy5LaWxsQXVyYURhbWFnZSwgIkhQIiwgMSwgZnVuY3Rpb24odikgU2V0dGluZ3MuS2lsbEF1cmFEYW1hZ2UgPSB2IGVuZCkKICAgIGNyZWF0ZVRvZ2dsZShDb21iYXRUYWJDb250ZW50LCAiQXVyYSBTZXJhbmciLCBJc0tpbGxBdXJhRW5hYmxlZCwgVG9nZ2xlS2lsbEF1cmEpCiAgICBjcmVhdGVTbGlkZXIoQ29tYmF0VGFiQ29udGVudCwgIkZPViBBaW1ib3QiLCAwLCBTZXR0aW5ncy5NYXhBaW1ib3RGT1YsIFNldHRpbmdzLkFpbWJvdEZPViwgIlBpa3NlbCIsIDEsIGZ1bmN0aW9uKHYpIFNldHRpbmdzLkFpbWJvdEZPViA9IHY7IFVwZGF0ZUZPVkNpcmNsZSgpIGVuZCkKICAgIGNyZWF0ZURyb3Bkb3duKENvbWJhdFRhYkNvbnRlbnQsICJUYXJnZXQgQWltYm90IiwgeyJIZWFkIiwgIkh1bWFub2lkUm9vdFBhcnQiLCAiVG9yc28ifSwgU2V0dGluZ3MuQWltYm90UGFydCwgZnVuY3Rpb24odikgU2V0dGluZ3MuQWltYm90UGFydCA9IHYgZW5kKQogICAgY3JlYXRlVG9nZ2xlKENvbWJhdFRhYkNvbnRlbnQsICJBaW1ib3QiLCBJc0FpbWJvdEVuYWJsZWQsIFRvZ2dsZUFpbWJvdCkKICAgIAogICAgLS0gVGFiIFRlbGVwb3J0CiAgICBjcmVhdGVCdXR0b24oVGVsZXBvcnRUYWJDb250ZW50LCAiUGluZGFpIFVsYW5nIE1hcCIsIGZ1bmN0aW9uKCkgZm9yIF8sIHBhcnQgaW4gcGFpcnMoV29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvIGlmIHBhcnQ6SXNBKCJCYXNlUGFydCIpIHRoZW4gbG9jYWwgbmFtZUxvd2VyID0gcGFydC5OYW1lOmxvd2VyKCk7IGlmIChuYW1lTG93ZXI6ZmluZCgiY2hlY2twb2ludCIpIG9yIG5hbWVMb3dlcjpmaW5kKCJwb3MiKSBvciBuYW1lTG93ZXI6ZmluZCgiZmluaXNoIikgb3IgbmFtZUxvd2VyOmZpbmQoInN0YXJ0IikpIGFuZCBub3QgUGxheWVyczpHZXRQbGF5ZXJGcm9tQ2hhcmFjdGVyKHBhcnQuUGFyZW50KSB0aGVuIGFkZFRlbGVwb3J0TG9jYXRpb24ocGFydC5OYW1lLCBwYXJ0LkNGcmFtZSkgZW5kIGVuZCBlbmQgZW5kKS5MYXlvdXRPcmRlciA9IDEKICAgIGNyZWF0ZUJ1dHRvbihUZWxlcG9ydFRhYkNvbnRlbnQsICJTaW1wYW4gTG9rYXNpIFNhYXQgSW5pIiwgZnVuY3Rpb24oKSBpZiBMb2NhbFBsYXllci5DaGFyYWN0ZXIgYW5kIExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4gbG9jYWwgbmV3TmFtZSA9ICJLdXN0b20gIiAuLiAoI3NhdmVkVGVsZXBvcnRMb2NhdGlvbnMgKyAxKTsgYWRkVGVsZXBvcnRMb2NhdGlvbihuZXdOYW1lLCBMb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUpIGVuZCBlbmQpLkxheW91dE9yZGVyID0gMgogICAgY3JlYXRlQnV0dG9uKFRlbGVwb3J0VGFiQ29udGVudCwgIkVrc3BvciBTZW11YSIsIGZ1bmN0aW9uKCkgaWYgbm90IHNldGNsaXBib2FyZCB0aGVuIHNob3dOb3RpZmljYXRpb24oIkV4ZWN1dG9yIHRpZGFrIG1lbmR1a3VuZyBjbGlwYm9hcmQhIiwgQ29sb3IzLmZyb21SR0IoMjAwLCA1MCwgNTApKTsgcmV0dXJuIGVuZDsgbG9jYWwgZGF0YVRvRXhwb3J0ID0ge307IGZvciBfLCBsb2MgaW4gaXBhaXJzKHNhdmVkVGVsZXBvcnRMb2NhdGlvbnMpIGRvIHRhYmxlLmluc2VydChkYXRhVG9FeHBvcnQsIHsgTmFtZSA9IGxvYy5OYW1lLCBDRnJhbWVEYXRhID0ge2xvYy5DRnJhbWU6R2V0Q29tcG9uZW50cygpfSB9KSBlbmQ7IGxvY2FsIHN1Y2Nlc3MsIHJlc3VsdCA9IHBjYWxsKGZ1bmN0aW9uKCkgbG9jYWwganNvbkRhdGEgPSBIdHRwU2VydmljZTpKU09ORW5jb2RlKGRhdGFUb0V4cG9ydCk7IHNldGNsaXBib2FyZChqc29uRGF0YSk7IHNob3dOb3RpZmljYXRpb24oIkRhdGEgZGlzYWxpbiBrZSBjbGlwYm9hcmQhIiwgQ29sb3IzLmZyb21SR0IoNTAsIDIwMCwgNTApKSBlbmQpOyBpZiBub3Qgc3VjY2VzcyB0aGVuIHNob3dOb3RpZmljYXRpb24oIkdhZ2FsIG1lbmdla3Nwb3IgZGF0YSEiLCBDb2xvcjMuZnJvbVJHQigyMDAsIDUwLCA1MCkpIGVuZCBlbmQpLkxheW91dE9yZGVyID0gMwogICAgY3JlYXRlQnV0dG9uKFRlbGVwb3J0VGFiQ29udGVudCwgIkltcG9yIFNlbXVhIiwgZnVuY3Rpb24oKSBzaG93SW1wb3J0UHJvbXB0KGZ1bmN0aW9uKHRleHQpIGlmIG5vdCB0ZXh0IG9yIHRleHQgPT0gIiIgdGhlbiByZXR1cm4gZW5kOyBsb2NhbCBzdWNjZXNzLCBkZWNvZGVkRGF0YSA9IHBjYWxsKEh0dHBTZXJ2aWNlLkpTT05EZWNvZGUsIEh0dHBTZXJ2aWNlLCB0ZXh0KTsgaWYgbm90IHN1Y2Nlc3Mgb3IgdHlwZShkZWNvZGVkRGF0YSkgfj0gInRhYmxlIiB0aGVuIHNob3dOb3RpZmljYXRpb24oIkRhdGEgaW1wb3IgdGlkYWsgdmFsaWQhIiwgQ29sb3IzLmZyb21SR0IoMjAwLCA1MCwgNTApKTsgcmV0dXJuIGVuZDsgbG9jYWwgZXhpc3RpbmdOYW1lcyA9IHt9OyBmb3IgXywgbG9jIGluIGlwYWlycyhzYXZlZFRlbGVwb3J0TG9jYXRpb25zKSBkbyBleGlzdGluZ05hbWVzW2xvYy5OYW1lXSA9IHRydWUgZW5kOyBsb2NhbCBpbXBvcnRlZENvdW50ID0gMDsgZm9yIF8sIGRhdGEgaW4gaXBhaXJzKGRlY29kZWREYXRhKSBkbyBpZiB0eXBlKGRhdGEpID09ICJ0YWJsZSIgYW5kIGRhdGEuTmFtZSBhbmQgZGF0YS5DRnJhbWVEYXRhIGFuZCBub3QgZXhpc3RpbmdOYW1lc1tkYXRhLk5hbWVdIHRoZW4gbG9jYWwgY2ZyYW1lID0gQ0ZyYW1lLm5ldyh1bnBhY2soZGF0YS5DRnJhbWVEYXRhKSk7IHRhYmxlLmluc2VydChzYXZlZFRlbGVwb3J0TG9jYXRpb25zLCB7IE5hbWUgPSBkYXRhLk5hbWUsIENGcmFtZSA9IGNmcmFtZSB9KTsgZXhpc3RpbmdOYW1lc1tkYXRhLk5hbWVdID0gdHJ1ZTsgaW1wb3J0ZWRDb3VudCA9IGltcG9ydGVkQ291bnQgKyAxIGVuZCBlbmQ7IGlmIGltcG9ydGVkQ291bnQgPiAwIHRoZW4gdGFibGUuc29ydChzYXZlZFRlbGVwb3J0TG9jYXRpb25zLCBuYXR1cmFsQ29tcGFyZSk7IHNhdmVUZWxlcG9ydERhdGEoKTsgdXBkYXRlVGVsZXBvcnRMaXN0KCk7IHNob3dOb3RpZmljYXRpb24oaW1wb3J0ZWRDb3VudCAuLiAiIGxva2FzaSBiZXJoYXNpbCBkaWltcG9yISIsIENvbG9yMy5mcm9tUkdCKDUwLCAyMDAsIDUwKSkgZWxzZSBzaG93Tm90aWZpY2F0aW9uKCJUaWRhayBhZGEgbG9rYXNpIGJhcnUgdW50dWsgZGlpbXBvci4iLCBDb2xvcjMuZnJvbVJHQigyMDAsIDE1MCwgNTApKSBlbmQgZW5kKSBlbmQpLkxheW91dE9yZGVyID0gNAogICAgCiAgICAtLSBUYWIgVklQIChCZXJpc2kgRW1vdGUgZGFuIEFuaW1hc2kpCiAgICBjcmVhdGVUb2dnbGUoVmlwVGFiQ29udGVudCwgIkFrdGlma2FuIEVtb3RlIEFzbGkiLCBpc0Vtb3RlRW5hYmxlZCwgZnVuY3Rpb24odikgCiAgICAgICAgaXNFbW90ZUVuYWJsZWQgPSB2OyAKICAgICAgICBpZiBpc0Vtb3RlRW5hYmxlZCB0aGVuIAogICAgICAgICAgICBpbml0aWFsaXplRW1vdGVHVUkoKSAKICAgICAgICAgICAgRW1vdGVUb2dnbGVCdXR0b24uVmlzaWJsZSA9IHRydWUKICAgICAgICBlbHNlIAogICAgICAgICAgICBkZXN0cm95RW1vdGVHVUkoKSAKICAgICAgICAgICAgRW1vdGVUb2dnbGVCdXR0b24uVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgZW5kIAogICAgZW5kKQogICAgY3JlYXRlVG9nZ2xlKFZpcFRhYkNvbnRlbnQsICJBa3RpZmthbiBBbmltYXNpIFZJUCIsIGlzQW5pbWF0aW9uRW5hYmxlZCwgZnVuY3Rpb24odikgCiAgICAgICAgaXNBbmltYXRpb25FbmFibGVkID0gdjsgCiAgICAgICAgaWYgaXNBbmltYXRpb25FbmFibGVkIHRoZW4gCiAgICAgICAgICAgIGluaXRpYWxpemVBbmltYXRpb25HVUkoKSAKICAgICAgICAgICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5WaXNpYmxlID0gdHJ1ZQogICAgICAgIGVsc2UgCiAgICAgICAgICAgIGRlc3Ryb3lBbmltYXRpb25HVUkoKSAKICAgICAgICAgICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5WaXNpYmxlID0gZmFsc2UKICAgICAgICBlbmQgCiAgICBlbmQpCgogICAgLS0gVGFiIFBlbmdhdHVyYW4KICAgIGNyZWF0ZVRvZ2dsZShTZXR0aW5nc1RhYkNvbnRlbnQsICJLdW5jaSBCYXIgVG9tYm9sIiwgbm90IGlzTWluaVRvZ2dsZURyYWdnYWJsZSwgZnVuY3Rpb24odikgaXNNaW5pVG9nZ2xlRHJhZ2dhYmxlID0gbm90IHYgZW5kKS5MYXlvdXRPcmRlciA9IDEKICAgIGNyZWF0ZVRvZ2dsZShTZXR0aW5nc1RhYkNvbnRlbnQsICJUcmFuc3BhcmFuc2kgRW1vdGUiLCBpc0Vtb3RlVHJhbnNwYXJlbnQsIGZ1bmN0aW9uKHYpCiAgICAgICAgaXNFbW90ZVRyYW5zcGFyZW50ID0gdgogICAgICAgIGlmIGlzRW1vdGVFbmFibGVkIGFuZCBhcHBseUVtb3RlVHJhbnNwYXJlbmN5IHRoZW4gYXBwbHlFbW90ZVRyYW5zcGFyZW5jeSh2KSBlbmQKICAgIGVuZCkuTGF5b3V0T3JkZXIgPSAyCiAgICBjcmVhdGVUb2dnbGUoU2V0dGluZ3NUYWJDb250ZW50LCAiVHJhbnNwYXJhbnNpIEFuaW1hc2kiLCBpc0FuaW1hdGlvblRyYW5zcGFyZW50LCBmdW5jdGlvbih2KQogICAgICAgIGlzQW5pbWF0aW9uVHJhbnNwYXJlbnQgPSB2CiAgICAgICAgaWYgaXNBbmltYXRpb25FbmFibGVkIGFuZCBhcHBseUFuaW1hdGlvblRyYW5zcGFyZW5jeSB0aGVuIGFwcGx5QW5pbWF0aW9uVHJhbnNwYXJlbmN5KHYpIGVuZAogICAgZW5kKS5MYXlvdXRPcmRlciA9IDMKICAgIGNyZWF0ZVNsaWRlcihTZXR0aW5nc1RhYkNvbnRlbnQsICJVa3VyYW4gVG9tYm9sIE5hdmlnYXNpIiwgMTAsIDUwLCAyMCwgInB4IiwgMSwgZnVuY3Rpb24odikKICAgICAgICBpZiBNaW5pVG9nZ2xlQnV0dG9uIHRoZW4KICAgICAgICAgICAgTWluaVRvZ2dsZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIHYsIDAsIHYpCiAgICAgICAgICAgIE1pbmlUb2dnbGVCdXR0b24uVGV4dFNpemUgPSBtYXRoLmZsb29yKHYgKiAwLjY2KQogICAgICAgIGVuZAogICAgZW5kKS5MYXlvdXRPcmRlciA9IDQKICAgIGNyZWF0ZUJ1dHRvbihTZXR0aW5nc1RhYkNvbnRlbnQsICJTaW1wYW4gUG9zaXNpIFVJIiwgc2F2ZUd1aVBvc2l0aW9ucykuTGF5b3V0T3JkZXIgPSA1CiAgICBjcmVhdGVCdXR0b24oU2V0dGluZ3NUYWJDb250ZW50LCAiVHV0dXAgU2tyaXAiLCBDbG9zZVNjcmlwdCkuTGF5b3V0T3JkZXIgPSA2CiAgICAKICAgIC0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgLS0gPT0gQkFHSUFOIFVUQU1BIERBTiBLT05FS1NJIEVWRU5UICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID09CiAgICAtLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIAogICAgTWFrZURyYWdnYWJsZShNYWluRnJhbWUsIFRpdGxlQmFyLCBmdW5jdGlvbigpIHJldHVybiB0cnVlIGVuZCwgbmlsKQogICAgTWFrZURyYWdnYWJsZShNaW5pVG9nZ2xlQ29udGFpbmVyLCBNaW5pVG9nZ2xlQ29udGFpbmVyLCBmdW5jdGlvbigpIHJldHVybiBpc01pbmlUb2dnbGVEcmFnZ2FibGUgZW5kLCBuaWwpCgogICAgTWluaVRvZ2dsZUJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICBNYWluRnJhbWUuVmlzaWJsZSA9IG5vdCBNYWluRnJhbWUuVmlzaWJsZQogICAgICAgIE1pbmlUb2dnbGVCdXR0b24uVGV4dCA9IE1haW5GcmFtZS5WaXNpYmxlIGFuZCAi4peAIiBvciAi4pa2IgogICAgICAgIE1pbmlUb2dnbGVCdXR0b24uQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IE1haW5GcmFtZS5WaXNpYmxlIGFuZCAwLjUgb3IgMQogICAgICAgIGlmIE1haW5GcmFtZS5WaXNpYmxlIHRoZW4KICAgICAgICAgICAgaWYgbm90IChQbGF5ZXJUYWJDb250ZW50LlZpc2libGUgb3IgR2VuZXJhbFRhYkNvbnRlbnQuVmlzaWJsZSBvciBDb21iYXRUYWJDb250ZW50LlZpc2libGUgb3IgVGVsZXBvcnRUYWJDb250ZW50LlZpc2libGUgb3IgU2V0dGluZ3NUYWJDb250ZW50LlZpc2libGUgb3IgVmlwVGFiQ29udGVudC5WaXNpYmxlKSB0aGVuCiAgICAgICAgICAgICAgICBzd2l0Y2hUYWIoIlBsYXllciIpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHVwZGF0ZVBsYXllckxpc3QoKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICBFbW90ZVRvZ2dsZUJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICBpZiBFbW90ZVNjcmVlbkd1aSB0aGVuCiAgICAgICAgICAgIGxvY2FsIGZyYW1lID0gRW1vdGVTY3JlZW5HdWk6RmluZEZpcnN0Q2hpbGQoIk1haW5GcmFtZSIpCiAgICAgICAgICAgIGlmIGZyYW1lIHRoZW4KICAgICAgICAgICAgICAgIGZyYW1lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgICAgICBFbW90ZVRvZ2dsZUJ1dHRvbi5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgQW5pbWF0aW9uU2hvd0J1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICBpZiBBbmltYXRpb25TY3JlZW5HdWkgdGhlbgogICAgICAgICAgICBsb2NhbCBmcmFtZSA9IEFuaW1hdGlvblNjcmVlbkd1aTpGaW5kRmlyc3RDaGlsZCgiR2F6ZUJybyIpCiAgICAgICAgICAgIGlmIGZyYW1lIHRoZW4KICAgICAgICAgICAgICAgIGZyYW1lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgICAgICBBbmltYXRpb25TaG93QnV0dG9uLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgVXNlcklucHV0U2VydmljZS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQsIHByb2Nlc3NlZCkgCiAgICAgICAgaWYgcHJvY2Vzc2VkIHRoZW4gcmV0dXJuIGVuZDsgaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuRiBhbmQgbm90IFVzZXJJbnB1dFNlcnZpY2UuVG91Y2hFbmFibGVkIHRoZW4gaWYgbm90IElzRmx5aW5nIHRoZW4gU3RhcnRGbHkoKSBlbHNlIFN0b3BGbHkoKSBlbmQgZW5kIAogICAgZW5kKQogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBhcHBseUFsbEFuaW1hdGlvbnMoY2hhcmFjdGVyKQogICAgICAgIGlmIG5vdCBjaGFyYWN0ZXIgb3Igbm90IG5leHQobGFzdEFuaW1hdGlvbnMpIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIAogICAgICAgIGxvY2FsIGFuaW1hdGVTY3JpcHQgPSBjaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJBbmltYXRlIiwgMTApCiAgICAgICAgaWYgbm90IGFuaW1hdGVTY3JpcHQgdGhlbiAKICAgICAgICAgICAgd2FybigiQXJleGFuc1Rvb2xzOiBHYWdhbCBtZW5lcmFwa2FuIGFuaW1hc2ksIHNjcmlwdCAnQW5pbWF0ZScgdGlkYWsgZGl0ZW11a2FuLiIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIHRhc2sud2FpdCgwLjUpCiAgICAgICAgCiAgICAgICAgbG9jYWwgaHVtYW5vaWQgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpCiAgICAgICAgaWYgbm90IGh1bWFub2lkIHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIEFuaW0gPSBhbmltYXRlU2NyaXB0CiAgICAgICAgICAgIGh1bWFub2lkLlBsYXRmb3JtU3RhbmQgPSB0cnVlCiAgICAgICAgICAgIHRhc2sud2FpdCgwLjEpCgogICAgICAgICAgICBpZiBsYXN0QW5pbWF0aW9ucy5JZGxlIHRoZW4gQW5pbS5pZGxlLkFuaW1hdGlvbjEuQW5pbWF0aW9uSWQsIEFuaW0uaWRsZS5BbmltYXRpb24yLkFuaW1hdGlvbklkID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9Ii4ubGFzdEFuaW1hdGlvbnMuSWRsZVsxXSwgImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9Ii4ubGFzdEFuaW1hdGlvbnMuSWRsZVsyXSBlbmQKICAgICAgICAgICAgaWYgbGFzdEFuaW1hdGlvbnMuV2FsayB0aGVuIEFuaW0ud2Fsay5XYWxrQW5pbS5BbmltYXRpb25JZCA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPSIuLmxhc3RBbmltYXRpb25zLldhbGsgZW5kCiAgICAgICAgICAgIGlmIGxhc3RBbmltYXRpb25zLlJ1biB0aGVuIEFuaW0ucnVuLlJ1bkFuaW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0iLi5sYXN0QW5pbWF0aW9ucy5SdW4gZW5kCiAgICAgICAgICAgIGlmIGxhc3RBbmltYXRpb25zLkp1bXAgdGhlbiBBbmltLmp1bXAuSnVtcEFuaW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0iLi5sYXN0QW5pbWF0aW9ucy5KdW1wIGVuZAogICAgICAgICAgICBpZiBsYXN0QW5pbWF0aW9ucy5GYWxsIHRoZW4gQW5pbS5mYWxsLkZhbGxBbmltLkFuaW1hdGlvbklkID0gImh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9Ii4ubGFzdEFuaW1hdGlvbnMuRmFsbCBlbmQKICAgICAgICAgICAgaWYgbGFzdEFuaW1hdGlvbnMuU3dpbSBhbmQgQW5pbS5zd2ltIHRoZW4gQW5pbS5zd2ltLlN3aW0uQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0iLi5sYXN0QW5pbWF0aW9ucy5Td2ltIGVuZAogICAgICAgICAgICBpZiBsYXN0QW5pbWF0aW9ucy5Td2ltSWRsZSBhbmQgQW5pbS5zd2ltaWRsZSB0aGVuIEFuaW0uc3dpbWlkbGUuU3dpbUlkbGUuQW5pbWF0aW9uSWQgPSAiaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0iLi5sYXN0QW5pbWF0aW9ucy5Td2ltSWRsZSBlbmQKICAgICAgICAgICAgaWYgbGFzdEFuaW1hdGlvbnMuQ2xpbWIgdGhlbiBBbmltLmNsaW1iLkNsaW1iQW5pbS5BbmltYXRpb25JZCA9ICJodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPSIuLmxhc3RBbmltYXRpb25zLkNsaW1iIGVuZAoKICAgICAgICAgICAgdGFzay53YWl0KDAuMSkKICAgICAgICAgICAgaHVtYW5vaWQuUGxhdGZvcm1TdGFuZCA9IGZhbHNlCiAgICAgICAgICAgIGh1bWFub2lkOkNoYW5nZVN0YXRlKEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuR2V0dGluZ1VwKQogICAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBsb2NhbCBmdW5jdGlvbiBhcHBseUluaXRpYWxTdGF0ZXMoKQogICAgICAgIGlmIElzQW50aUxhZ0VuYWJsZWQgdGhlbiBUb2dnbGVBbnRpTGFnKHRydWUpIGVuZAogICAgICAgIGlmIElzS2lsbEF1cmFFbmFibGVkIHRoZW4gVG9nZ2xlS2lsbEF1cmEodHJ1ZSkgZW5kCiAgICAgICAgaWYgSXNBaW1ib3RFbmFibGVkIHRoZW4gVG9nZ2xlQWltYm90KHRydWUpIGVuZAogICAgICAgIGlmIElzQm9vc3RGUFNFbmFibGVkIHRoZW4gVG9nZ2xlQm9vc3RGUFModHJ1ZSkgZW5kCiAgICBlbmQKICAgIAogICAgbG9jYWwgZnVuY3Rpb24gcmVhcHBseUZlYXR1cmVzT25SZXNwYXduKGNoYXJhY3RlcikKICAgICAgICBpZiBub3QgY2hhcmFjdGVyIHRoZW4gcmV0dXJuIGVuZAogICAgCiAgICAgICAgdGFzay53YWl0KDAuMikgCiAgICAKICAgICAgICBsb2NhbCBodW1hbm9pZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICBpZiBub3QgaHVtYW5vaWQgdGhlbiByZXR1cm4gZW5kCiAgICAKICAgICAgICBpZiBJc1dhbGtTcGVlZEVuYWJsZWQgdGhlbgogICAgICAgICAgICBodW1hbm9pZC5XYWxrU3BlZWQgPSBTZXR0aW5ncy5XYWxrU3BlZWQKICAgICAgICBlbHNlCiAgICAgICAgICAgIGh1bWFub2lkLldhbGtTcGVlZCA9IE9yaWdpbmFsV2Fsa1NwZWVkCiAgICAgICAgZW5kCiAgICAKICAgICAgICBpZiBJc0dvZE1vZGVFbmFibGVkIHRoZW4KICAgICAgICAgICAgYXBwbHlHb2RNb2RlKGNoYXJhY3RlcikKICAgICAgICBlbmQKICAgIAogICAgICAgIGlmIGFudGlmbGluZ19lbmFibGVkIHRoZW4KICAgICAgICAgICAgVG9nZ2xlQW50aUZsaW5nKHRydWUpCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgaWYgSXNOb2NsaXBFbmFibGVkIHRoZW4KICAgICAgICAgICAgVG9nZ2xlTm9jbGlwKHRydWUpCiAgICAgICAgZW5kCiAgICAKICAgICAgICBpZiBJc0luZmluaXR5SnVtcEVuYWJsZWQgdGhlbgogICAgICAgICAgICBpZiBpbmZpbml0eUp1bXBDb25uZWN0aW9uIHRoZW4gaW5maW5pdHlKdW1wQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgICAgIGluZmluaXR5SnVtcENvbm5lY3Rpb24gPSBVc2VySW5wdXRTZXJ2aWNlLkp1bXBSZXF1ZXN0OkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBMb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQ6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5KdW1waW5nKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZCkKICAgICAgICBlbmQKICAgIAogICAgICAgIGlmIElzRmx5aW5nIHRoZW4KICAgICAgICAgICAgSXNGbHlpbmcgPSBmYWxzZQogICAgICAgICAgICBpZiBVc2VySW5wdXRTZXJ2aWNlLlRvdWNoRW5hYmxlZCB0aGVuCiAgICAgICAgICAgICAgICBTdGFydE1vYmlsZUZseSgpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIFN0YXJ0Rmx5KCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIGlmIElzSW52aXNpYmlsaXR5RW5hYmxlZCB0aGVuCiAgICAgICAgZW5kCgogICAgICAgIGFwcGx5QWxsQW5pbWF0aW9ucyhjaGFyYWN0ZXIpCiAgICBlbmQKICAgIAogICAgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChyZWFwcGx5RmVhdHVyZXNPblJlc3Bhd24pCgogICAgLS0gSU5JU0lBTElTQVNJCiAgICBsb2FkQW5pbWF0aW9ucygpCiAgICBsb2FkVGVsZXBvcnREYXRhKCkKICAgIGxvYWRHdWlQb3NpdGlvbnMoKQogICAgbG9hZEZlYXR1cmVTdGF0ZXMoKQogICAgYXBwbHlJbml0aWFsU3RhdGVzKCkKICAgIHN3aXRjaFRhYigiUGxheWVyIikKICAgIAogICAgaWYgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICByZWFwcGx5RmVhdHVyZXNPblJlc3Bhd24oTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyKQogICAgZW5kCmVuZCk='))()